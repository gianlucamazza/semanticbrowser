# Semantic Browser Configuration
# Copy this file to .env and customize for your environment

# ==============================================================================
# JWT Authentication (REQUIRED)
# ==============================================================================
# Secret key for JWT token signing and verification
# IMPORTANT: Must be at least 32 characters long
# Generate a secure random key: openssl rand -base64 48
JWT_SECRET=change-this-to-a-long-random-secret-key-at-least-32-characters-long

# ==============================================================================
# Machine Learning Models (OPTIONAL)
# ==============================================================================
# Path to ONNX NER model file
# If not set or file doesn't exist, falls back to regex-based entity extraction
# Requires --features onnx-integration
# NER_MODEL_PATH=./models/ner-model.onnx

# Path to Knowledge Graph inference model
# If not set or file doesn't exist, uses rule-based inference
# Requires --features onnx-integration
# KG_INFERENCE_MODEL_PATH=./models/kg-inference-model.onnx

# ==============================================================================
# Knowledge Graph Persistence (OPTIONAL)
# ==============================================================================
# Path for persistent Knowledge Graph storage
# If not set, uses in-memory storage (data lost on restart)
# KG_PERSIST_PATH=./data/kg/storage

# ==============================================================================
# Logging Configuration (OPTIONAL)
# ==============================================================================
# Log level: trace, debug, info, warn, error
# Default: info
# RUST_LOG=info

# More granular logging per module
# RUST_LOG=semantic_browser=debug,semantic_browser::api=trace

# ==============================================================================
# API Server Configuration (OPTIONAL)
# ==============================================================================
# Server bind address and port
# Default: 0.0.0.0:3000
# SERVER_ADDR=0.0.0.0
# SERVER_PORT=3000

# ==============================================================================
# Security Configuration (OPTIONAL)
# ==============================================================================
# Enable strict security mode
# SECURITY_STRICT_MODE=true

# Maximum HTML input size in bytes
# Default: 10_000_000 (10 MB)
# MAX_HTML_SIZE=10000000

# Maximum SPARQL query length
# Default: 10_000
# MAX_QUERY_LENGTH=10000

# ==============================================================================
# Browser Automation (OPTIONAL)
# ==============================================================================
# Headless browser automation with chromiumoxide
# Requires --features browser-automation

# Path to Chromium/Chrome executable
# If not set, will auto-detect from common locations
# CHROMIUM_PATH=/usr/bin/chromium
# CHROMIUM_PATH=/Applications/Google Chrome.app/Contents/MacOS/Google Chrome

# Run browser in headless mode (no GUI)
# Default: true
# BROWSER_HEADLESS=true

# Block ads and trackers for minimalist browsing
# NOTE: URL-based blocking not supported in chromiumoxide 0.7
# This flag adds --disable-background-networking to chromium args
# Default: true
# BLOCK_ADS=true

# Block images (for text-only extraction)
# NOTE: Resource blocking via URL patterns not fully supported in chromiumoxide 0.7
# Default: false
# BLOCK_IMAGES=false

# Navigation timeout in seconds
# Default: 30
# BROWSER_TIMEOUT_SECS=30

# Maximum number of concurrent browser tabs
# Default: 2
# BROWSER_POOL_SIZE=2

# Directory for Chromium user data (profile). Defaults to a unique temp folder per run.
# CHROMIUMOXIDE_USER_DATA_DIR=/tmp/semantic-browser/chromium-profile

# ==============================================================================
# External Integrations (OPTIONAL - DEPRECATED)
# ==============================================================================
# Python executable path for PyO3 integration
# DEPRECATED: Use browser-automation feature instead
# Default: python3
# PYTHON_PATH=/usr/bin/python3

# Browser-use Python library path
# DEPRECATED: Use browser-automation feature instead
# BROWSER_USE_PATH=./venv/lib/python3.x/site-packages

# ==============================================================================
# Development & Testing
# ==============================================================================
# Use development-friendly settings (NOT FOR PRODUCTION)
# DEVELOPMENT_MODE=false

# Disable authentication (NOT FOR PRODUCTION)
# DISABLE_AUTH=false

# ==============================================================================
# Production Recommendations
# ==============================================================================
# 1. Always use a strong, randomly generated JWT_SECRET
# 2. Enable HTTPS/TLS in production
# 3. Use environment-specific .env files (.env.production, .env.staging)
# 4. Never commit .env files to version control
# 5. Rotate JWT_SECRET periodically
# 6. Monitor and log all authentication events
# 7. Enable seccomp sandboxing on Linux (--features seccomp)
# 8. Use persistent KG storage for production data
# 9. Configure proper log levels (warn or error for production)
# 10. Set up rate limiting per IP in reverse proxy

# ==============================================================================
# Docker Configuration
# ==============================================================================
# When running in Docker, mount this file or pass environment variables
# docker run -v $(pwd)/.env:/app/.env semantic-browser
# or
# docker run --env-file .env semantic-browser
