{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Semantic Browser Documentation","text":"<p>Welcome to the comprehensive documentation for the Semantic Browser, a Rust-based semantic web agent designed for AI agents.</p>"},{"location":"#getting-started","title":"\ud83d\ude80 Getting Started","text":"<p>New to Semantic Browser? Start here:</p> <ul> <li>Quick Start - Get up and running in 5 minutes</li> <li>Docker Setup - Complete Docker environment setup</li> <li>Core Operations - Essential operations and workflows</li> </ul>"},{"location":"#documentation-structure","title":"\ud83d\udcda Documentation Structure","text":""},{"location":"#user-guide","title":"User Guide","text":"<p>Practical guides for using Semantic Browser:</p> <ul> <li>Quick Start - Installation and basic usage</li> <li>Docker Setup - Docker deployment guide</li> <li>Core Operations - Main workflows and operations</li> <li>Browser Automation - Headless browsing features</li> <li>Examples - Code examples and scripts</li> </ul>"},{"location":"#developer-guide","title":"Developer Guide","text":"<p>Technical documentation for contributors:</p> <ul> <li>Architecture - System design and components</li> <li>Testing - Testing strategies and guidelines</li> <li>Contributing - Development workflow</li> <li>Performance Tuning - Optimization guide</li> <li>Production Deployment - Production setup</li> <li>MCP Extension - Model Context Protocol integration</li> </ul>"},{"location":"#api-reference","title":"API Reference","text":"<p>Technical API documentation:</p> <ul> <li>REST API - Complete API reference</li> <li>Authentication - JWT authentication guide</li> <li>ML Models - Machine learning integration</li> <li>Security - Security features and policies</li> </ul>"},{"location":"#reference","title":"Reference","text":"<p>Additional reference materials:</p> <ul> <li>Changelog - Version history</li> <li>Security Policy - Vulnerability reporting</li> <li>Code of Conduct - Community guidelines</li> <li>ML ONNX Guide - ONNX model usage</li> <li>Seccomp - Sandboxing configuration</li> </ul>"},{"location":"#key-features","title":"\u2728 Key Features","text":"<ul> <li>JWT Authentication: Secure token-based authentication with RBAC and Redis-based token revocation</li> <li>Observability: Comprehensive Prometheus metrics, distributed tracing, and structured logging</li> <li>Performance Monitoring: Extensive benchmark suite for HTML parsing, KG operations, and ML inference</li> <li>HTML5 Parsing: Extract semantic elements like microdata and JSON-LD</li> <li>Knowledge Graph: Build and query RDF graphs with SPARQL</li> <li>Browser Automation: Headless browsing with chromiumoxide</li> <li>MCP Protocol: Full Model Context Protocol server for AI agent integration</li> <li>ML Integration: ONNX models for NER and knowledge graph embeddings</li> <li>Security: Input validation, rate limiting, audit logging, seccomp sandboxing</li> </ul>"},{"location":"#architecture-overview","title":"\ud83c\udfd7\ufe0f Architecture Overview","text":"<p>The Semantic Browser consists of several key modules:</p> <ul> <li><code>auth</code>: JWT authentication and authorization system</li> <li><code>parser</code>: HTML parsing and semantic extraction</li> <li><code>annotator</code>: ML-based entity recognition and RDF conversion</li> <li><code>kg</code>: Knowledge graph management with SPARQL support</li> <li><code>kg_integration</code>: Knowledge graph population and inference</li> <li><code>browser</code>: Headless browser automation with chromiumoxide</li> <li><code>external</code>: External tool integrations and workflow orchestration</li> <li><code>api</code>: REST API server with rate limiting</li> <li><code>security</code>: Input validation, audit logging, and sandboxing</li> <li><code>ml</code>: ONNX model inference for embeddings and NER</li> <li><code>observability</code>: Metrics and monitoring (optional)</li> </ul>"},{"location":"#api-overview","title":"\ud83d\udcd6 API Overview","text":"<p>REST API with JWT authentication, rate limiting, and observability:</p> <ul> <li><code>POST /auth/token</code>: Generate JWT authentication tokens</li> <li><code>POST /auth/revoke</code>: Revoke JWT tokens using Redis (requires admin role)</li> <li><code>POST /parse</code>: Parse HTML and extract semantic data</li> <li><code>POST /query</code>: Query/update Knowledge Graph with SPARQL</li> <li><code>POST /browse</code>: Browse URL and extract semantic information</li> <li><code>POST /browse_kg</code>: Browse URL and automatically insert into Knowledge Graph</li> <li><code>GET /kg/entities</code>: List all entities in the Knowledge Graph</li> <li><code>GET /kg/relations</code>: List all relations in the Knowledge Graph</li> <li><code>GET /metrics</code>: Expose Prometheus metrics for monitoring (optional)</li> </ul>"},{"location":"#quick-docker-start","title":"\ud83d\udc33 Quick Docker Start","text":"<pre><code># Copy config and start server\ncp .env.example .env\n./docker/scripts/docker-up.sh --build -d\n\n# Test with examples\n./docs/user-guide/examples/parse_html.sh\n./docs/user-guide/examples/query_kg.sh\n</code></pre>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions! See our Contributing Guide for details.</p>"},{"location":"#support","title":"\ud83d\udcde Support","text":"<ul> <li>Issues: GitHub Issues</li> <li>Discussions: GitHub Discussions</li> <li>Documentation: This documentation site</li> </ul>"},{"location":"api/","title":"API Documentation","text":"<p>The Semantic Browser provides a REST API for semantic web operations. All endpoints require JWT authentication and are rate-limited.</p>"},{"location":"api/#authentication","title":"Authentication","text":"<p>All API requests must include the <code>Authorization</code> header with a valid JWT token:</p> <pre><code>Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\n</code></pre>"},{"location":"api/#token-generation","title":"Token Generation","text":"<p>First, generate a JWT token using the authentication endpoint:</p> <pre><code>curl -X POST http://localhost:3000/auth/token \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\": \"my-user\", \"role\": \"user\"}'\n</code></pre> <p>Response: <pre><code>{\n  \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\",\n  \"expires_in\": 86400\n}\n</code></pre></p> <p>\u26a0\ufe0f Security Warning: JWT_SECRET must be configured in <code>.env</code> for production use. The default is insecure!</p>"},{"location":"api/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Limit: 10 requests per minute per IP address</li> <li>Headers Considered: <code>X-Forwarded-For</code>, <code>X-Real-IP</code> (for proxy support)</li> <li>Response: Returns error message when limit exceeded</li> </ul>"},{"location":"api/#endpoints","title":"Endpoints","text":""},{"location":"api/#post-authtoken","title":"POST <code>/auth/token</code>","text":"<p>Generate a JWT authentication token.</p> <p>Request Body: <pre><code>{\n  \"username\": \"my-user\",\n  \"role\": \"user\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\",\n  \"expires_in\": 86400\n}\n</code></pre></p> <p>Status Codes: - <code>200</code>: Success - <code>500</code>: Token generation failed</p>"},{"location":"api/#post-parse","title":"POST <code>/parse</code>","text":"<p>Parse HTML content and extract semantic data.</p> <p>Request Body: <pre><code>{\n  \"html\": \"&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;...&lt;/body&gt;&lt;/html&gt;\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"title\": \"Test\",\n  \"entities\": [\"schema:Article\", \"schema:Person\"]\n}\n</code></pre></p> <p>Status Codes: - <code>200</code>: Success - <code>401</code>: Unauthorized - <code>429</code>: Rate limit exceeded - <code>400</code>: Invalid input</p>"},{"location":"api/#post-query","title":"POST <code>/query</code>","text":"<p>Query or update the Knowledge Graph using SPARQL.</p> <p>Request Body: <pre><code>{\n  \"query\": \"SELECT ?s ?p ?o WHERE { ?s ?p ?o } LIMIT 10\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"results\": [\"result1\", \"result2\", \"...\"]\n}\n</code></pre></p> <p>Supported Operations: - <code>SELECT</code> - Query data - <code>INSERT</code> - Add triples - <code>DELETE</code> - Remove triples - <code>CONSTRUCT</code> - Transform results - <code>ASK</code> - Boolean queries - <code>DESCRIBE</code> - Describe resources</p> <p>Status Codes: - <code>200</code>: Success - <code>401</code>: Unauthorized - <code>429</code>: Rate limit exceeded - <code>400</code>: Invalid SPARQL query</p>"},{"location":"api/#post-browse","title":"POST <code>/browse</code>","text":"<p>Browse a URL and extract semantic information using external tools.</p> <p>Request Body: <pre><code>{\n  \"url\": \"https://example.com\",\n  \"query\": \"Extract main article content\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"data\": \"Extracted content from the webpage...\"\n}\n</code></pre></p> <p>Features: - Headless browser automation with chromiumoxide - JavaScript execution and dynamic content support - Resource blocking (ads, trackers, images) - Semantic data extraction (microdata, JSON-LD, Open Graph) - Automatic fallback to HTTP if browser fails</p> <p>Status Codes: - <code>200</code>: Success - <code>401</code>: Unauthorized - <code>429</code>: Rate limit exceeded - <code>400</code>: Invalid URL</p>"},{"location":"api/#post-browse_kg","title":"POST <code>/browse_kg</code>","text":"<p>Browse a URL, extract semantic information, and automatically insert into the Knowledge Graph.</p> <p>Request Body: <pre><code>{\n  \"url\": \"https://example.com\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"data\": \"Browsed https://example.com and inserted into KG...\",\n  \"triples_inserted\": 15,\n  \"final_url\": \"https://example.com\",\n  \"snapshot\": {\n    \"title\": \"Example Domain\",\n    \"description\": \"...\",\n    \"json_ld_count\": 2,\n    \"microdata\": [...]\n  }\n}\n</code></pre></p> <p>Features: - Same browsing capabilities as <code>/browse</code> - Automatic RDF triple extraction and insertion - Returns count of triples inserted - Enables immediate SPARQL queries on browsed content</p> <p>Status Codes: - <code>200</code>: Success - <code>401</code>: Unauthorized - <code>429</code>: Rate limit exceeded - <code>400</code>: Invalid URL</p>"},{"location":"api/#get-kgentities","title":"GET <code>/kg/entities</code>","text":"<p>List all entities currently in the Knowledge Graph.</p> <p>Response: <pre><code>{\n  \"items\": [\n    \"https://schema.org/WebPage\",\n    \"https://example.com\",\n    \"https://schema.org/Person\"\n  ]\n}\n</code></pre></p> <p>Status Codes: - <code>200</code>: Success - <code>401</code>: Unauthorized - <code>429</code>: Rate limit exceeded</p>"},{"location":"api/#get-kgrelations","title":"GET <code>/kg/relations</code>","text":"<p>List all relations currently in the Knowledge Graph.</p> <p>Response: <pre><code>{\n  \"items\": [\n    \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\",\n    \"https://schema.org/name\",\n    \"https://schema.org/url\"\n  ]\n}\n</code></pre></p> <p>Status Codes: - <code>200</code>: Success - <code>401</code>: Unauthorized - <code>429</code>: Rate limit exceeded</p>"},{"location":"api/#post-authrevoke","title":"POST <code>/auth/revoke</code>","text":"<p>Revoke a JWT token immediately (requires Redis integration).</p> <p>Request Body: <pre><code>{\n  \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"message\": \"Token revoked successfully\"\n}\n</code></pre></p> <p>Requirements: - <code>--features redis-integration</code> - <code>REDIS_URL</code> configured</p> <p>Status Codes: - <code>200</code>: Success - <code>400</code>: Invalid token format - <code>401</code>: Unauthorized - <code>500</code>: Redis connection failed</p>"},{"location":"api/#get-metrics","title":"GET <code>/metrics</code>","text":"<p>Expose Prometheus-compatible metrics for monitoring.</p> <p>Response: <pre><code># HELP semantic_browser_http_requests_total Total HTTP requests\n# TYPE semantic_browser_http_requests_total counter\nsemantic_browser_http_requests_total{endpoint=\"/parse\",method=\"POST\",status=\"200\"} 42\n\n# HELP semantic_browser_http_request_duration_seconds HTTP request duration\n# TYPE semantic_browser_http_request_duration_seconds histogram\n...\n</code></pre></p> <p>Requirements: - <code>--features observability</code> - <code>PROMETHEUS_METRICS=true</code></p> <p>Status Codes: - <code>200</code>: Success - <code>404</code>: Metrics not enabled</p>"},{"location":"api/#post-langgraph","title":"POST <code>/langgraph</code>","text":"<p>Execute a LangGraph workflow for complex multi-step operations using a custom StateGraph implementation.</p> <p>Request Body: <pre><code>{\n  \"graph_definition\": {\n    \"entry_point\": \"start\",\n    \"edges\": {\n      \"start\": \"browse\",\n      \"browse\": \"extract\",\n      \"extract\": \"query\"\n    },\n    \"conditional_edges\": {\n      \"extract\": {\n        \"type\": \"has_data\"\n      }\n    }\n  },\n  \"input\": \"initial input data\"\n}\n</code></pre></p> <p>Graph Definition Schema: - <code>entry_point</code>: Starting node name (default: \"start\") - <code>edges</code>: Object mapping from-node to to-node for linear flow - <code>conditional_edges</code>: Object mapping nodes to conditional routing logic</p> <p>Conditional Edge Types: - <code>has_data</code>: Routes to \"query\" if extract_result exists, otherwise to \"end\"</p> <p>Built-in Nodes: - <code>browse</code>: Browses a URL and extracts semantic data - <code>extract</code>: Extracts entities from semantic data using annotator - <code>query</code>: Executes SPARQL queries against the Knowledge Graph</p> <p>Response: <pre><code>{\n  \"result\": \"Workflow completed. Final step: query\\nbrowse_result: Browsed https://example.com...\\nextract_result: Extracted 5 entities...\\nquery_result: Query returned 3 results...\"\n}\n</code></pre></p> <p>Features: - Custom StateGraph with nodes, edges, and conditional routing - Built-in nodes for browse, extract, and query operations - State persistence across workflow steps - Error recovery and logging - Integration with Knowledge Graph and browser automation</p> <p>Status Codes: - <code>200</code>: Success - <code>400</code>: Invalid workflow definition - <code>401</code>: Unauthorized - <code>500</code>: Workflow execution failed</p>"},{"location":"api/#error-handling","title":"Error Handling","text":"<p>All endpoints return consistent error responses:</p> <pre><code>{\n  \"title\": null,\n  \"entities\": [\"Error message\"]\n}\n</code></pre>"},{"location":"api/#data-models","title":"Data Models","text":""},{"location":"api/#parserequest","title":"ParseRequest","text":"<pre><code>struct ParseRequest {\n    html: String,\n}\n</code></pre>"},{"location":"api/#parseresponse","title":"ParseResponse","text":"<pre><code>struct ParseResponse {\n    title: Option&lt;String&gt;,\n    entities: Vec&lt;String&gt;,\n}\n</code></pre>"},{"location":"api/#queryrequest","title":"QueryRequest","text":"<pre><code>struct QueryRequest {\n    query: String,\n}\n</code></pre>"},{"location":"api/#queryresponse","title":"QueryResponse","text":"<pre><code>struct QueryResponse {\n    results: Vec&lt;String&gt;,\n}\n</code></pre>"},{"location":"api/#browserequest","title":"BrowseRequest","text":"<pre><code>struct BrowseRequest {\n    url: String,\n    query: String,\n}\n</code></pre>"},{"location":"api/#browseresponse","title":"BrowseResponse","text":"<pre><code>struct BrowseResponse {\n    data: String,\n    snapshot: Option&lt;SemanticSnapshot&gt;,\n}\n</code></pre> <p><code>data</code> contains the legacy plain-text summary for backward compatibility. When semantic extraction succeeds, <code>snapshot</code> provides a structured view of the page that downstream clients and the knowledge graph can ingest directly.</p>"},{"location":"api/#semanticsnapshot","title":"SemanticSnapshot","text":"<p>// Requires <code>use std::collections::HashMap;</code> <pre><code>struct SemanticSnapshot {\n    title: Option&lt;String&gt;,\n    description: Option&lt;String&gt;,\n    language: Option&lt;String&gt;,\n    canonical_url: Option&lt;String&gt;,\n    final_url: String,\n    keywords: Vec&lt;String&gt;,\n    open_graph: HashMap&lt;String, String&gt;,\n    twitter_card: HashMap&lt;String, String&gt;,\n    json_ld_count: usize,\n    microdata: Vec&lt;MicrodataSummary&gt;,\n    text_preview: String,\n    text_length: usize,\n    query_matches: Vec&lt;QueryMatch&gt;,\n}\n</code></pre></p>"},{"location":"api/#microdatasummary","title":"MicrodataSummary","text":"<pre><code>struct MicrodataSummary {\n    item_type: String,\n    properties: usize,\n}\n</code></pre>"},{"location":"api/#querymatch","title":"QueryMatch","text":"<pre><code>struct QueryMatch {\n    excerpt: String,\n    element: String,\n    score: f32,\n}\n</code></pre>"},{"location":"api/#browsekgresponse","title":"BrowseKGResponse","text":"<pre><code>struct BrowseKGResponse {\n    data: String,\n    triples_inserted: usize,\n    final_url: String,\n    snapshot: Option&lt;SemanticSnapshot&gt;,\n}\n</code></pre>"},{"location":"api/#metrics-and-monitoring","title":"Metrics and Monitoring","text":"<p>The Semantic Browser provides Prometheus-compatible metrics for monitoring and observability.</p>"},{"location":"api/#setup","title":"Setup","text":"<ol> <li> <p>Enable Metrics:    <pre><code>cargo build --features observability\n</code></pre></p> </li> <li> <p>Configure Metrics:    <pre><code># Add to .env\nPROMETHEUS_METRICS=true\nMETRICS_PORT=9090\n</code></pre></p> </li> <li> <p>Access Metrics:    <pre><code>curl http://localhost:9090/metrics\n</code></pre></p> </li> </ol>"},{"location":"api/#available-metrics","title":"Available Metrics","text":""},{"location":"api/#http-request-metrics","title":"HTTP Request Metrics","text":"<ul> <li><code>semantic_browser_http_requests_total</code> - Total HTTP requests by endpoint, method, and status</li> <li><code>semantic_browser_http_request_duration_seconds</code> - Request duration histogram</li> </ul>"},{"location":"api/#knowledge-graph-metrics","title":"Knowledge Graph Metrics","text":"<ul> <li><code>semantic_browser_kg_operations_total</code> - KG operations (insert, query, delete)</li> <li><code>semantic_browser_kg_operation_duration_seconds</code> - Operation duration</li> <li><code>semantic_browser_kg_size</code> - Current KG size by graph type</li> </ul>"},{"location":"api/#browser-automation-metrics","title":"Browser Automation Metrics","text":"<ul> <li><code>semantic_browser_browser_operations_total</code> - Browser operations by result</li> <li><code>semantic_browser_browser_operation_duration_seconds</code> - Operation duration</li> </ul>"},{"location":"api/#ml-inference-metrics","title":"ML Inference Metrics","text":"<ul> <li><code>semantic_browser_ml_inference_total</code> - ML inference operations by model type</li> <li><code>semantic_browser_ml_inference_duration_seconds</code> - Inference duration with confidence</li> </ul>"},{"location":"api/#parse-operations","title":"Parse Operations","text":"<ul> <li><code>semantic_browser_parse_operations_total</code> - Parse operations by content type and result</li> <li><code>semantic_browser_parse_operation_duration_seconds</code> - Parse duration</li> </ul>"},{"location":"api/#system-metrics","title":"System Metrics","text":"<ul> <li><code>semantic_browser_active_connections</code> - Active connections by type</li> <li><code>semantic_browser_uptime_seconds</code> - Server uptime</li> </ul>"},{"location":"api/#example-prometheus-configuration","title":"Example Prometheus Configuration","text":"<pre><code>scrape_configs:\n  - job_name: 'semantic-browser'\n    static_configs:\n      - targets: ['localhost:9090']\n    scrape_interval: 15s\n</code></pre>"},{"location":"api/#example-grafana-dashboard","title":"Example Grafana Dashboard","text":"<p>Metrics can be visualized in Grafana with panels for: - Request rate and latency - Error rates by endpoint - KG growth over time - ML inference performance - Browser operation success rates</p>"},{"location":"api/#configuration","title":"Configuration","text":"<p>API behavior can be configured via environment variables:</p> <ul> <li><code>JWT_SECRET</code>: JWT signing secret (REQUIRED for production)</li> <li><code>RATE_LIMIT_REQUESTS</code>: Max requests per minute per IP (default: 10)</li> <li><code>RATE_LIMIT_WINDOW_SECONDS</code>: Rate limit window in seconds (default: 60)</li> <li><code>SECURITY_STRICT_MODE</code>: Enable strict input validation (default: false)</li> <li><code>MAX_HTML_SIZE</code>: Maximum HTML input size in bytes (default: 10MB)</li> <li><code>MAX_QUERY_LENGTH</code>: Maximum SPARQL query length (default: 10KB)</li> <li><code>PROMETHEUS_METRICS</code>: Enable Prometheus metrics endpoint (default: false)</li> <li><code>METRICS_PORT</code>: Port for metrics endpoint (default: 9090)</li> </ul>"},{"location":"api/#examples","title":"Examples","text":"<p>See the <code>docs/examples/</code> directory for complete API usage examples:</p>"},{"location":"api/#core-api-examples","title":"Core API Examples","text":"<ul> <li><code>parse_html.sh</code> - HTML parsing and semantic extraction</li> <li><code>query_kg.sh</code> - Knowledge Graph SPARQL queries</li> <li><code>browse_url.sh</code> - URL browsing with semantic extraction</li> </ul>"},{"location":"api/#comprehensive-workflows","title":"Comprehensive Workflows","text":"<ul> <li><code>ner-bert-workflow.sh</code> - ML-based named entity recognition</li> <li><code>kg-ml-inference.sh</code> - Knowledge graph inference with embeddings</li> <li><code>browser-workflow.sh</code> - Complete browser automation workflow</li> <li><code>mcp-client-integration.sh</code> - MCP protocol client integration</li> </ul>"},{"location":"api/#mcp-protocol-server","title":"MCP Protocol Server","text":"<p>The Semantic Browser provides an MCP (Model Context Protocol) server binary for integration with MCP-compatible clients like Claude Desktop.</p>"},{"location":"api/#running-the-mcp-server","title":"Running the MCP Server","text":"<pre><code>cargo run --bin semantic_browser_mcp\n</code></pre> <p>The server communicates via JSON-RPC 2.0 over stdin/stdout.</p>"},{"location":"api/#mcp-protocol-details","title":"MCP Protocol Details","text":"<p>Protocol Version: 2025-06-18 Server Name: semantic-browser-mcp Capabilities: - Tools: listChanged=false (static tool list)</p>"},{"location":"api/#mcp-messages","title":"MCP Messages","text":""},{"location":"api/#initialize","title":"Initialize","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"initialize\",\n  \"params\": {\n    \"protocolVersion\": \"2025-06-18\",\n    \"clientInfo\": {\n      \"name\": \"claude-desktop\",\n      \"version\": \"1.0.0\"\n    }\n  }\n}\n</code></pre> <p>Response: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"protocolVersion\": \"2025-06--18\",\n    \"capabilities\": {\n      \"tools\": {\n        \"listChanged\": false\n      }\n    },\n    \"serverInfo\": {\n      \"name\": \"semantic-browser-mcp\",\n      \"title\": \"Semantic Browser MCP\",\n      \"version\": \"0.1.0\"\n    },\n    \"instructions\": \"Provides HTML parsing, knowledge graph querying, and browsing tools backed by the Semantic Browser.\"\n  }\n}\n</code></pre></p>"},{"location":"api/#list-tools","title":"List Tools","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"tools/list\",\n  \"params\": {}\n}\n</code></pre> <p>Response: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"result\": {\n    \"tools\": [\n      {\n        \"name\": \"semanticbrowser.parse_html\",\n        \"description\": \"Parse HTML content and extract semantic annotations.\",\n        \"inputSchema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"html\": {\n              \"type\": \"string\",\n              \"description\": \"Raw HTML content to parse.\"\n            }\n          },\n          \"required\": [\"html\"]\n        }\n      },\n      {\n        \"name\": \"semanticbrowser.query_kg\",\n        \"description\": \"Execute read or write operations against the Semantic Browser knowledge graph.\",\n        \"inputSchema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"query\": {\n              \"type\": \"string\",\n              \"description\": \"SPARQL query or update statement.\"\n            }\n          },\n          \"required\": [\"query\"]\n        }\n      },\n      {\n        \"name\": \"semanticbrowser.browse_url\",\n        \"description\": \"Fetch a URL and summarize semantic signals relevant to a query.\",\n        \"inputSchema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"url\": {\n              \"type\": \"string\",\n              \"format\": \"uri\",\n              \"description\": \"Target URL to browse.\"\n            },\n            \"query\": {\n              \"type\": \"string\",\n              \"description\": \"Optional focus or extraction instruction.\",\n              \"default\": \"\"\n            }\n          },\n          \"required\": [\"url\"]\n        }\n      }\n    ]\n  }\n}\n</code></pre></p>"},{"location":"api/#call-tool","title":"Call Tool","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"semanticbrowser.browse_url\",\n    \"arguments\": {\n      \"url\": \"https://example.com\",\n      \"query\": \"Extract main content\"\n    }\n  }\n}\n</code></pre> <p>Response: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"Browsed https://example.com. Summary length: 1234 characters.\"\n      }\n    ],\n    \"structuredContent\": {\n      \"url\": \"https://example.com\",\n      \"query\": \"Extract main content\",\n      \"summary\": \"...\",\n      \"snapshot\": {...}\n    }\n  }\n}\n</code></pre></p>"},{"location":"api/#mcp-tools","title":"MCP Tools","text":""},{"location":"api/#semanticbrowserparse_html","title":"semanticbrowser.parse_html","text":"<p>Parses HTML content and extracts semantic annotations including microdata and JSON-LD.</p>"},{"location":"api/#semanticbrowserquery_kg","title":"semanticbrowser.query_kg","text":"<p>Executes SPARQL queries or updates against the Knowledge Graph.</p>"},{"location":"api/#semanticbrowserbrowse_url","title":"semanticbrowser.browse_url","text":"<p>Browses a URL and extracts semantic information, automatically inserting into the Knowledge Graph.</p>"},{"location":"api/#configuration_1","title":"Configuration","text":"<p>The MCP server uses the same environment variables as the main API server. Set <code>KG_PERSIST_PATH</code> for persistent Knowledge Graph storage.</p>"},{"location":"developer-guide/architecture/","title":"Architecture Overview","text":"<p>This document provides a high-level overview of the Semantic Browser architecture, design decisions, and system components.</p>"},{"location":"developer-guide/architecture/#system-overview","title":"System Overview","text":"<p>The Semantic Browser is a Rust-based semantic web agent designed to extract, process, and query semantic information from web content. It combines HTML parsing, natural language processing, and knowledge graph technologies to provide intelligent web content analysis.</p>"},{"location":"developer-guide/architecture/#core-architecture","title":"Core Architecture","text":""},{"location":"developer-guide/architecture/#component-diagram","title":"Component Diagram","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Web Content   \u2502\u2500\u2500\u2500\u25b6\u2502   HTML Parser   \u2502\u2500\u2500\u2500\u25b6\u2502  Entity Extract \u2502\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                                        \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510             \u2502\n\u2502  External Tools \u2502\u2500\u2500\u2500\u25b6\u2502 Browser         \u2502\u25c0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502                 \u2502    \u2502 Automation      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                       \u2502\n         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                 \u25bc                             \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502 Knowledge Graph \u2502            \u2502   REST API      \u2502\n                    \u2502                 \u2502            \u2502                 \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518            \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"developer-guide/architecture/#key-components","title":"Key Components","text":""},{"location":"developer-guide/architecture/#1-html-parser-srcparserrs","title":"1. HTML Parser (<code>src/parser.rs</code>)","text":"<p>Purpose: Parse HTML content and extract semantic information.</p> <p>Key Features: - HTML5 parsing with semantic element extraction - Microdata and JSON-LD structured data extraction - Title and metadata extraction</p> <p>Dependencies: <code>html5ever</code>, <code>scraper</code></p>"},{"location":"developer-guide/architecture/#2-entity-annotator-srcannotatorrs","title":"2. Entity Annotator (<code>src/annotator.rs</code>)","text":"<p>Purpose: Identify and classify named entities in text.</p> <p>Key Features: - Named Entity Recognition (NER) - ML-based entity classification - Fallback to regex-based extraction</p> <p>Dependencies: <code>tract-core</code> (optional)</p>"},{"location":"developer-guide/architecture/#3-knowledge-graph-srckgrs","title":"3. Knowledge Graph (<code>src/kg.rs</code>)","text":"<p>Purpose: Store and query semantic relationships.</p> <p>Key Features: - RDF triple storage - SPARQL query support - Optional persistence to disk - Inference capabilities</p> <p>Dependencies: <code>oxigraph</code></p>"},{"location":"developer-guide/architecture/#4-rest-api-srcapirs","title":"4. REST API (<code>src/api.rs</code>)","text":"<p>Purpose: Provide HTTP interface for client applications.</p> <p>Key Features: - RESTful endpoints for parsing, querying, and browsing - Authentication and rate limiting - Real IP detection for proxy support - Comprehensive error handling</p> <p>Dependencies: <code>axum</code>, <code>tokio</code></p>"},{"location":"developer-guide/architecture/#5-external-integrations-srcexternalrs","title":"5. External Integrations (<code>src/external.rs</code>)","text":"<p>Purpose: Interface with external tools and services.</p> <p>Key Features: - Browser automation integration - Python interoperability (PyO3) - LangGraph workflow support</p> <p>Dependencies: <code>pyo3</code> (optional)</p>"},{"location":"developer-guide/architecture/#6-security-srcsecurityrs","title":"6. Security (<code>src/security.rs</code>)","text":"<p>Purpose: Provide security utilities and validation.</p> <p>Key Features: - Input validation and sanitization - HTML and SPARQL query validation - Security event logging - Optional seccomp sandboxing</p>"},{"location":"developer-guide/architecture/#data-flow","title":"Data Flow","text":"<ol> <li>Content Ingestion: HTML content is received via API or file input</li> <li>Parsing: HTML is parsed to extract structured data and text content</li> <li>Entity Recognition: Text is analyzed for named entities and semantic relationships</li> <li>Knowledge Graph: Extracted information is stored as RDF triples</li> <li>Query Processing: SPARQL queries retrieve and manipulate stored knowledge</li> <li>External Integration: Browser automation provides additional context when needed</li> </ol>"},{"location":"developer-guide/architecture/#design-decisions","title":"Design Decisions","text":""},{"location":"developer-guide/architecture/#why-rust","title":"Why Rust?","text":"<ul> <li>Performance: Critical for real-time web content processing</li> <li>Memory Safety: Prevents common security vulnerabilities</li> <li>Concurrency: Efficient handling of multiple requests</li> <li>Ecosystem: Rich crate ecosystem for web technologies</li> </ul>"},{"location":"developer-guide/architecture/#why-rdfsparql","title":"Why RDF/SPARQL?","text":"<ul> <li>Standards-Based: W3C standards for semantic web</li> <li>Interoperability: Compatible with other semantic web tools</li> <li>Query Power: Expressive query language for complex relationships</li> <li>Extensibility: Schema-less design allows flexible data models</li> </ul>"},{"location":"developer-guide/architecture/#why-axum-for-http","title":"Why Axum for HTTP?","text":"<ul> <li>Async-Native: Built on Tokio for high performance</li> <li>Type Safety: Compile-time guarantees for HTTP handling</li> <li>Modular: Composable middleware and routing</li> <li>Ecosystem: Growing ecosystem of axum-based tools</li> </ul>"},{"location":"developer-guide/architecture/#performance-considerations","title":"Performance Considerations","text":""},{"location":"developer-guide/architecture/#memory-management","title":"Memory Management","text":"<ul> <li>Streaming parsing for large HTML documents</li> <li>Efficient RDF triple storage with indexing</li> <li>Connection pooling for external services</li> </ul>"},{"location":"developer-guide/architecture/#concurrency","title":"Concurrency","text":"<ul> <li>Async/await throughout the stack</li> <li>Non-blocking I/O operations</li> <li>Configurable thread pools</li> </ul>"},{"location":"developer-guide/architecture/#caching","title":"Caching","text":"<ul> <li>Optional KG persistence to disk</li> <li>In-memory caching for frequent queries</li> <li>Docker layer caching for builds</li> </ul>"},{"location":"developer-guide/architecture/#security-architecture","title":"Security Architecture","text":""},{"location":"developer-guide/architecture/#input-validation","title":"Input Validation","text":"<ul> <li>HTML sanitization and size limits</li> <li>SPARQL query complexity limits</li> <li>URL validation for browsing operations</li> </ul>"},{"location":"developer-guide/architecture/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<ul> <li>Bearer token authentication</li> <li>Rate limiting per IP address</li> <li>Request logging and monitoring</li> </ul>"},{"location":"developer-guide/architecture/#sandboxing","title":"Sandboxing","text":"<ul> <li>Optional seccomp system call filtering</li> <li>Container isolation via Docker</li> <li>Resource limits and timeouts</li> </ul>"},{"location":"developer-guide/architecture/#deployment-architecture","title":"Deployment Architecture","text":""},{"location":"developer-guide/architecture/#docker-based-deployment","title":"Docker-Based Deployment","text":"<ul> <li>Multi-stage builds for optimized images</li> <li>Non-root user execution</li> <li>Health checks and graceful shutdown</li> </ul>"},{"location":"developer-guide/architecture/#configuration-management","title":"Configuration Management","text":"<ul> <li>Environment-based configuration</li> <li>Validation of configuration values</li> <li>Secure credential handling</li> </ul>"},{"location":"developer-guide/architecture/#monitoring-observability","title":"Monitoring &amp; Observability","text":""},{"location":"developer-guide/architecture/#logging","title":"Logging","text":"<ul> <li>Structured logging with <code>tracing</code></li> <li>Configurable log levels</li> <li>Security event logging</li> </ul>"},{"location":"developer-guide/architecture/#metrics","title":"Metrics","text":"<ul> <li>Performance benchmarking</li> <li>Request/response metrics</li> <li>Error rate monitoring</li> </ul>"},{"location":"developer-guide/architecture/#future-architecture-considerations","title":"Future Architecture Considerations","text":""},{"location":"developer-guide/architecture/#scalability","title":"Scalability","text":"<ul> <li>Horizontal scaling with load balancing</li> <li>Database integration for larger KGs</li> <li>Caching layer for improved performance</li> </ul>"},{"location":"developer-guide/architecture/#extensibility","title":"Extensibility","text":"<ul> <li>Plugin architecture for custom parsers</li> <li>Webhook support for external integrations</li> <li>GraphQL API for complex queries</li> </ul>"},{"location":"developer-guide/architecture/#cloud-native-features","title":"Cloud-Native Features","text":"<ul> <li>Kubernetes deployment manifests</li> <li>Service mesh integration</li> <li>Distributed tracing support</li> </ul>"},{"location":"developer-guide/contributing/","title":"Contributing to Semantic Browser","text":"<p>Thank you for your interest in contributing to the Semantic Browser project! This document provides guidelines and information for contributors.</p>"},{"location":"developer-guide/contributing/#development-setup","title":"Development Setup","text":""},{"location":"developer-guide/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Rust 1.75 or later</li> <li>Docker and Docker Compose (recommended)</li> <li>Python 3.x (optional, for external integrations)</li> </ul>"},{"location":"developer-guide/contributing/#quick-start","title":"Quick Start","text":"<ol> <li> <p>Clone and setup:    <pre><code>git clone &lt;repository-url&gt;\ncd semanticbrowser\n  cp .env.example .env\n</code></pre></p> </li> <li> <p>Build and test:    <pre><code>make build\nmake test\n</code></pre></p> </li> <li> <p>Run locally:    <pre><code>make run\n</code></pre></p> </li> </ol>"},{"location":"developer-guide/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"developer-guide/contributing/#1-choose-an-issue","title":"1. Choose an Issue","text":"<ul> <li>Check GitHub Issues for open tasks</li> <li>Comment on the issue to indicate you're working on it</li> <li>Create a new branch: <code>git checkout -b feature/your-feature-name</code></li> </ul>"},{"location":"developer-guide/contributing/#2-code-changes","title":"2. Code Changes","text":"<ul> <li>Follow Rust coding standards</li> <li>Run <code>make lint</code> to check code quality</li> <li>Add tests for new functionality</li> <li>Update documentation as needed</li> </ul>"},{"location":"developer-guide/contributing/#3-testing","title":"3. Testing","text":"<pre><code># Run all tests\nmake test\n\n# Run with Docker (recommended)\nmake docker-test\n\n# Run benchmarks\nmake bench\n</code></pre>"},{"location":"developer-guide/contributing/#4-commit-guidelines","title":"4. Commit Guidelines","text":"<ul> <li>Use clear, descriptive commit messages</li> <li>Follow conventional commits format when possible:</li> <li><code>feat:</code> for new features</li> <li><code>fix:</code> for bug fixes</li> <li><code>docs:</code> for documentation</li> <li><code>test:</code> for tests</li> <li><code>refactor:</code> for code refactoring</li> </ul> <p>Example: <pre><code>feat: add support for microdata extraction\n\n- Extract microdata from HTML documents\n- Add unit tests for microdata parsing\n- Update documentation\n</code></pre></p>"},{"location":"developer-guide/contributing/#5-pull-request","title":"5. Pull Request","text":"<ul> <li>Push your branch: <code>git push origin feature/your-feature-name</code></li> <li>Create a Pull Request on GitHub</li> <li>Ensure CI checks pass</li> <li>Request review from maintainers</li> </ul>"},{"location":"developer-guide/contributing/#code-standards","title":"Code Standards","text":""},{"location":"developer-guide/contributing/#rust-guidelines","title":"Rust Guidelines","text":"<ul> <li>Use <code>rustfmt</code> for formatting: <code>cargo fmt</code></li> <li>Use <code>clippy</code> for linting: <code>cargo clippy</code></li> <li>Follow the Rust API Guidelines</li> <li>Write comprehensive documentation comments (<code>///</code>)</li> </ul>"},{"location":"developer-guide/contributing/#testing","title":"Testing","text":"<ul> <li>Write unit tests for all public functions</li> <li>Add integration tests for API endpoints</li> <li>Include benchmarks for performance-critical code</li> <li>Aim for &gt;80% test coverage</li> </ul>"},{"location":"developer-guide/contributing/#documentation","title":"Documentation","text":"<ul> <li>Update README.md for significant changes</li> <li>Add examples in <code>examples/</code> for new features</li> <li>Document public APIs with examples</li> </ul>"},{"location":"developer-guide/contributing/#project-structure","title":"Project Structure","text":"<pre><code>semanticbrowser/\n\u251c\u2500\u2500 src/                    # Source code\n\u2502   \u251c\u2500\u2500 lib.rs             # Library entry point\n\u2502   \u251c\u2500\u2500 main.rs            # Binary entry point\n\u2502   \u251c\u2500\u2500 parser.rs          # HTML parsing\n\u2502   \u251c\u2500\u2500 annotator.rs       # Entity annotation\n\u2502   \u251c\u2500\u2500 kg.rs              # Knowledge graph\n\u2502   \u251c\u2500\u2500 api.rs             # REST API\n\u2502   \u251c\u2500\u2500 security.rs        # Security utilities\n\u2502   \u2514\u2500\u2500 external.rs        # External integrations\n\u251c\u2500\u2500 tests/                 # Integration tests\n\u251c\u2500\u2500 benches/               # Performance benchmarks\n\u251c\u2500\u2500 examples/              # Usage examples\n\u251c\u2500\u2500 scripts/               # Build/deployment scripts\n\u251c\u2500\u2500 docker/                # Docker configuration\n\u2514\u2500\u2500 docs/                  # Documentation\n</code></pre>"},{"location":"developer-guide/contributing/#docker-development","title":"Docker Development","text":"<p>For consistent development environment:</p> <pre><code># Start development environment\nmake docker-up\n\n# Run tests in Docker\nmake docker-test\n\n# View logs\nmake docker-logs\n</code></pre>"},{"location":"developer-guide/contributing/#security-considerations","title":"Security Considerations","text":"<ul> <li>Validate all inputs (HTML, SPARQL queries)</li> <li>Follow secure coding practices</li> <li>Report security issues privately to maintainers</li> </ul>"},{"location":"developer-guide/contributing/#getting-help","title":"Getting Help","text":"<ul> <li>Documentation: Check <code>README.md</code>, <code>docs/user-guide/quickstart.md</code>, <code>docs/user-guide/docker-setup.md</code>, <code>docs/developer-guide/testing.md</code></li> <li>Issues: Use GitHub Issues for bugs and feature requests</li> <li>Discussions: Use GitHub Discussions for questions</li> </ul>"},{"location":"developer-guide/contributing/#license","title":"License","text":"<p>By contributing to this project, you agree that your contributions will be licensed under the same MIT License that covers the project.</p>"},{"location":"developer-guide/mcp-extension-guide/","title":"Model Context Protocol Extension Guide","text":"<p>This note summarizes best practices for packaging our Semantic Browser capabilities as an MCP extension and outlines the implementation steps we should follow, without tying the work to any specific editor or client.</p>"},{"location":"developer-guide/mcp-extension-guide/#best-practices","title":"Best Practices","text":"<ul> <li>Manifest discipline: Supply a clear manifest for the extension (ID, semver version, compatibility notes, description, maintainer contact). Align the manifest format with the target MCP client\u2019s expectations and avoid client-specific naming collisions.</li> <li>Permissive licensing: Include a permissive license (MIT or Apache-2.0) at the repository root so downstream clients can redistribute compiled artifacts without friction.</li> <li>Server lifecycle: Build the MCP server as a standalone binary or script that boots quickly, validates configuration on startup, and terminates with informative errors so clients surface actionable diagnostics.</li> <li>Tool definitions: Advertise only the tools, prompts, and resources we actually implement. Provide precise JSON schemas, minimize optional fields, document argument limits, and keep tool names self-explanatory.</li> <li>Configuration surface: Expose user-editable settings (API tokens, base URLs, feature flags) via environment variables or configuration files. Never hardcode secrets; document required variables and reasonable defaults.</li> <li>Distribution strategy: Decide whether to ship prebuilt binaries, build from source during installation, or fetch artifacts on demand. Use checksums for downloaded assets and cache them in a predictable location.</li> <li>Logging and observability: Emit structured logs (stdout/stderr) at sensible verbosity levels, and document how to inspect them when developing or debugging.</li> <li>Security posture: Validate inbound requests, enforce timeouts, and isolate external dependencies (e.g., sandbox subprocesses or network calls) to prevent untrusted input from compromising the host.</li> <li>Testing loop: Automate smoke tests that exercise each MCP tool end-to-end. Continuously test on the major platforms we intend to support (macOS, Linux, Windows).</li> <li>Release hygiene: Tag releases, maintain a changelog, and version-breaking changes according to semantic versioning so clients can pin to compatible builds.</li> </ul>"},{"location":"developer-guide/mcp-extension-guide/#implementation-plan","title":"Implementation Plan","text":"<ol> <li>Define extension scope </li> <li>Select the Semantic Browser workflows we want to surface (HTML parsing, knowledge graph queries, browsing).  </li> <li>Draft the MCP tool and prompt schemas that correspond to our existing APIs.</li> <li>Implement MCP server </li> <li>Add a binary (e.g., <code>src/bin/semantic_browser_mcp.rs</code>) that speaks the MCP spec and bridges to our internal logic.  </li> <li>Support configuration via CLI flags and environment variables; include health checks.</li> <li>Create extension packaging </li> <li>Provide the manifest, build scripts, and supporting assets required by target MCP clients.  </li> <li>Ensure build artifacts land in a reproducible output directory (consider <code>cargo xtask</code> helpers).</li> <li>Handle distribution assets </li> <li>Decide between embedding the MCP binary, compiling on install, or downloading from release archives.  </li> <li>Ship checksum files and verify them before execution when downloading.</li> <li>Document configuration &amp; usage </li> <li>Author README instructions covering installation, configuration snippets, environment variables, and available tools.  </li> <li>Include troubleshooting tips (log locations, common error messages).</li> <li>Testing and CI </li> <li>Add automated tests or scripts that invoke the MCP server against representative inputs.  </li> <li>Integrate checks into CI (lint, format, unit tests) to keep builds reliable across platforms.</li> <li>Publish &amp; maintain </li> <li>Prepare release notes, tag versions, and share installation guidance with partner clients.  </li> <li>Establish a maintenance cadence for dependency updates, security patches, and compatibility reviews.</li> </ol> <p>Following these steps will let us build and ship a portable MCP extension that wraps our Semantic Browser features for any compliant client.</p>"},{"location":"developer-guide/mcp-extension-guide/#current-server-entry-point","title":"Current Server Entry Point","text":"<ul> <li>Binary <code>semantic_browser_mcp</code> (<code>cargo run --bin semantic_browser_mcp</code>) exposes HTML parsing, knowledge graph queries, and browsing utilities as MCP tools over STDIN/STDOUT.</li> <li>Tools currently implemented:</li> <li><code>semanticbrowser.parse_html</code>: validates and parses raw HTML, returning semantic annotations and updating the local knowledge graph.</li> <li><code>semanticbrowser.query_kg</code>: executes SPARQL queries or updates with built-in validation and summarises results.</li> <li><code>semanticbrowser.browse_url</code>: fetches a URL, produces a semantic summary plus a structured snapshot (<code>SemanticSnapshot</code>), and stores findings in the knowledge graph.</li> <li>The server announces MCP protocol version <code>2025-06-18</code>, advertises tool capabilities only, and emits structured summaries via <code>CallToolResult</code> payloads (<code>content</code> + <code>structuredContent</code>). The <code>structuredContent</code> for <code>browse_url</code> contains the <code>summary</code>, original request metadata, and a full <code>snapshot</code> (title, canonical URL, Open Graph/Twitter maps, JSON-LD/microdata counts, text preview, query matches).</li> </ul>"},{"location":"developer-guide/mcp-extension-guide/#packaging-and-distribution","title":"Packaging and Distribution","text":""},{"location":"developer-guide/mcp-extension-guide/#build-scripts","title":"Build Scripts","text":"<p>Use <code>cargo xtask</code> for automated building and packaging:</p> <pre><code># Build MCP server binary\ncargo xtask build --release --output dist\n\n# Create distribution package with checksums\ncargo xtask package --version 0.1.0 --output dist\n\n# Generate MCP manifest\ncargo xtask manifest --output mcp-manifest.json\n</code></pre>"},{"location":"developer-guide/mcp-extension-guide/#distribution-artifacts","title":"Distribution Artifacts","text":"<ul> <li>Binary: <code>semantic_browser_mcp</code> (statically linked for Linux/macOS/Windows)</li> <li>Manifest: <code>mcp-manifest.json</code> (MCP server configuration)</li> <li>Checksums: <code>SHA256SUMS</code> (integrity verification)</li> <li>Archive: <code>semantic-browser-mcp-{version}.tar.gz</code> (complete package)</li> </ul>"},{"location":"developer-guide/mcp-extension-guide/#installation-guide","title":"Installation Guide","text":""},{"location":"developer-guide/mcp-extension-guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>Rust toolchain (1.70+)</li> <li>Linux/macOS/Windows support</li> </ul>"},{"location":"developer-guide/mcp-extension-guide/#quick-install","title":"Quick Install","text":"<pre><code># Download and extract\nwget https://github.com/your-org/semantic-browser/releases/download/v0.1.0/semantic-browser-mcp-0.1.0.tar.gz\ntar -xzf semantic-browser-mcp-0.1.0.tar.gz\ncd semantic-browser-mcp-0.1.0\n\n# Verify checksums\nsha256sum -c SHA256SUMS\n\n# Make executable\nchmod +x semantic_browser_mcp\n</code></pre>"},{"location":"developer-guide/mcp-extension-guide/#build-from-source","title":"Build from Source","text":"<pre><code># Clone repository\ngit clone https://github.com/your-org/semantic-browser.git\ncd semantic-browser\n\n# Build MCP server\ncargo build --release --bin semantic_browser_mcp\n\n# Copy to desired location\ncp target/release/semantic_browser_mcp /usr/local/bin/\n</code></pre>"},{"location":"developer-guide/mcp-extension-guide/#mcp-client-configuration","title":"MCP Client Configuration","text":"<p>Add to your MCP client configuration:</p> <pre><code>{\n  \"mcpServers\": {\n    \"semantic-browser\": {\n      \"command\": \"semantic_browser_mcp\",\n      \"args\": [],\n      \"env\": {\n        \"RUST_LOG\": \"info\",\n        \"KG_PERSIST_PATH\": \"/path/to/kg/storage\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"developer-guide/mcp-extension-guide/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>RUST_LOG</code>: Logging level (default: info)</li> <li><code>KG_PERSIST_PATH</code>: Knowledge graph persistence directory</li> <li><code>JWT_SECRET</code>: Authentication secret (if enabled)</li> <li><code>NER_MODEL_PATH</code>: ONNX NER model path (optional)</li> </ul>"},{"location":"developer-guide/mcp-extension-guide/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Connection failed: Ensure binary is executable and in PATH</li> <li>Tool not found: Check MCP client configuration</li> <li>Permission denied: Run <code>chmod +x semantic_browser_mcp</code></li> <li>Logs: Set <code>RUST_LOG=debug</code> for verbose output</li> </ul>"},{"location":"developer-guide/performance-tuning/","title":"Performance Tuning Guide","text":"<p>This guide provides optimization strategies and configuration tips for maximizing the performance of the Semantic Browser.</p>"},{"location":"developer-guide/performance-tuning/#system-requirements","title":"System Requirements","text":""},{"location":"developer-guide/performance-tuning/#minimum-requirements","title":"Minimum Requirements","text":"<ul> <li>CPU: 2 cores</li> <li>RAM: 4GB</li> <li>Storage: 10GB SSD</li> <li>Network: 100Mbps</li> </ul>"},{"location":"developer-guide/performance-tuning/#recommended-for-production","title":"Recommended for Production","text":"<ul> <li>CPU: 4+ cores</li> <li>RAM: 8GB+</li> <li>Storage: 50GB+ SSD</li> <li>Network: 1Gbps</li> </ul>"},{"location":"developer-guide/performance-tuning/#configuration-tuning","title":"Configuration Tuning","text":""},{"location":"developer-guide/performance-tuning/#environment-variables","title":"Environment Variables","text":"<pre><code># Server Configuration\nexport PORT=3000\nexport WORKERS=4  # Match CPU cores\n\n# Knowledge Graph\nexport KG_PERSIST_PATH=/fast/ssd/kg\nexport KG_INFERENCE_TOP_K=50\nexport KG_INFERENCE_CONFIDENCE_THRESHOLD=0.7\n\n# Browser Automation\nexport BROWSER_POOL_SIZE=4\nexport BROWSER_TIMEOUT_SECS=30\n\n# Caching\nexport HTML_CACHE_SIZE_MB=100\nexport KG_CACHE_SIZE_MB=500\n\n# Rate Limiting\nexport RATE_LIMIT_REQUESTS_PER_MINUTE=100\nexport RATE_LIMIT_BURST_SIZE=20\n</code></pre>"},{"location":"developer-guide/performance-tuning/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"developer-guide/performance-tuning/#key-metrics","title":"Key Metrics","text":"<p>Monitor these metrics for performance optimization:</p> <ol> <li>Response Time: API endpoint latency</li> <li>Throughput: Requests per second</li> <li>Memory Usage: RSS and virtual memory</li> <li>CPU Usage: User and system time</li> <li>Disk I/O: Read/write operations for KG</li> <li>Network I/O: Bandwidth usage</li> </ol>"},{"location":"developer-guide/performance-tuning/#prometheus-metrics","title":"Prometheus Metrics","text":"<p>Enable metrics collection:</p> <pre><code>export PROMETHEUS_METRICS=true\nexport METRICS_PORT=9090\n</code></pre> <p>Key metrics to monitor: - <code>http_requests_total</code> - Request count by endpoint - <code>http_request_duration_seconds</code> - Response time percentiles - <code>semantic_browser_kg_triples_total</code> - Knowledge graph size - <code>semantic_browser_memory_usage_bytes</code> - Memory consumption - <code>semantic_browser_browser_pool_active</code> - Active browser instances</p>"},{"location":"developer-guide/performance-tuning/#optimization-strategies","title":"Optimization Strategies","text":""},{"location":"developer-guide/performance-tuning/#1-knowledge-graph-optimization","title":"1. Knowledge Graph Optimization","text":""},{"location":"developer-guide/performance-tuning/#indexing-strategy","title":"Indexing Strategy","text":"<pre><code>// Enable persistent storage for large KGs\nlet kg = KnowledgeGraph::with_persistence(path)?;\n\n// Use appropriate page size\nkg.set_page_size(4096);\n</code></pre>"},{"location":"developer-guide/performance-tuning/#query-optimization","title":"Query Optimization","text":"<ul> <li>Use LIMIT clauses in SPARQL queries</li> <li>Prefer FILTER over complex patterns</li> <li>Cache frequent queries</li> </ul>"},{"location":"developer-guide/performance-tuning/#inference-tuning","title":"Inference Tuning","text":"<pre><code># Adjust inference parameters\nexport KG_INFERENCE_TOP_K=25\nexport KG_INFERENCE_CONFIDENCE_THRESHOLD=0.8\nexport KG_INFERENCE_MAX_INSERTS=1000\n</code></pre>"},{"location":"developer-guide/performance-tuning/#2-browser-automation","title":"2. Browser Automation","text":""},{"location":"developer-guide/performance-tuning/#pool-sizing","title":"Pool Sizing","text":"<pre><code># Match pool size to concurrent requests\nexport BROWSER_POOL_SIZE=4\n\n# Adjust timeouts\nexport BROWSER_TIMEOUT_SECS=20\nexport BROWSER_NAVIGATION_TIMEOUT_SECS=15\n</code></pre>"},{"location":"developer-guide/performance-tuning/#resource-blocking","title":"Resource Blocking","text":"<p>Enable resource blocking to reduce bandwidth: <pre><code>export BROWSER_BLOCK_IMAGES=true\nexport BROWSER_BLOCK_CSS=false  # May affect rendering\nexport BROWSER_BLOCK_FONTS=true\nexport BROWSER_BLOCK_ADS=true\n</code></pre></p>"},{"location":"developer-guide/performance-tuning/#javascript-control","title":"JavaScript Control","text":"<pre><code>export BROWSER_DISABLE_JAVASCRIPT=false  # Required for dynamic content\nexport BROWSER_WAIT_FOR_IDLE=true\n</code></pre>"},{"location":"developer-guide/performance-tuning/#3-html-parsing","title":"3. HTML Parsing","text":""},{"location":"developer-guide/performance-tuning/#memory-management","title":"Memory Management","text":"<pre><code># Limit HTML size\nexport MAX_HTML_SIZE_BYTES=10485760  # 10MB\n\n# Control parsing depth\nexport MAX_DOM_DEPTH=100\n</code></pre>"},{"location":"developer-guide/performance-tuning/#caching","title":"Caching","text":"<pre><code># Enable HTML result caching\nexport HTML_CACHE_ENABLED=true\nexport HTML_CACHE_TTL_SECS=3600\nexport HTML_CACHE_SIZE_MB=200\n</code></pre>"},{"location":"developer-guide/performance-tuning/#4-machine-learning","title":"4. Machine Learning","text":""},{"location":"developer-guide/performance-tuning/#onnx-optimization","title":"ONNX Optimization","text":"<pre><code># Model optimization\nexport NER_MODEL_OPTIMIZED=true\nexport KG_MODEL_OPTIMIZED=true\n\n# Batch processing\nexport ML_BATCH_SIZE=16\nexport ML_MAX_CONCURRENT_INFERENCE=4\n</code></pre>"},{"location":"developer-guide/performance-tuning/#gpu-acceleration-future","title":"GPU Acceleration (Future)","text":"<pre><code>export ONNX_USE_GPU=true\nexport CUDA_VISIBLE_DEVICES=0\n</code></pre>"},{"location":"developer-guide/performance-tuning/#benchmarking","title":"Benchmarking","text":""},{"location":"developer-guide/performance-tuning/#built-in-benchmarks","title":"Built-in Benchmarks","text":"<p>Run performance benchmarks:</p> <pre><code># HTML parsing benchmark\ncargo bench --bench parsing_benchmark\n\n# Stress testing\ncargo test --test stress_tests --release -- --nocapture\n</code></pre>"},{"location":"developer-guide/performance-tuning/#custom-benchmarks","title":"Custom Benchmarks","text":"<p>Create custom benchmarks for your use case:</p> <pre><code>#[bench]\nfn bench_html_parsing_large(b: &amp;mut Bencher) {\n    let html = load_large_html_file();\n    b.iter(|| {\n        black_box(parse_html(&amp;html));\n    });\n}\n</code></pre>"},{"location":"developer-guide/performance-tuning/#profiling","title":"Profiling","text":"<p>Use profiling tools:</p> <pre><code># CPU profiling\ncargo flamegraph --bin semantic_browser_agent -- test_scenario\n\n# Memory profiling\nvalgrind --tool=massif target/release/semantic_browser_agent\n\n# System monitoring\nperf record -g target/release/semantic_browser_agent\nperf report\n</code></pre>"},{"location":"developer-guide/performance-tuning/#scaling-strategies","title":"Scaling Strategies","text":""},{"location":"developer-guide/performance-tuning/#vertical-scaling","title":"Vertical Scaling","text":"<ol> <li>CPU Optimization</li> <li>Increase worker threads: <code>export WORKERS=8</code></li> <li>Enable parallel processing: <code>export RAYON_NUM_THREADS=8</code></li> <li> <p>Use release builds: <code>cargo build --release</code></p> </li> <li> <p>Memory Optimization</p> </li> <li>Increase RAM for large KGs</li> <li>Use SSD storage for KG persistence</li> <li> <p>Enable memory pooling</p> </li> <li> <p>Storage Optimization</p> </li> <li>Use NVMe SSDs for KG storage</li> <li>Enable compression for large datasets</li> <li>Implement data partitioning</li> </ol>"},{"location":"developer-guide/performance-tuning/#horizontal-scaling","title":"Horizontal Scaling","text":"<ol> <li> <p>Load Balancing <pre><code>upstream semantic_browser {\n    server 127.0.0.1:3000;\n    server 127.0.0.1:3001;\n    server 127.0.0.1:3002;\n}\n</code></pre></p> </li> <li> <p>Shared Storage</p> </li> <li>Use PostgreSQL/Neo4j for shared KG</li> <li>Implement distributed caching (Redis)</li> <li> <p>Use shared file systems (NFS, Ceph)</p> </li> <li> <p>Service Mesh</p> </li> <li>Implement service discovery</li> <li>Use circuit breakers</li> <li>Enable distributed tracing</li> </ol>"},{"location":"developer-guide/performance-tuning/#database-optimization","title":"Database Optimization","text":""},{"location":"developer-guide/performance-tuning/#knowledge-graph-storage","title":"Knowledge Graph Storage","text":""},{"location":"developer-guide/performance-tuning/#oxigraph-tuning","title":"Oxigraph Tuning","text":"<pre><code>// Custom storage configuration\nlet store = Store::open_with_capacity(path, 1_000_000)?;\n\n// Enable query optimization\nstore.set_query_optimizer(true);\n</code></pre>"},{"location":"developer-guide/performance-tuning/#external-databases","title":"External Databases","text":"<p>For large-scale deployments:</p> <ul> <li>PostgreSQL: Use with SPARQL-SQL translation</li> <li>Neo4j: Native graph database</li> <li>Virtuoso: High-performance RDF store</li> </ul>"},{"location":"developer-guide/performance-tuning/#caching-strategy","title":"Caching Strategy","text":""},{"location":"developer-guide/performance-tuning/#multi-level-caching","title":"Multi-level Caching","text":"<ol> <li>In-memory cache: Fast access for hot data</li> <li>Disk cache: Persistence for warm data</li> <li>Distributed cache: Redis for cluster coordination</li> </ol>"},{"location":"developer-guide/performance-tuning/#cache-configuration","title":"Cache Configuration","text":"<pre><code>// Application-level caching\nlet cache = Cache::builder()\n    .max_capacity(1000)\n    .time_to_live(Duration::from_secs(3600))\n    .build();\n</code></pre>"},{"location":"developer-guide/performance-tuning/#network-optimization","title":"Network Optimization","text":""},{"location":"developer-guide/performance-tuning/#connection-pooling","title":"Connection Pooling","text":"<pre><code>// HTTP client configuration\nlet client = Client::builder()\n    .pool_max_idle_per_host(10)\n    .pool_idle_timeout(Duration::from_secs(90))\n    .timeout(Duration::from_secs(30))\n    .build()?;\n</code></pre>"},{"location":"developer-guide/performance-tuning/#compression","title":"Compression","text":"<p>Enable response compression: <pre><code>// Axum compression middleware\nlet app = Router::new()\n    .layer(CompressionLayer::new());\n</code></pre></p>"},{"location":"developer-guide/performance-tuning/#cdn-integration","title":"CDN Integration","text":"<p>Use CDN for static assets and cached responses.</p>"},{"location":"developer-guide/performance-tuning/#monitoring-and-alerting","title":"Monitoring and Alerting","text":""},{"location":"developer-guide/performance-tuning/#key-alerts","title":"Key Alerts","text":"<ol> <li> <p>High Latency <pre><code>http_request_duration_seconds{quantile=\"0.95\"} &gt; 5.0\n</code></pre></p> </li> <li> <p>High Error Rate <pre><code>rate(http_requests_total{status=\"500\"}[5m]) &gt; 0.05\n</code></pre></p> </li> <li> <p>Memory Usage <pre><code>semantic_browser_memory_usage_bytes &gt; 1e9\n</code></pre></p> </li> <li> <p>Disk Space <pre><code>disk_used_percent{mountpoint=\"/var/lib/semantic-browser\"} &gt; 85\n</code></pre></p> </li> </ol>"},{"location":"developer-guide/performance-tuning/#logging-optimization","title":"Logging Optimization","text":"<pre><code># Structured logging\nexport RUST_LOG=info,semantic_browser=warn\nexport LOG_FORMAT=json\n\n# Log sampling\nexport LOG_SAMPLING_RATE=0.1\n</code></pre>"},{"location":"developer-guide/performance-tuning/#troubleshooting-performance-issues","title":"Troubleshooting Performance Issues","text":""},{"location":"developer-guide/performance-tuning/#slow-api-responses","title":"Slow API Responses","text":"<ol> <li>Check KG size: Large KGs slow down queries</li> <li>Profile queries: Use EXPLAIN for SPARQL queries</li> <li>Check browser pool: Ensure sufficient browser instances</li> <li>Monitor I/O: Disk bottlenecks affect performance</li> </ol>"},{"location":"developer-guide/performance-tuning/#high-memory-usage","title":"High Memory Usage","text":"<ol> <li>KG memory mapping: Large KGs consume memory</li> <li>Browser instances: Each browser uses ~100MB</li> <li>Cache sizes: Adjust cache limits</li> <li>Memory leaks: Monitor with valgrind</li> </ol>"},{"location":"developer-guide/performance-tuning/#high-cpu-usage","title":"High CPU Usage","text":"<ol> <li>ML inference: Heavy computation</li> <li>HTML parsing: Complex DOM processing</li> <li>Concurrent requests: Too many simultaneous operations</li> <li>Garbage collection: Inefficient memory management</li> </ol>"},{"location":"developer-guide/performance-tuning/#performance-testing","title":"Performance Testing","text":""},{"location":"developer-guide/performance-tuning/#load-testing","title":"Load Testing","text":"<p>Use tools like:</p> <pre><code># Apache Bench\nab -n 1000 -c 10 http://localhost:3000/parse\n\n# Hey\nhey -n 1000 -c 10 http://localhost:3000/parse\n\n# Artillery\nartillery quick --count 100 --num 10 http://localhost:3000/parse\n</code></pre>"},{"location":"developer-guide/performance-tuning/#stress-testing","title":"Stress Testing","text":"<p>Built-in stress tests:</p> <pre><code>cargo test --test stress_tests --release -- --nocapture\n</code></pre>"},{"location":"developer-guide/performance-tuning/#capacity-planning","title":"Capacity Planning","text":"<ol> <li>Determine baseline: Measure performance with typical load</li> <li>Scale testing: Gradually increase load to find limits</li> <li>Resource monitoring: Track CPU, memory, disk, network</li> <li>Bottleneck identification: Find limiting factors</li> </ol>"},{"location":"developer-guide/performance-tuning/#best-practices","title":"Best Practices","text":""},{"location":"developer-guide/performance-tuning/#development","title":"Development","text":"<ul> <li>Use <code>--release</code> builds for performance testing</li> <li>Profile regularly during development</li> <li>Write performance tests for critical paths</li> </ul>"},{"location":"developer-guide/performance-tuning/#production","title":"Production","text":"<ul> <li>Monitor key metrics continuously</li> <li>Set up alerting for performance degradation</li> <li>Regular performance audits</li> <li>Keep dependencies updated</li> </ul>"},{"location":"developer-guide/performance-tuning/#maintenance","title":"Maintenance","text":"<ul> <li>Regular benchmark runs</li> <li>Performance regression testing</li> <li>Capacity planning reviews</li> <li>Infrastructure upgrades based on usage patterns</li> </ul>"},{"location":"developer-guide/performance-tuning/#references","title":"References","text":"<ul> <li>Rust Performance Book</li> <li>Oxigraph Performance Tuning</li> <li>ONNX Runtime Performance</li> <li>System Performance Tuning</li> </ul>"},{"location":"developer-guide/production-deployment/","title":"Production Deployment Guide","text":"<p>This guide covers deploying the Semantic Browser in production environments with security, scalability, and monitoring best practices.</p>"},{"location":"developer-guide/production-deployment/#prerequisites","title":"Prerequisites","text":"<ul> <li>Linux server (Ubuntu 20.04+ or RHEL 8+)</li> <li>Rust 1.70+</li> <li>4GB RAM minimum, 8GB recommended</li> <li>SSL certificate for HTTPS</li> </ul>"},{"location":"developer-guide/production-deployment/#building-for-production","title":"Building for Production","text":""},{"location":"developer-guide/production-deployment/#optimized-build","title":"Optimized Build","text":"<pre><code># Build with all features and optimizations\ncargo build --release --all-features\n\n# Strip debug symbols for smaller binary\nstrip target/release/semantic_browser_mcp\nstrip target/release/semantic_browser_agent\n\n# Verify binary\nfile target/release/semantic_browser_mcp\nldd target/release/semantic_browser_mcp\n</code></pre>"},{"location":"developer-guide/production-deployment/#feature-selection","title":"Feature Selection","text":"<p>Choose appropriate features for your deployment:</p> <pre><code># Minimal production build\ncargo build --release --features browser-automation,seccomp\n\n# Full-featured build\ncargo build --release --all-features\n\n# With telemetry\ncargo build --release --features browser-automation,seccomp,telemetry,observability\n</code></pre>"},{"location":"developer-guide/production-deployment/#configuration","title":"Configuration","text":""},{"location":"developer-guide/production-deployment/#environment-variables","title":"Environment Variables","text":"<p>Create <code>.env</code> file:</p> <pre><code># Server\nHOST=0.0.0.0\nPORT=3000\nWORKERS=4\n\n# Security\nJWT_SECRET=your-32-char-minimum-secret-key-here\nCORS_ORIGINS=https://yourdomain.com\n\n# Knowledge Graph\nKG_PERSIST_PATH=/var/lib/semantic-browser/kg\nKG_INFERENCE_MODEL_PATH=/opt/models/kg-model.onnx\n\n# Browser Automation\nCHROMIUMOXIDE_USER_DATA_DIR=/var/lib/semantic-browser/browser-data\n\n# Logging\nRUST_LOG=info,semantic_browser=warn,tower_http=debug\nLOG_FORMAT=json\n\n# Rate Limiting\nRATE_LIMIT_REQUESTS_PER_MINUTE=60\nRATE_LIMIT_BURST_SIZE=10\n\n# Monitoring\nPROMETHEUS_METRICS=true\nMETRICS_PORT=9090\n</code></pre>"},{"location":"developer-guide/production-deployment/#directory-structure","title":"Directory Structure","text":"<pre><code>/opt/semantic-browser/\n\u251c\u2500\u2500 bin/\n\u2502   \u251c\u2500\u2500 semantic_browser_mcp\n\u2502   \u2514\u2500\u2500 semantic_browser_agent\n\u251c\u2500\u2500 config/\n\u2502   \u251c\u2500\u2500 .env\n\u2502   \u2514\u2500\u2500 mcp-manifest.json\n\u251c\u2500\u2500 data/\n\u2502   \u251c\u2500\u2500 kg/\n\u2502   \u2514\u2500\u2500 browser-data/\n\u251c\u2500\u2500 models/\n\u2502   \u251c\u2500\u2500 ner-model.onnx\n\u2502   \u2514\u2500\u2500 kg-model.onnx\n\u2514\u2500\u2500 logs/\n</code></pre>"},{"location":"developer-guide/production-deployment/#systemd-service","title":"Systemd Service","text":""},{"location":"developer-guide/production-deployment/#mcp-server-service","title":"MCP Server Service","text":"<p>Create <code>/etc/systemd/system/semantic-browser-mcp.service</code>:</p> <pre><code>[Unit]\nDescription=Semantic Browser MCP Server\nAfter=network.target\nWants=network.target\n\n[Service]\nType=simple\nUser=semantic-browser\nGroup=semantic-browser\nWorkingDirectory=/opt/semantic-browser\nEnvironmentFile=/opt/semantic-browser/config/.env\nExecStart=/opt/semantic-browser/bin/semantic_browser_mcp\nRestart=always\nRestartSec=5\nLimitNOFILE=65536\n\n# Security hardening\nNoNewPrivileges=yes\nPrivateTmp=yes\nProtectHome=yes\nProtectSystem=strict\nReadWritePaths=/opt/semantic-browser/data /var/log/semantic-browser\nProtectKernelTunables=yes\nProtectControlGroups=yes\n\n# Resource limits\nMemoryLimit=1G\nCPUQuota=200%\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"developer-guide/production-deployment/#api-server-service","title":"API Server Service","text":"<p>Create <code>/etc/systemd/system/semantic-browser-api.service</code>:</p> <pre><code>[Unit]\nDescription=Semantic Browser API Server\nAfter=network.target semantic-browser-mcp.service\nWants=network.target\n\n[Service]\nType=simple\nUser=semantic-browser\nGroup=semantic-browser\nWorkingDirectory=/opt/semantic-browser\nEnvironmentFile=/opt/semantic-browser/config/.env\nExecStart=/opt/semantic-browser/bin/semantic_browser_agent\nRestart=always\nRestartSec=5\nLimitNOFILE=65536\n\n# Security\nNoNewPrivileges=yes\nPrivateTmp=yes\nProtectHome=yes\nProtectSystem=strict\nReadWritePaths=/opt/semantic-browser/data /tmp\nProtectKernelTunables=yes\nProtectControlGroups=yes\n\n# Resources\nMemoryLimit=2G\nCPUQuota=400%\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"developer-guide/production-deployment/#service-management","title":"Service Management","text":"<pre><code># Reload systemd\nsudo systemctl daemon-reload\n\n# Enable services\nsudo systemctl enable semantic-browser-mcp\nsudo systemctl enable semantic-browser-api\n\n# Start services\nsudo systemctl start semantic-browser-mcp\nsudo systemctl start semantic-browser-api\n\n# Check status\nsudo systemctl status semantic-browser-*\n\n# View logs\nsudo journalctl -u semantic-browser-mcp -f\nsudo journalctl -u semantic-browser-api -f\n</code></pre>"},{"location":"developer-guide/production-deployment/#docker-deployment","title":"Docker Deployment","text":""},{"location":"developer-guide/production-deployment/#dockerfile","title":"Dockerfile","text":"<pre><code>FROM rust:1.70-slim AS builder\n\nWORKDIR /app\nCOPY . .\n\n# Build with all features\nRUN cargo build --release --all-features\n\n# Strip binaries\nRUN strip target/release/semantic_browser_mcp\nRUN strip target/release/semantic_browser_agent\n\nFROM debian:bookworm-slim\n\n# Install runtime dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    ca-certificates \\\n    chromium \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Create user\nRUN useradd --create-home --shell /bin/bash semantic-browser\n\n# Copy binaries\nCOPY --from=builder /app/target/release/semantic_browser_mcp /usr/local/bin/\nCOPY --from=builder /app/target/release/semantic_browser_agent /usr/local/bin/\n\n# Create directories\nRUN mkdir -p /app/data /app/logs &amp;&amp; \\\n    chown -R semantic-browser:semantic-browser /app\n\nUSER semantic-browser\nWORKDIR /app\n\nEXPOSE 3000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\n    CMD curl -f http://localhost:3000/health || exit 1\n\nCMD [\"semantic_browser_agent\"]\n</code></pre>"},{"location":"developer-guide/production-deployment/#docker-compose","title":"Docker Compose","text":"<pre><code>version: '3.8'\n\nservices:\n  semantic-browser:\n    build: .\n    ports:\n      - \"3000:3000\"\n      - \"9090:9090\"  # Metrics\n    environment:\n      - JWT_SECRET=${JWT_SECRET}\n      - KG_PERSIST_PATH=/app/data/kg\n      - PROMETHEUS_METRICS=true\n    volumes:\n      - ./data:/app/data\n      - ./models:/app/models:ro\n    restart: unless-stopped\n    security_opt:\n      - no-new-privileges:true\n    cap_drop:\n      - ALL\n    read_only: true\n    tmpfs:\n      - /tmp\n\n  prometheus:\n    image: prom/prometheus:latest\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro\n    command:\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.path=/prometheus'\n      - '--web.console.libraries=/etc/prometheus/console_libraries'\n      - '--web.console.templates=/etc/prometheus/consoles'\n      - '--storage.tsdb.retention.time=200h'\n      - '--web.enable-lifecycle'\n</code></pre>"},{"location":"developer-guide/production-deployment/#kubernetes-deployment","title":"Kubernetes Deployment","text":""},{"location":"developer-guide/production-deployment/#deployment-manifest","title":"Deployment Manifest","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: semantic-browser\n  labels:\n    app: semantic-browser\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: semantic-browser\n  template:\n    metadata:\n      labels:\n        app: semantic-browser\n    spec:\n      securityContext:\n        runAsNonRoot: true\n        runAsUser: 65534\n        fsGroup: 65534\n      containers:\n      - name: semantic-browser\n        image: semantic-browser:latest\n        ports:\n        - containerPort: 3000\n          name: http\n        - containerPort: 9090\n          name: metrics\n        env:\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: semantic-browser-secrets\n              key: jwt-secret\n        - name: KG_PERSIST_PATH\n          value: \"/data/kg\"\n        volumeMounts:\n        - name: data\n          mountPath: /data\n        - name: models\n          mountPath: /models\n          readOnly: true\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 3000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n        securityContext:\n          allowPrivilegeEscalation: false\n          capabilities:\n            drop:\n            - ALL\n          readOnlyRootFilesystem: true\n      volumes:\n      - name: data\n        persistentVolumeClaim:\n          claimName: semantic-browser-data\n      - name: models\n        configMap:\n          name: semantic-browser-models\n</code></pre>"},{"location":"developer-guide/production-deployment/#service-manifest","title":"Service Manifest","text":"<pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: semantic-browser\nspec:\n  selector:\n    app: semantic-browser\n  ports:\n  - name: http\n    port: 80\n    targetPort: 3000\n  - name: metrics\n    port: 9090\n    targetPort: 9090\n  type: ClusterIP\n</code></pre>"},{"location":"developer-guide/production-deployment/#ingress","title":"Ingress","text":"<pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: semantic-browser\n  annotations:\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\n    cert-manager.io/cluster-issuer: \"letsencrypt-prod\"\nspec:\n  tls:\n  - hosts:\n    - api.yourdomain.com\n    secretName: semantic-browser-tls\n  rules:\n  - host: api.yourdomain.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: semantic-browser\n            port:\n              number: 80\n</code></pre>"},{"location":"developer-guide/production-deployment/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"developer-guide/production-deployment/#prometheus-metrics","title":"Prometheus Metrics","text":"<p>Enable metrics collection:</p> <pre><code>export PROMETHEUS_METRICS=true\nexport METRICS_PORT=9090\n</code></pre>"},{"location":"developer-guide/production-deployment/#health-checks","title":"Health Checks","text":"<p>The application provides health endpoints:</p> <ul> <li><code>GET /health</code> - Basic health check</li> <li><code>GET /health/detailed</code> - Detailed health with component status</li> <li><code>GET /metrics</code> - Prometheus metrics (if enabled)</li> </ul>"},{"location":"developer-guide/production-deployment/#logging","title":"Logging","text":"<p>Configure structured logging:</p> <pre><code>export RUST_LOG=info,semantic_browser=warn\nexport LOG_FORMAT=json\n</code></pre>"},{"location":"developer-guide/production-deployment/#distributed-tracing","title":"Distributed Tracing","text":"<p>Enable OpenTelemetry tracing:</p> <pre><code>export OTEL_SERVICE_NAME=semantic-browser\nexport OTEL_TRACES_EXPORTER=otlp\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:14268/api/traces\n</code></pre>"},{"location":"developer-guide/production-deployment/#security-hardening","title":"Security Hardening","text":""},{"location":"developer-guide/production-deployment/#network-security","title":"Network Security","text":"<ul> <li>Use HTTPS with valid certificates</li> <li>Configure CORS properly</li> <li>Rate limiting enabled by default</li> <li>Input validation on all endpoints</li> </ul>"},{"location":"developer-guide/production-deployment/#secrets-management","title":"Secrets Management","text":"<ul> <li>Store JWT secrets in secure vaults (HashiCorp Vault, AWS Secrets Manager)</li> <li>Rotate secrets regularly</li> <li>Use Kubernetes secrets or Docker secrets</li> </ul>"},{"location":"developer-guide/production-deployment/#backup-and-recovery","title":"Backup and Recovery","text":"<pre><code># Backup knowledge graph\ncp -r /var/lib/semantic-browser/kg /backup/kg-$(date +%Y%m%d)\n\n# Backup configuration (without secrets)\ncp /opt/semantic-browser/config/.env /backup/config-$(date +%Y%m%d)\n</code></pre>"},{"location":"developer-guide/production-deployment/#scaling-considerations","title":"Scaling Considerations","text":""},{"location":"developer-guide/production-deployment/#horizontal-scaling","title":"Horizontal Scaling","text":"<ul> <li>Stateless design allows horizontal scaling</li> <li>Use load balancer for multiple instances</li> <li>Shared KG storage (PostgreSQL, Neo4j) for consistency</li> </ul>"},{"location":"developer-guide/production-deployment/#vertical-scaling","title":"Vertical Scaling","text":"<ul> <li>Monitor memory usage (KG can grow large)</li> <li>Adjust worker threads based on CPU cores</li> <li>Use connection pooling for external services</li> </ul>"},{"location":"developer-guide/production-deployment/#performance-tuning","title":"Performance Tuning","text":"<pre><code># Environment variables for tuning\nexport RAYON_NUM_THREADS=8  # Parallel processing\nexport KG_INFERENCE_TOP_K=50  # Limit inference results\nexport BROWSER_POOL_SIZE=4  # Concurrent browsers\n</code></pre>"},{"location":"developer-guide/production-deployment/#troubleshooting","title":"Troubleshooting","text":""},{"location":"developer-guide/production-deployment/#common-issues","title":"Common Issues","text":"<ol> <li>High Memory Usage</li> <li>Check KG size: <code>du -sh /var/lib/semantic-browser/kg</code></li> <li>Monitor with <code>htop</code> or Prometheus</li> <li> <p>Consider KG compaction</p> </li> <li> <p>Slow Responses</p> </li> <li>Check browser pool size</li> <li>Monitor external API calls</li> <li> <p>Enable query logging</p> </li> <li> <p>Connection Refused</p> </li> <li>Verify service is running: <code>systemctl status</code></li> <li>Check firewall rules</li> <li>Validate configuration</li> </ol>"},{"location":"developer-guide/production-deployment/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging temporarily:</p> <pre><code>export RUST_LOG=debug\nsystemctl restart semantic-browser-api\njournalctl -u semantic-browser-api -f\n</code></pre>"},{"location":"developer-guide/production-deployment/#backup-and-maintenance","title":"Backup and Maintenance","text":""},{"location":"developer-guide/production-deployment/#automated-backups","title":"Automated Backups","text":"<pre><code>#!/bin/bash\n# Daily backup script\nDATE=$(date +%Y%m%d)\nBACKUP_DIR=\"/backup/semantic-browser-$DATE\"\n\nmkdir -p \"$BACKUP_DIR\"\ncp -r /var/lib/semantic-browser/kg \"$BACKUP_DIR/\"\ncp /opt/semantic-browser/config/.env \"$BACKUP_DIR/\"\n\n# Compress\ntar -czf \"$BACKUP_DIR.tar.gz\" -C /backup \"semantic-browser-$DATE\"\nrm -rf \"$BACKUP_DIR\"\n\n# Upload to S3 or other storage\naws s3 cp \"$BACKUP_DIR.tar.gz\" \"s3://backups/semantic-browser/\"\n</code></pre>"},{"location":"developer-guide/production-deployment/#log-rotation","title":"Log Rotation","text":"<p>Configure logrotate:</p> <pre><code># /etc/logrotate.d/semantic-browser\n/var/log/semantic-browser/*.log {\n    daily\n    rotate 30\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0644 semantic-browser semantic-browser\n    postrotate\n        systemctl reload semantic-browser-api\n    endscript\n}\n</code></pre>"},{"location":"developer-guide/production-deployment/#references","title":"References","text":"<ul> <li>Systemd Service Documentation</li> <li>Kubernetes Best Practices</li> <li>Docker Security</li> <li>Prometheus Monitoring</li> </ul>"},{"location":"developer-guide/testing/","title":"Testing Guide - Semantic Browser","text":"<p>Complete guide for testing the Semantic Browser project.</p>"},{"location":"developer-guide/testing/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 integration_test.rs         # End-to-end integration tests\n\u2502\nsrc/\n\u251c\u2500\u2500 parser.rs                   # Unit tests: test_parse_html_basic\n\u251c\u2500\u2500 annotator.rs                # Unit tests: test_regex_entities\n\u251c\u2500\u2500 kg.rs                       # Unit tests: test_kg_insert_and_list, test_kg_query\n\u251c\u2500\u2500 api.rs                      # Unit tests: test_rate_limit_logic, test_check_auth\n\u251c\u2500\u2500 security.rs                 # Unit tests: test_sandbox_wrapper, test_html_validation\n\u2514\u2500\u2500 external.rs                 # Unit tests: test_browse_mock\n\u2502\nbenches/\n\u2514\u2500\u2500 parsing_benchmark.rs        # Performance benchmarks\n</code></pre>"},{"location":"developer-guide/testing/#running-tests","title":"Running Tests","text":""},{"location":"developer-guide/testing/#local-testing-cargo","title":"Local Testing (Cargo)","text":"<pre><code># Run all tests\ncargo test\n\n# Run with output\ncargo test -- --nocapture\n\n# Run specific test\ncargo test test_parse_html_basic\n\n# Run integration tests only\ncargo test --test integration_test\n\n# Run with specific log level\nRUST_LOG=debug cargo test\n\n# Run benchmarks\ncargo bench\n</code></pre>"},{"location":"developer-guide/testing/#docker-testing-recommended","title":"Docker Testing (Recommended)","text":"<pre><code># Complete test suite\n./docker/scripts/docker-test.sh\n\n# Quick unit tests only\n./docker/scripts/docker-test.sh --unit-only\n\n# Integration tests with server\n./docker/scripts/docker-test.sh --integration-only\n\n# Linting checks\n./docker/scripts/docker-test.sh --lint-only\n\n# Include benchmarks\n./docker/scripts/docker-test.sh --with-bench\n\n# Clean up after tests\n./docker/scripts/docker-test.sh --clean\n</code></pre>"},{"location":"developer-guide/testing/#test-coverage","title":"Test Coverage","text":""},{"location":"developer-guide/testing/#unit-tests-11-tests","title":"Unit Tests (11 tests)","text":"<p>Parser Module (src/parser.rs) - \u2705 <code>test_parse_html_basic</code>: Basic HTML parsing with title and JSON-LD</p> <p>Annotator Module (src/annotator.rs) - \u2705 <code>test_regex_entities</code>: Entity extraction from text</p> <p>Knowledge Graph Module (src/kg.rs) - \u2705 <code>test_kg_insert_and_list</code>: Triple insertion and listing - \u2705 <code>test_kg_query</code>: SPARQL query execution</p> <p>API Module (src/api.rs) - \u2705 <code>test_rate_limit_logic</code>: Rate limiting functionality - \u2705 <code>test_check_auth</code>: Authentication checking - \u2705 <code>test_extract_ip</code>: IP extraction from headers</p> <p>Security Module (src/security.rs) - \u2705 <code>test_sandbox_wrapper</code>: Sandbox function wrapper - \u2705 <code>test_html_validation</code>: HTML input validation - \u2705 <code>test_sparql_validation</code>: SPARQL query validation</p> <p>External Module (src/external.rs) - \u2705 <code>test_browse_mock</code>: URL browsing functionality</p>"},{"location":"developer-guide/testing/#integration-tests-6-tests","title":"Integration Tests (6 tests)","text":"<p>tests/integration_test.rs - \u2705 <code>test_html_parsing_integration</code>: Full HTML parsing workflow - \u2705 <code>test_entity_extraction_integration</code>: Entity extraction workflow - \u2705 <code>test_knowledge_graph_integration</code>: KG operations - \u2705 <code>test_sparql_update_integration</code>: SPARQL INSERT operations - \u2705 <code>test_security_validation</code>: Security checks - \u2705 <code>test_kg_inference</code>: ML inference workflow</p>"},{"location":"developer-guide/testing/#benchmarks-3-benchmarks","title":"Benchmarks (3 benchmarks)","text":"<p>benches/parsing_benchmark.rs - \u26a1 <code>bench_parse_html</code>: HTML parsing performance - \u26a1 <code>bench_kg_insert</code>: KG triple insertion performance - \u26a1 <code>bench_kg_query</code>: SPARQL query performance</p>"},{"location":"developer-guide/testing/#test-scenarios","title":"Test Scenarios","text":""},{"location":"developer-guide/testing/#1-html-parsing","title":"1. HTML Parsing","text":"<pre><code>#[test]\nfn test_parse_html_basic() {\n    let html = r#\"\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;title&gt;Test Page&lt;/title&gt;\n            &lt;script type=\"application/ld+json\"&gt;\n            {\"@type\": \"Person\", \"name\": \"John\"}\n            &lt;/script&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;div itemscope itemtype=\"http://schema.org/Product\"&gt;\n                &lt;span itemprop=\"name\"&gt;Widget&lt;/span&gt;\n            &lt;/div&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n    \"#;\n\n    let result = parse_html(html).unwrap();\n    assert_eq!(result.title, Some(\"Test Page\".to_string()));\n    assert_eq!(result.json_ld.len(), 1);\n    assert!(result.microdata.len() &gt; 0);\n}\n</code></pre>"},{"location":"developer-guide/testing/#2-knowledge-graph-operations","title":"2. Knowledge Graph Operations","text":"<pre><code>#[test]\nfn test_knowledge_graph_integration() {\n    let mut kg = KnowledgeGraph::new();\n\n    // Insert triple\n    kg.insert(\n        \"http://example.org/person1\",\n        \"http://xmlns.com/foaf/0.1/name\",\n        \"http://example.org/alice\"\n    ).unwrap();\n\n    // List triples\n    let triples = kg.list_triples();\n    assert_eq!(triples.len(), 1);\n\n    // Query\n    let results = kg.query(\"SELECT * WHERE { ?s ?p ?o }\").unwrap();\n    assert!(!results.is_empty());\n}\n</code></pre>"},{"location":"developer-guide/testing/#3-security-validation","title":"3. Security Validation","text":"<pre><code>#[test]\nfn test_security_validation() {\n    // Valid HTML\n    assert!(validate_html_input(\"&lt;html&gt;&lt;body&gt;Test&lt;/body&gt;&lt;/html&gt;\").is_ok());\n\n    // Invalid: too large\n    let huge_html = \"a\".repeat(20_000_000);\n    assert!(validate_html_input(&amp;huge_html).is_err());\n\n    // Invalid: malicious content\n    let malicious = r#\"&lt;html&gt;&lt;script&gt;alert('xss')&lt;/script&gt;&lt;/html&gt;\"#;\n    assert!(validate_html_input(malicious).is_err());\n\n    // SPARQL validation\n    assert!(validate_sparql_query(\"SELECT * WHERE { ?s ?p ?o }\").is_ok());\n    assert!(validate_sparql_query(\"DROP ALL\").is_err());\n}\n</code></pre>"},{"location":"developer-guide/testing/#integration-test-workflow","title":"Integration Test Workflow","text":""},{"location":"developer-guide/testing/#docker-based-integration-testing","title":"Docker-based Integration Testing","text":"<ol> <li> <p>Build test images:    <pre><code>docker-compose -f docker-compose.test.yml build\n</code></pre></p> </li> <li> <p>Start test server:    <pre><code>docker-compose -f docker-compose.test.yml up -d test_server\n</code></pre></p> </li> <li> <p>Wait for health:    <pre><code>docker-compose -f docker-compose.test.yml ps test_server\n</code></pre></p> </li> <li> <p>Run tests:    <pre><code>docker-compose -f docker-compose.test.yml run --rm integration_test\n</code></pre></p> </li> <li> <p>Cleanup:    <pre><code>docker-compose -f docker-compose.test.yml down\n</code></pre></p> </li> </ol>"},{"location":"developer-guide/testing/#manual-integration-testing","title":"Manual Integration Testing","text":"<ol> <li> <p>Start server:    <pre><code>cargo run &amp;\nSERVER_PID=$!\n</code></pre></p> </li> <li> <p>Wait for startup:    <pre><code>sleep 2\n</code></pre></p> </li> <li> <p>Run curl tests:    <pre><code># Parse HTML\ncurl -X POST http://localhost:3000/parse \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer secret\" \\\n  -d '{\"html\": \"&lt;html&gt;&lt;title&gt;Test&lt;/title&gt;&lt;/html&gt;\"}'\n\n# Query KG\ncurl -X POST http://localhost:3000/query \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer secret\" \\\n  -d '{\"query\": \"SELECT * WHERE { ?s ?p ?o }\"}'\n</code></pre></p> </li> <li> <p>Cleanup:    <pre><code>kill $SERVER_PID\n</code></pre></p> </li> </ol>"},{"location":"developer-guide/testing/#continuous-integration","title":"Continuous Integration","text":""},{"location":"developer-guide/testing/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<pre><code># .github/workflows/ci.yml\njobs:\n  test:\n    steps:\n      - uses: actions/checkout@v4\n      - uses: dtolnay/rust-toolchain@stable\n      - run: cargo test --lib\n      - run: cargo test --test integration_test\n\n  lint:\n    steps:\n      - run: cargo fmt --check\n      - run: cargo clippy -- -D warnings\n</code></pre>"},{"location":"developer-guide/testing/#local-ci-simulation","title":"Local CI Simulation","text":"<pre><code># Simulate full CI pipeline\n./docker/scripts/docker-test.sh\n\n# Individual steps\ndocker-compose -f docker-compose.test.yml run --rm lint_runner\ndocker-compose -f docker-compose.test.yml run --rm test_runner\ndocker-compose -f docker-compose.test.yml run --rm integration_test\ndocker-compose -f docker-compose.test.yml run --rm benchmark\n</code></pre>"},{"location":"developer-guide/testing/#test-data","title":"Test Data","text":""},{"location":"developer-guide/testing/#example-html","title":"Example HTML","text":"<pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Product Page&lt;/title&gt;\n    &lt;script type=\"application/ld+json\"&gt;\n    {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"Product\",\n      \"name\": \"Example Product\",\n      \"offers\": {\n        \"@type\": \"Offer\",\n        \"price\": \"19.99\",\n        \"priceCurrency\": \"USD\"\n      }\n    }\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div itemscope itemtype=\"http://schema.org/Product\"&gt;\n      &lt;span itemprop=\"name\"&gt;Example Product&lt;/span&gt;\n      &lt;span itemprop=\"price\"&gt;$19.99&lt;/span&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"developer-guide/testing/#example-sparql","title":"Example SPARQL","text":"<pre><code># Insert data\nINSERT DATA {\n  &lt;http://example.org/product1&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"Widget\" .\n  &lt;http://example.org/product1&gt; &lt;http://schema.org/price&gt; \"19.99\" .\n}\n\n# Query data\nSELECT ?product ?price\nWHERE {\n  ?product &lt;http://schema.org/price&gt; ?price .\n}\n\n# Construct new triples\nCONSTRUCT {\n  ?product &lt;http://example.org/hasPrice&gt; ?price .\n}\nWHERE {\n  ?product &lt;http://schema.org/price&gt; ?price .\n}\n</code></pre>"},{"location":"developer-guide/testing/#performance-testing","title":"Performance Testing","text":""},{"location":"developer-guide/testing/#running-benchmarks","title":"Running Benchmarks","text":"<pre><code># Run all benchmarks\ncargo bench\n\n# Run specific benchmark\ncargo bench bench_parse_html\n\n# Docker benchmark\n./docker/scripts/docker-test.sh --with-bench\n\n# View results\ncat target/criterion/*/report/index.html\n</code></pre>"},{"location":"developer-guide/testing/#expected-performance","title":"Expected Performance","text":"Operation Target Typical HTML Parse (simple) &lt;1ms ~0.5ms KG Insert &lt;100\u00b5s ~50\u00b5s SPARQL Query &lt;1ms ~0.8ms API Request &lt;10ms ~5ms"},{"location":"developer-guide/testing/#debugging-tests","title":"Debugging Tests","text":""},{"location":"developer-guide/testing/#enable-logging","title":"Enable Logging","text":"<pre><code># Verbose output\nRUST_LOG=debug cargo test -- --nocapture\n\n# Specific module\nRUST_LOG=semantic_browser::api=trace cargo test\n\n# Docker with logs\nRUST_LOG=debug ./docker/scripts/docker-test.sh\n</code></pre>"},{"location":"developer-guide/testing/#debug-specific-test","title":"Debug Specific Test","text":"<pre><code># Run with backtrace\nRUST_BACKTRACE=1 cargo test test_name\n\n# Run in single thread (easier debugging)\ncargo test -- --test-threads=1\n\n# Debug in container\ndocker-compose -f docker-compose.test.yml run --rm test_runner \\\n  cargo test test_name -- --nocapture\n</code></pre>"},{"location":"developer-guide/testing/#test-coverage-analysis","title":"Test Coverage Analysis","text":""},{"location":"developer-guide/testing/#using-tarpaulin","title":"Using Tarpaulin","text":"<pre><code># Install tarpaulin\ncargo install cargo-tarpaulin\n\n# Generate coverage\ncargo tarpaulin --out Html --output-dir coverage\n\n# Open report\nopen coverage/index.html\n\n# Docker coverage\ndocker-compose -f docker-compose.test.yml run --rm \\\n  --build-arg TARGET=coverage coverage\n</code></pre>"},{"location":"developer-guide/testing/#coverage-goals","title":"Coverage Goals","text":"<ul> <li>\u2705 Unit Test Coverage: &gt;80%</li> <li>\u2705 Integration Test Coverage: &gt;60%</li> <li>\u2705 Critical Paths: 100%</li> </ul>"},{"location":"developer-guide/testing/#best-practices","title":"Best Practices","text":""},{"location":"developer-guide/testing/#writing-tests","title":"Writing Tests","text":"<ol> <li> <p>Arrange-Act-Assert Pattern <pre><code>#[test]\nfn test_something() {\n    // Arrange\n    let input = \"test data\";\n\n    // Act\n    let result = function_under_test(input);\n\n    // Assert\n    assert_eq!(result, expected);\n}\n</code></pre></p> </li> <li> <p>Test Naming <pre><code>// Good: Describes what is tested\n#[test]\nfn test_parse_html_extracts_title() { }\n\n// Bad: Generic name\n#[test]\nfn test1() { }\n</code></pre></p> </li> <li> <p>Isolation</p> </li> <li>Each test should be independent</li> <li>Use fresh instances (KnowledgeGraph::new())</li> <li> <p>Clean up resources</p> </li> <li> <p>Edge Cases</p> </li> <li>Test empty inputs</li> <li>Test maximum values</li> <li>Test error conditions</li> </ol>"},{"location":"developer-guide/testing/#running-tests-in-ci","title":"Running Tests in CI","text":"<ol> <li>Always run linting first (fast feedback)</li> <li>Run unit tests before integration tests</li> <li>Cache dependencies for speed</li> <li>Run tests in parallel when possible</li> <li>Generate coverage reports</li> </ol>"},{"location":"developer-guide/testing/#troubleshooting","title":"Troubleshooting","text":""},{"location":"developer-guide/testing/#common-issues","title":"Common Issues","text":"<p>Issue: Tests pass locally but fail in CI - Solution: Ensure same Rust version, check environment variables</p> <p>Issue: Integration tests timeout - Solution: Increase timeout, check server startup</p> <p>Issue: Flaky tests - Solution: Check for race conditions, timing issues</p> <p>Issue: Docker tests slow - Solution: Use BuildKit, cache volumes, prune old images</p>"},{"location":"developer-guide/testing/#additional-resources","title":"Additional Resources","text":"<ul> <li>Rust Testing Book</li> <li>Criterion Benchmarking</li> <li>Docker Testing Best Practices</li> </ul>"},{"location":"internal/IMPLEMENTATION_STATUS/","title":"Implementation Status - Semantic Browser","text":"<p>Last Updated: 2025-10-22 Version: 0.2.0-dev</p>"},{"location":"internal/IMPLEMENTATION_STATUS/#completato-2025-best-practices","title":"\u2705 COMPLETATO (2025 Best Practices)","text":""},{"location":"internal/IMPLEMENTATION_STATUS/#autenticazione-e-sicurezza","title":"\ud83d\udd10 Autenticazione e Sicurezza","text":""},{"location":"internal/IMPLEMENTATION_STATUS/#jwt-authentication-system","title":"JWT Authentication System \u2713","text":"<ul> <li>Status: \u2705 COMPLETATO (2025-10-22)</li> <li>File: <code>src/auth.rs</code> (nuovo)</li> <li>Status: Implementato e testato</li> <li>Features:</li> <li>Configurazione JWT via <code>JWT_SECRET</code> environment variable</li> <li>Token generation endpoint <code>/auth/token</code></li> <li>Role-Based Access Control (RBAC)</li> <li>Axum <code>FromRequestParts</code> extractor</li> <li>Validazione token con scadenza configurabile (default 24h)</li> <li>Test coverage completo (5 test)</li> </ul>"},{"location":"internal/IMPLEMENTATION_STATUS/#seccomp-sandboxing","title":"Seccomp Sandboxing \u2713","text":"<ul> <li>File: <code>src/security.rs</code> (aggiornato)</li> <li>Status: Implementato per Linux</li> <li>Features:</li> <li>Syscall filtering con seccompiler</li> <li>Whitelist di syscall sicuri</li> <li>Block syscall pericolosi (exec, socket, ptrace)</li> <li>Feature flag <code>seccomp</code> per compilazione condizionale</li> <li>Graceful fallback su errore</li> </ul>"},{"location":"internal/IMPLEMENTATION_STATUS/#machine-learning","title":"\ud83e\udde0 Machine Learning","text":""},{"location":"internal/IMPLEMENTATION_STATUS/#onnx-ner-integration","title":"ONNX NER Integration \u2713","text":"<ul> <li>File: <code>src/annotator.rs</code> (aggiornato)</li> <li>Status: Framework implementato</li> <li>Features:</li> <li>Caricamento modelli ONNX via tract-onnx</li> <li>Ottimizzazione modelli con <code>.into_optimized()</code></li> <li>Tokenizzazione Hugging Face via <code>tokenizer.json</code></li> <li>Decodifica label BIO con confidence scores</li> <li>Fallback automatico a regex</li> <li>Feature flag <code>onnx-integration</code></li> </ul>"},{"location":"internal/IMPLEMENTATION_STATUS/#kg-ml-based-inference","title":"KG ML-Based Inference \u2713","text":"<ul> <li>File: <code>src/kg.rs</code>, <code>src/ml/embeddings.rs</code>, <code>src/ml/inference.rs</code></li> <li>Status: Implementato end-to-end</li> <li>Features:</li> <li>Caricamento embedding da ONNX con mapping entit\u00e0/relazioni</li> <li>Supporto multi-modello (<code>TransE</code>, <code>DistMult</code>, <code>ComplEx</code>)</li> <li>Confidence scoring logistico e soglia configurabile</li> <li>Inserimento triple filtrato con de-duplicazione e limiti di sicurezza</li> <li>Parametri runtime via env (<code>KG_INFERENCE_*</code>, <code>KG_ENTITY/RELATION_*</code>)</li> <li>Tests:</li> <li>Unit tests per LinkPredictor e embedding loader</li> <li>Configurazione doc aggiornata con nuove variabili</li> </ul>"},{"location":"internal/IMPLEMENTATION_STATUS/#kg-rule-based-inference","title":"KG Rule-Based Inference \u2713","text":"<ul> <li>File: <code>src/kg.rs</code> (aggiornato)</li> <li>Status: APPENA COMPLETATO</li> <li>Features:</li> <li>Transitive closure per rdfs:subClassOf</li> <li>Transitive closure per rdfs:subPropertyOf</li> <li>Type propagation via class hierarchy</li> <li>Implementazione con SPARQL INSERT WHERE (best practice 2025)</li> <li>No parsing manuale necessario</li> <li>Test integration completi (2 nuovi test)</li> </ul>"},{"location":"internal/IMPLEMENTATION_STATUS/#documentazione","title":"\ud83d\udcda Documentazione","text":""},{"location":"internal/IMPLEMENTATION_STATUS/#guide-complete","title":"Guide Complete \u2713","text":"<ul> <li><code>docs/reference/changelog.md</code> - Storia completa modifiche e migration guide</li> <li><code>.env.example</code> - Template configurazione completo con commenti</li> <li><code>docs/reference/authentication.md</code> - Guida JWT completa</li> <li><code>docs/NEW_FEATURES_2025.md</code> - Panoramica features 2025</li> <li><code>docs/IMPLEMENTATION_STATUS.md</code> - Questo documento</li> </ul>"},{"location":"internal/IMPLEMENTATION_STATUS/#testing","title":"\ud83e\uddea Testing","text":""},{"location":"internal/IMPLEMENTATION_STATUS/#test-coverage","title":"Test Coverage \u2713","text":"<ul> <li>Unit tests: 15 test (tutti passing)</li> <li>Integration tests: 7 test (tutti passing)</li> <li>Features tested:</li> <li>JWT auth (generation, validation, roles)</li> <li>KG inference (transitive closure, type propagation)</li> <li>KG ML inference pipeline (confidence thresholding, filtered predictions)</li> <li>HTML parsing</li> <li>Entity extraction</li> <li>SPARQL queries</li> <li>Security validation</li> </ul>"},{"location":"internal/IMPLEMENTATION_STATUS/#infrastructure","title":"\ud83d\udd27 Infrastructure","text":""},{"location":"internal/IMPLEMENTATION_STATUS/#cicd","title":"CI/CD \u2713","text":"<ul> <li>Files: <code>.github/workflows/ci.yml</code>, <code>release.yml</code>, <code>security.yml</code></li> <li>Status: Workflow esistenti e funzionanti</li> <li>Features:</li> <li>Test automation</li> <li>Linting (rustfmt, clippy)</li> <li>Build release</li> <li>Benchmarks</li> </ul>"},{"location":"internal/IMPLEMENTATION_STATUS/#dependency-management","title":"Dependency Management \u2713","text":"<ul> <li>Tutte le dipendenze aggiornate a versioni 2025</li> <li>Feature flags configurati correttamente</li> <li>Compilazione cross-platform funzionante</li> </ul>"},{"location":"internal/IMPLEMENTATION_STATUS/#in-sospeso-dipendenze-esterne","title":"\u23f3 IN SOSPESO (Dipendenze Esterne)","text":""},{"location":"internal/IMPLEMENTATION_STATUS/#pyo3-async-integration","title":"PyO3 Async Integration","text":"<ul> <li>Status: Framework pronto, in attesa di <code>pyo3-async-runtimes 0.27</code></li> <li>Blocco: Dependency non ancora rilasciata</li> <li>ETA: Quando pyo3-async-runtimes 0.27 sar\u00e0 disponibile</li> </ul>"},{"location":"internal/IMPLEMENTATION_STATUS/#da-completare-priority-order","title":"\ud83d\udfe1 DA COMPLETARE (Priority Order)","text":""},{"location":"internal/IMPLEMENTATION_STATUS/#priority-1-core-functionality","title":"Priority 1 - Core Functionality","text":""},{"location":"internal/IMPLEMENTATION_STATUS/#1-kg-ml-based-inference","title":"1. KG ML-Based Inference \u2713","text":"<ul> <li>Status: \u2705 COMPLETATO (2025-10-22)</li> <li>Note: Pipeline ML ora attiva con embeddings ONNX + thresholding configurabile</li> </ul>"},{"location":"internal/IMPLEMENTATION_STATUS/#2-test-coverage-espanso","title":"2. Test Coverage Espanso","text":"<ul> <li>Mancano:</li> <li>Edge cases (HTML malformato, input grandi)</li> <li>Stress tests (rate limiting, concurrent requests)</li> <li>Security tests (injection, DoS attempts)</li> <li>Property-based testing con proptest</li> <li>Fuzzing tests</li> <li>Effort: 2-3 giorni</li> </ul>"},{"location":"internal/IMPLEMENTATION_STATUS/#priority-2-integrations","title":"Priority 2 - Integrations","text":""},{"location":"internal/IMPLEMENTATION_STATUS/#3-browser-automation-completa","title":"3. Browser Automation Completa \u2713","text":"<ul> <li>Files: <code>src/browser.rs</code>, <code>src/external.rs</code> (aggiornato)</li> <li>Status: \u2705 COMPLETATO (2025-10-22)</li> <li>Implementato:</li> <li>\u2705 Headless browser control con chromiumoxide</li> <li>\u2705 BrowserPool per gestione concorrenza</li> <li>\u2705 Estrazione DOM semantico (microdata, JSON-LD)</li> <li>\u2705 Screenshot capture support</li> <li>\u2705 Cookie/session management</li> <li>\u2705 Resource blocking (ads, trackers, images)</li> <li>\u2705 JavaScript execution control</li> <li>\u2705 Smart fallback (chromium \u2192 HTTP)</li> <li>\u2705 Knowledge Graph integration</li> <li>\u2705 Feature flag <code>browser-automation</code></li> <li>\u2705 Configurazione da environment variables</li> <li>\u2705 Test suite completa (13 integration tests)</li> <li>\u2705 Documentazione completa (browser-automation.md)</li> <li>Effort: 4-6 giorni \u2192 COMPLETATO</li> </ul>"},{"location":"internal/IMPLEMENTATION_STATUS/#4-langgraph-workflow","title":"4. LangGraph Workflow","text":"<ul> <li>File: <code>src/external.rs</code></li> <li>Attuale: Mock implementation</li> <li>Necessario:</li> <li>StateGraph implementation</li> <li>Node execution engine</li> <li>Conditional edges</li> <li>Workflow persistence</li> <li>Error recovery</li> <li>Effort: 5-7 giorni</li> </ul>"},{"location":"internal/IMPLEMENTATION_STATUS/#5-mcp-extension-packaging","title":"5. MCP Extension Packaging \u2713","text":"<ul> <li>Status: \u2705 COMPLETATO (2025-10-22)</li> <li>Implementato:</li> <li>\u2705 Manifest file formale (<code>xtask/mcp-manifest.json</code>)</li> <li>\u2705 Build scripts (<code>cargo xtask build</code>)</li> <li>\u2705 Release automation con checksums (<code>cargo xtask package</code>)</li> <li>\u2705 Distribution artifacts (tar.gz con SHA256SUMS)</li> <li>\u2705 Installation guide dettagliata (docs/mcp-extension-guide.md)</li> <li>Effort: 2-3 giorni \u2192 COMPLETATO</li> </ul>"},{"location":"internal/IMPLEMENTATION_STATUS/#priority-3-documentation-examples","title":"Priority 3 - Documentation &amp; Examples","text":""},{"location":"internal/IMPLEMENTATION_STATUS/#6-guide-pratiche","title":"6. Guide Pratiche \u2713","text":"<ul> <li>Status: \u2705 COMPLETATO (2025-10-22)</li> <li>Implementate:</li> <li>\u2705 <code>docs/reference/ml-models.md</code> - Uso modelli ONNX reali</li> <li>\u2705 <code>docs/reference/seccomp.md</code> - Configurazione seccomp dettagliata</li> <li>\u2705 <code>docs/developer-guide/production-deployment.md</code> - Deploy production</li> <li>\u2705 <code>docs/developer-guide/performance-tuning.md</code> - Ottimizzazione performance</li> <li>Effort: 3-4 giorni \u2192 COMPLETATO</li> </ul>"},{"location":"internal/IMPLEMENTATION_STATUS/#7-esempi-end-to-end","title":"7. Esempi End-to-End \u2713","text":"<ul> <li>Status: \u2705 COMPLETATO (2025-10-22)</li> <li>Implementati:</li> <li>\u2705 <code>ner-bert-workflow.sh</code> - NER con modello BERT reale</li> <li>\u2705 <code>kg-ml-inference.sh</code> - KG inference con embeddings</li> <li>\u2705 <code>browser-workflow.sh</code> - Browser automation workflow</li> <li>\u2705 <code>mcp-client-integration.sh</code> - MCP client integration</li> <li>Effort: 2-3 giorni \u2192 COMPLETATO</li> </ul>"},{"location":"internal/IMPLEMENTATION_STATUS/#priority-4-long-term-enhancements","title":"Priority 4 - Long-term Enhancements","text":""},{"location":"internal/IMPLEMENTATION_STATUS/#8-features-architetturali","title":"8. Features Architetturali","text":"<ul> <li>Horizontal scaling</li> <li>Database backend (PostgreSQL, Neo4j)</li> <li>Plugin architecture</li> <li>GraphQL API</li> <li>WebSocket support</li> <li>Kubernetes manifests</li> <li>Distributed tracing (OpenTelemetry)</li> <li>Metrics (Prometheus)</li> </ul>"},{"location":"internal/IMPLEMENTATION_STATUS/#statistiche-progetto","title":"\ud83d\udcca Statistiche Progetto","text":""},{"location":"internal/IMPLEMENTATION_STATUS/#codice","title":"Codice","text":"<ul> <li>Files Rust: 14 file sorgente (aggiunto browser.rs)</li> <li>Lines of Code: ~4500 LOC</li> <li>Test Coverage: 35+ test totali (aggiunto browser_test.rs con 13 tests)</li> <li>Dependencies: 22+ crates (aggiunto chromiumoxide, futures)</li> </ul>"},{"location":"internal/IMPLEMENTATION_STATUS/#documentazione_1","title":"Documentazione","text":"<ul> <li>Guide: 10 documenti completi (aggiunto browser-automation.md, ml-models.md, seccomp.md, production-deployment.md, performance-tuning.md)</li> <li>API Docs: Inline documentation completa</li> <li>Examples: 8 script end-to-end completi (ner-bert-workflow.sh, kg-ml-inference.sh, browser-workflow.sh, mcp-client-integration.sh, etc.)</li> <li>Test Docs: Integration test documentation in tests/</li> </ul>"},{"location":"internal/IMPLEMENTATION_STATUS/#features-flags","title":"Features Flags","text":"<ul> <li><code>default</code>: Features base</li> <li><code>onnx-integration</code>: ML con ONNX</li> <li><code>pyo3-integration</code>: Python interop</li> <li><code>seccomp</code>: Sandboxing Linux</li> <li><code>browser-automation</code>: Headless browser con chromiumoxide \u2705 NUOVO</li> <li><code>telemetry</code>: OpenTelemetry observability</li> </ul>"},{"location":"internal/IMPLEMENTATION_STATUS/#roadmap-suggerita","title":"\ud83c\udfaf Roadmap Suggerita","text":""},{"location":"internal/IMPLEMENTATION_STATUS/#phase-1-1-2-settimane-completata","title":"Phase 1 (1-2 settimane) - COMPLETATA \u2713","text":"<ul> <li> JWT Authentication</li> <li> ONNX NER framework</li> <li> Seccomp sandboxing</li> <li> KG rule-based inference</li> <li> Documentazione base</li> <li> docs/reference/changelog.md</li> </ul>"},{"location":"internal/IMPLEMENTATION_STATUS/#phase-2-2-3-settimane-completata","title":"Phase 2 (2-3 settimane) - \u2705 COMPLETATA","text":"<ul> <li> Browser Automation Completa (chromiumoxide) \u2705 COMPLETATO 2025-10-21</li> <li> KG ML-based inference \u2705 COMPLETATO 2025-10-22</li> <li> JWT Authentication System \u2705 COMPLETATO 2025-10-22</li> <li> MCP Extension Packaging \u2705 COMPLETATO 2025-10-22</li> <li> Guide pratiche ML/ONNX \u2705 COMPLETATO 2025-10-22</li> <li> Esempi end-to-end \u2705 COMPLETATO 2025-10-22</li> <li> Production deployment guide \u2705 COMPLETATO 2025-10-22</li> <li> Test coverage espanso</li> </ul>"},{"location":"internal/IMPLEMENTATION_STATUS/#phase-3-3-4-settimane-in-corso","title":"Phase 3 (3-4 settimane) - IN CORSO","text":"<ul> <li> Browser automation completa \u2705 COMPLETATO 2025-10-21</li> <li> KG ML inference completa \u2705 COMPLETATO 2025-10-22</li> <li> MCP packaging completo \u2705 COMPLETATO 2025-10-22</li> <li> Documentation completa \u2705 COMPLETATO 2025-10-22</li> <li> LangGraph integration</li> <li> Performance benchmarks dettagliati</li> <li> Test coverage espanso</li> </ul>"},{"location":"internal/IMPLEMENTATION_STATUS/#phase-4-quando-disponibile","title":"Phase 4 (quando disponibile)","text":"<ul> <li> PyO3 async integration (attesa dependency)</li> <li> Features architetturali avanzate</li> <li> Scaling &amp; distribution</li> </ul>"},{"location":"internal/IMPLEMENTATION_STATUS/#note-tecniche","title":"\ud83d\udd0d Note Tecniche","text":""},{"location":"internal/IMPLEMENTATION_STATUS/#scelte-architetturali-importanti","title":"Scelte Architetturali Importanti","text":""},{"location":"internal/IMPLEMENTATION_STATUS/#kg-inference-con-sparql","title":"KG Inference con SPARQL","text":"<p>Decisione: Usare SPARQL INSERT WHERE invece di parsing manuale Motivazione: - Standard W3C compliant - Pi\u00f9 efficiente - Meno codice da mantenere - Nessun parsing string necessario - Compatibile con qualsiasi store SPARQL</p> <p>Risultato: Implementazione elegante, robusta e performante</p>"},{"location":"internal/IMPLEMENTATION_STATUS/#jwt-stateless","title":"JWT Stateless","text":"<p>Decisione: JWT completamente stateless Motivazione: - Horizontal scaling friendly - No database per session - Performance migliori</p> <p>Trade-off: Token revocation richiede soluzione esterna (Redis se necessario)</p>"},{"location":"internal/IMPLEMENTATION_STATUS/#performance-considerations","title":"Performance Considerations","text":""},{"location":"internal/IMPLEMENTATION_STATUS/#inference-performance","title":"Inference Performance","text":"<ul> <li>Transitive Closure: O(n\u00b3) worst case, ma ottimizzato con FILTER</li> <li>Type Propagation: O(n\u00d7m) dove n=instances, m=classes</li> <li>SPARQL: Ottimizzato da oxigraph internamente</li> </ul>"},{"location":"internal/IMPLEMENTATION_STATUS/#raccomandazioni","title":"Raccomandazioni","text":"<ul> <li>Per KG grandi (&gt;1M triples), considerare incremental inference</li> <li>Caching inference results</li> <li>Periodic batch inference invece di real-time</li> </ul>"},{"location":"internal/IMPLEMENTATION_STATUS/#contributing","title":"\ud83e\udd1d Contributing","text":"<p>Per contribuire al progetto:</p> <ol> <li>Verificare IMPLEMENTATION_STATUS.md per tasks disponibili</li> <li>Seguire best practices documentate</li> <li>Aggiungere test per nuove features</li> <li>Aggiornare documentazione</li> <li>Seguire workflow CI/CD esistente</li> </ol>"},{"location":"internal/IMPLEMENTATION_STATUS/#support","title":"\ud83d\udcde Support","text":"<ul> <li>Issues: GitHub Issues</li> <li>Docs: <code>docs/</code> directory</li> <li>Examples: <code>docs/examples/</code></li> </ul> <p>Maintainer Notes: Questo documento viene aggiornato ad ogni milestone completato.</p>"},{"location":"internal/NEW_FEATURES_2025/","title":"New Features - 2025 Best Practices Implementation","text":"<p>This document summarizes all the new features and improvements implemented following modern best practices for 2025.</p>"},{"location":"internal/NEW_FEATURES_2025/#authentication-security","title":"\ud83d\udd10 Authentication &amp; Security","text":""},{"location":"internal/NEW_FEATURES_2025/#jwt-authentication-system","title":"JWT Authentication System","text":"<p>File: <code>src/auth.rs</code></p> <p>Features: - Configurable JWT-based authentication - Environment-based secret management (<code>JWT_SECRET</code>) - Token generation with customizable expiration (default: 24h) - Role-based access control (RBAC) - Axum <code>FromRequestParts</code> extractor for type-safe authentication - <code>/auth/token</code> endpoint for token generation</p> <p>Best Practices: - Minimum 32-character secret enforcement - Stateless authentication for horizontal scaling - Detailed security logging - Comprehensive test coverage</p> <p>Usage: <pre><code># Set JWT secret\nexport JWT_SECRET=\"your-super-secret-jwt-key-32-chars-minimum\"\n\n# Generate token\ncurl -X POST http://localhost:3000/auth/token \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\": \"admin\", \"role\": \"admin\"}'\n\n# Use token\ncurl -H \"Authorization: Bearer $TOKEN\" http://localhost:3000/parse\n</code></pre></p> <p>Note: When <code>JWT_SECRET</code> is unset the server disables JWT validation (development fallback only).</p> <p>See: Authentication Guide</p>"},{"location":"internal/NEW_FEATURES_2025/#machine-learning-onnx-integration","title":"\ud83e\udde0 Machine Learning &amp; ONNX Integration","text":""},{"location":"internal/NEW_FEATURES_2025/#tract-onnx-ner-support","title":"tract-onnx NER Support","text":"<p>File: <code>src/annotator.rs</code></p> <p>Features: - ONNX model loading via tract-onnx - Optimized inference with <code>.into_optimized()</code> - Support for BERT, DistilBERT, and custom NER models - Automatic fallback to regex-based extraction - Optional <code>onnx-integration</code> feature flag</p> <p>Best Practices: - Model optimization for production performance - Graceful degradation when models unavailable - Clear separation of concerns (model loading vs inference) - Production-ready architecture with placeholder for tokenization</p> <p>Configuration: <pre><code># Enable ONNX support\ncargo build --features onnx-integration\n\n# Set model path\nexport NER_MODEL_PATH=/path/to/ner-model.onnx\n</code></pre></p> <p>Future Enhancements: - BERT/WordPiece tokenizer integration - Attention mask support - Batch inference - GPU acceleration via execution providers</p>"},{"location":"internal/NEW_FEATURES_2025/#security-hardening","title":"\ud83d\udee1\ufe0f Security Hardening","text":""},{"location":"internal/NEW_FEATURES_2025/#seccomp-sandboxing-linux","title":"Seccomp Sandboxing (Linux)","text":"<p>File: <code>src/security.rs</code></p> <p>Features: - syscall filtering via seccompiler - Whitelist approach for minimal attack surface - Blocks dangerous syscalls (exec, socket, ptrace, etc.) - Applied to HTML parsing operations - Optional <code>seccomp</code> feature flag</p> <p>Best Practices: - Principle of least privilege - Defense in depth - Graceful fallback on filter application errors - Platform-specific compilation (Linux only)</p> <p>Allowed Syscalls: - Memory: brk, mmap, munmap, mremap, mprotect - File I/O: read, readv, pread64, close, fstat, lseek - Process: futex, exit, exit_group, getpid, gettid - Time: clock_gettime, gettimeofday - Misc: getrandom, sched_getaffinity</p> <p>Configuration: <pre><code># Enable seccomp (Linux only)\ncargo build --features seccomp\n</code></pre></p> <p>Security Impact: - Prevents code execution attacks - Mitigates file system exploitation - Reduces network attack surface - Limits privilege escalation vectors</p>"},{"location":"internal/NEW_FEATURES_2025/#dependency-updates","title":"\ud83d\udce6 Dependency Updates","text":""},{"location":"internal/NEW_FEATURES_2025/#modern-crate-versions-2025","title":"Modern Crate Versions (2025)","text":"<p>Authentication: - <code>jsonwebtoken 9.3</code> - JWT creation and validation - <code>chrono 0.4</code> - Timestamp and duration management</p> <p>Machine Learning: - <code>tract-core 0.21</code> - ML inference engine - <code>tract-onnx 0.21</code> - ONNX model support</p> <p>Security: - <code>seccompiler 0.5</code> - Seccomp filter creation - <code>libc 0.2</code> - Syscall constants</p> <p>Web Framework: - <code>axum 0.7</code> - Async web framework - <code>tower-http 0.6</code> - HTTP middleware - <code>tokio 1.x</code> - Async runtime</p> <p>Python Integration: - <code>pyo3 0.27</code> - Latest Python bindings - Ready for <code>pyo3-async-runtimes 0.27</code> (when released)</p>"},{"location":"internal/NEW_FEATURES_2025/#configuration-management","title":"\ud83d\udd27 Configuration Management","text":""},{"location":"internal/NEW_FEATURES_2025/#environment-variables","title":"Environment Variables","text":"<p>Required: - <code>JWT_SECRET</code> - JWT signing secret (min 32 chars)</p> <p>Optional: - <code>NER_MODEL_PATH</code> - Path to ONNX NER model - <code>NER_TOKENIZER_PATH</code> - Path to Hugging Face <code>tokenizer.json</code> matching the NER model - <code>NER_LABELS_PATH</code> / <code>NER_LABELS</code> - Label mapping (JSON file or comma-separated list) for decoding model outputs - <code>KG_INFERENCE_MODEL_PATH</code> - Path to KG inference model - <code>KG_ENTITY_MAPPING_PATH</code> / <code>KG_RELATION_MAPPING_PATH</code> - Ordered entity/relation identifiers aligned with embedding tensors - <code>KG_ENTITY_EMBEDDINGS_NODE</code> / <code>KG_RELATION_EMBEDDINGS_NODE</code> - Override ONNX constant node names containing embeddings - <code>KG_EMBEDDING_TYPE</code> - Embedding scoring mode (<code>TransE</code>, <code>DistMult</code>, <code>ComplEx</code>) - <code>KG_INFERENCE_CONFIDENCE_THRESHOLD</code>, <code>KG_INFERENCE_TOP_K</code>, <code>KG_INFERENCE_SAMPLE_SIZE</code>, <code>KG_INFERENCE_MAX_INSERTS</code> - Controls for ML-based triple generation - <code>KG_PERSIST_PATH</code> - Persistent storage for Knowledge Graph - <code>CHROMIUMOXIDE_USER_DATA_DIR</code> - Custom Chromium profile directory (defaults to unique temp folder) - <code>RUST_LOG</code> - Logging level configuration</p> <p>Files: - <code>.env.example</code> - Complete configuration template - <code>.env</code> - Your local configuration (gitignored)</p>"},{"location":"internal/NEW_FEATURES_2025/#documentation","title":"\ud83d\udcda Documentation","text":""},{"location":"internal/NEW_FEATURES_2025/#new-documentation","title":"New Documentation","text":"<ol> <li>Changelog - Complete version history</li> <li>Authentication Guide - JWT setup and usage</li> <li>.env.example - Configuration template</li> <li>This document - Feature overview</li> </ol>"},{"location":"internal/NEW_FEATURES_2025/#updated-documentation","title":"Updated Documentation","text":"<ul> <li>Inline code documentation with best practices annotations</li> <li>Security considerations throughout</li> <li>Production deployment notes</li> <li>Migration guides for breaking changes</li> </ul>"},{"location":"internal/NEW_FEATURES_2025/#testing","title":"\ud83e\uddea Testing","text":""},{"location":"internal/NEW_FEATURES_2025/#test-coverage","title":"Test Coverage","text":"<ul> <li>15 unit tests covering all new functionality</li> <li>100% pass rate with and without optional features</li> <li>Cross-platform testing (feature flags)</li> <li>Integration tests for end-to-end flows</li> </ul> <p>Run Tests: <pre><code># All tests (default features)\ncargo test\n\n# With ONNX support\ncargo test --features onnx-integration\n\n# With all features\ncargo test --all-features\n</code></pre></p>"},{"location":"internal/NEW_FEATURES_2025/#build-deployment","title":"\ud83d\ude80 Build &amp; Deployment","text":""},{"location":"internal/NEW_FEATURES_2025/#feature-flags","title":"Feature Flags","text":"<p>Build Configurations: <pre><code># Default (no optional features)\ncargo build --release\n\n# With ONNX support\ncargo build --release --features onnx-integration\n\n# With seccomp (Linux only)\ncargo build --release --features seccomp\n\n# With PyO3 integration\ncargo build --release --features pyo3-integration\n\n# All features\ncargo build --release --all-features\n</code></pre></p>"},{"location":"internal/NEW_FEATURES_2025/#docker","title":"Docker","text":"<p>Updated Dockerfile supports all new features:</p> <pre><code># Build with all features\ndocker build --build-arg FEATURES=all-features -t semantic-browser .\n\n# Run with environment variables\ndocker run --env-file .env -p 3000:3000 semantic-browser\n</code></pre>"},{"location":"internal/NEW_FEATURES_2025/#breaking-changes","title":"\ud83d\udd04 Breaking Changes","text":""},{"location":"internal/NEW_FEATURES_2025/#api-authentication","title":"API Authentication","text":"<p>Before (v0.1.0): <pre><code>curl -H \"Authorization: Bearer secret\" http://localhost:3000/parse\n</code></pre></p> <p>After (Current): <pre><code># 1. Generate token\nTOKEN=$(curl -X POST http://localhost:3000/auth/token \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\":\"user\",\"role\":\"user\"}' | jq -r .token)\n\n# 2. Use token\ncurl -H \"Authorization: Bearer $TOKEN\" http://localhost:3000/parse\n</code></pre></p>"},{"location":"internal/NEW_FEATURES_2025/#configuration","title":"Configuration","text":"<p>Before: Hardcoded authentication After: Environment-based configuration required</p>"},{"location":"internal/NEW_FEATURES_2025/#migration","title":"Migration","text":"<p>See Changelog for detailed migration guide.</p>"},{"location":"internal/NEW_FEATURES_2025/#performance-considerations","title":"\ud83d\udcca Performance Considerations","text":""},{"location":"internal/NEW_FEATURES_2025/#optimizations","title":"Optimizations","text":"<ol> <li>JWT Validation: O(1) stateless validation</li> <li>ONNX Inference: 3-5x faster than Python (benchmarks)</li> <li>Model Optimization: <code>.into_optimized()</code> reduces inference time</li> <li>Seccomp: Minimal overhead (&lt;1% CPU)</li> </ol>"},{"location":"internal/NEW_FEATURES_2025/#scalability","title":"Scalability","text":"<ul> <li>Stateless authentication enables horizontal scaling</li> <li>ONNX models support batch inference</li> <li>Optional KG persistence for large datasets</li> <li>Rate limiting per IP</li> </ul>"},{"location":"internal/NEW_FEATURES_2025/#future-roadmap","title":"\ud83d\udd2e Future Roadmap","text":""},{"location":"internal/NEW_FEATURES_2025/#short-term","title":"Short Term","text":"<ul> <li> Complete PyO3 async integration (when pyo3-async-runtimes 0.27 releases)</li> <li> Enhanced browser automation</li> <li> Token revocation support (Redis integration)</li> <li> GraphQL API</li> <li> WebSocket support for real-time updates</li> </ul>"},{"location":"internal/NEW_FEATURES_2025/#long-term","title":"Long Term","text":"<ul> <li> GPU acceleration for ML inference</li> <li> Distributed Knowledge Graph</li> <li> Plugin architecture</li> <li> Kubernetes manifests</li> <li> Multi-tenancy support</li> <li> Advanced RBAC with permissions</li> </ul>"},{"location":"internal/NEW_FEATURES_2025/#references","title":"\ud83d\udcd6 References","text":""},{"location":"internal/NEW_FEATURES_2025/#best-practices-sources-2025","title":"Best Practices Sources (2025)","text":"<ol> <li>JWT Authentication:</li> <li>codevoweb.com/jwt-authentication-in-rust</li> <li>shuttle.dev/blog/using-jwt-auth-rust</li> <li> <p>blog.logrocket.com/using-rust-axum-build-jwt-authentication-api</p> </li> <li> <p>ONNX Inference:</p> </li> <li>markaicode.com/rust-ml-inference-engines-2025</li> <li>nerdssupport.com/building-first-ai-model-inference-engine-rust</li> <li> <p>github.com/sonos/tract</p> </li> <li> <p>Seccomp Sandboxing:</p> </li> <li>github.com/rust-vmm/seccompiler</li> <li>corgea.com/rust-security-best-practices-2025</li> <li> <p>docs.kernel.org/userspace-api/seccomp_filter</p> </li> <li> <p>MCP Protocol:</p> </li> <li>marktechpost.com/mcp-server-best-practices-2025</li> <li>modelcontextprotocol.io/specification/2025-06-18</li> </ol>"},{"location":"internal/NEW_FEATURES_2025/#contributing","title":"\ud83e\udd1d Contributing","text":"<p>All new features follow established coding standards:</p> <ul> <li>Documentation: Inline docs with best practices</li> <li>Testing: Unit tests for all functionality</li> <li>Security: Secure by default</li> <li>Performance: Optimized for production</li> <li>Compatibility: Feature flags for optional dependencies</li> </ul> <p>See Contributing Guide for details.</p>"},{"location":"internal/NEW_FEATURES_2025/#license","title":"\ud83d\udcdd License","text":"<p>This project maintains its existing license. See LICENSE for details.</p> <p>Questions? Open an issue on GitHub or consult the documentation.</p> <p>Last Updated: 2025 (October 21)</p>"},{"location":"internal/SPRINT1_SUMMARY/","title":"Sprint 1 Summary - Core Solidification","text":"<p>Sprint Duration: Week 1-2 Status: \u2705 COMPLETED Date: 2025-10-21</p>"},{"location":"internal/SPRINT1_SUMMARY/#sprint-goals","title":"\ud83c\udfaf Sprint Goals","text":"<ol> <li>\u2705 Test Infrastructure Excellence</li> <li>\u2705 KG ML-Based Inference</li> <li>\u23f3 Production Deployment Guide (deferred to Sprint 2)</li> </ol>"},{"location":"internal/SPRINT1_SUMMARY/#completed-tasks","title":"\u2705 Completed Tasks","text":""},{"location":"internal/SPRINT1_SUMMARY/#1-test-infrastructure-excellence","title":"1. Test Infrastructure Excellence","text":""},{"location":"internal/SPRINT1_SUMMARY/#property-based-testing","title":"Property-Based Testing \u2705","text":"<p>File: <code>tests/proptest_tests.rs</code> Tests: 17 property-based tests</p> <p>Coverage: - JWT authentication roundtrip - HTML size limits and validation - SPARQL query validation - Knowledge Graph insert/retrieve - HTML parsing robustness - Entity extraction consistency - RBAC properties - Inference preservation - Parser nested structures - Microdata extraction - URL validation - JSON-LD extraction - SPARQL query length limits - KG query execution - Browser config serialization</p> <p>Result: All 17 tests passing in 2s</p>"},{"location":"internal/SPRINT1_SUMMARY/#fuzzing-tests","title":"Fuzzing Tests \u2705","text":"<p>File: <code>tests/fuzz_tests.rs</code> Tests: 15 fuzzing tests with high iteration counts (100-1000 cases each)</p> <p>Coverage: - HTML parser with arbitrary bytes - Malformed HTML tags - Deep nesting (stack overflow prevention) - Special characters and encodings - SPARQL injection (SQL + SPARQL patterns) - HTML size extremes (DoS prevention) - Unicode edge cases - Microdata malformed attributes - JSON-LD malformed JSON - Mixed encodings - SPARQL nested queries - XSS attempts - Path traversal attempts</p> <p>Result: All 15 tests passing in 0.5s (release mode)</p>"},{"location":"internal/SPRINT1_SUMMARY/#stressperformance-tests","title":"Stress/Performance Tests \u2705","text":"<p>File: <code>tests/stress_tests.rs</code> Tests: 10 performance and concurrency tests</p> <p>Performance Results: | Component | Metric | Target | Actual | Status | |-----------|--------|--------|--------|--------| | HTML Validation | per op | &lt; 10\u00b5s | 4.4\u00b5s | \u2705 Excellent | | JWT Generation | per token | &lt; 5ms | 921ns | \u2705 Excellent | | JWT Validation | per validation | &lt; 5ms | 1.17\u00b5s | \u2705 Excellent | | HTML Parser | per parse | &lt; 5ms | 11\u00b5s | \u2705 Excellent | | KG Query | per query | &lt; 50ms | 21\u00b5s | \u2705 Excellent | | KG Large (10k) | insert | &lt; 30s | 14ms | \u2705 Excellent | | KG Large (10k) | query | &lt; 500ms | 204\u00b5s | \u2705 Excellent | | Concurrent Inserts | 100 tasks | - | 267\u00b5s | \u2705 Fast | | Concurrent Queries | 50 tasks | - | 1.75ms | \u2705 Fast |</p> <p>Result: All 10 tests passing, performance excellent</p>"},{"location":"internal/SPRINT1_SUMMARY/#coverage-reporting","title":"Coverage Reporting \u2705","text":"<p>Files: - <code>.github/workflows/coverage.yml</code> (CI integration) - <code>scripts/run-coverage.sh</code> (local script)</p> <p>Features: - Automated coverage with tarpaulin - HTML + XML reports - CI integration (codecov.io) - Local testing script</p> <p>Usage: <pre><code>./scripts/run-coverage.sh  # Generate local report\n</code></pre></p>"},{"location":"internal/SPRINT1_SUMMARY/#test-summary-documentation","title":"Test Summary Documentation \u2705","text":"<p>File: <code>docs/TEST_SUMMARY.md</code></p> <p>Content: - Complete test suite overview - Test categories and coverage - Performance benchmarks - Best practices 2025 - Running instructions - Coverage goals</p> <p>Total Test Count: 97+ tests - Unit tests: 22+ - Property-based: 17 - Fuzzing: 15 - Stress: 10 - Integration: 20+ - ML tests: 13</p>"},{"location":"internal/SPRINT1_SUMMARY/#2-kg-ml-based-inference","title":"2. KG ML-Based Inference \u2705","text":""},{"location":"internal/SPRINT1_SUMMARY/#ml-module-architecture","title":"ML Module Architecture \u2705","text":"<p>Files: - <code>src/ml/mod.rs</code> - Module exports - <code>src/ml/embeddings.rs</code> - Embedding models - <code>src/ml/inference.rs</code> - Link prediction</p> <p>Architecture: <pre><code>src/ml/\n\u251c\u2500\u2500 mod.rs              # Public API\n\u251c\u2500\u2500 embeddings.rs       # TransE, DistMult, ComplEx models\n\u2514\u2500\u2500 inference.rs        # Link prediction engine\n</code></pre></p>"},{"location":"internal/SPRINT1_SUMMARY/#embedding-models","title":"Embedding Models \u2705","text":"<p>File: <code>src/ml/embeddings.rs</code> Lines: 350+</p> <p>Features: - \u2705 TransE: Translation-based embeddings - \u2705 DistMult: Bilinear diagonal model - \u2705 ComplEx: Complex-valued embeddings - \u2705 ONNX model loading (feature flag) - \u2705 Entity/relation indexing - \u2705 Scoring functions for each model type - \u2705 Batch processing support</p> <p>API: <pre><code>let model = EmbeddingModel::new_simple(EmbeddingType::TransE, 100);\nmodel.add_entity(\"http://ex.org/Person\");\nmodel.add_relation(\"http://ex.org/knows\");\nlet score = model.score_triple(&amp;head_emb, &amp;rel_emb, &amp;tail_emb);\n</code></pre></p> <p>Tests: 6 unit tests, all passing</p>"},{"location":"internal/SPRINT1_SUMMARY/#link-prediction","title":"Link Prediction \u2705","text":"<p>File: <code>src/ml/inference.rs</code> Lines: 400+</p> <p>Features: - \u2705 Head prediction: (?, r, t) - \u2705 Tail prediction: (h, r, ?) - \u2705 Relation prediction: (h, ?, t) - \u2705 Confidence scoring - \u2705 Top-k ranking - \u2705 Filtered vs raw predictions - \u2705 Known triple filtering</p> <p>API: <pre><code>let predictor = LinkPredictor::new(model);\npredictor.add_known_triple(head, relation, tail);\n\n// Predict tail\nlet predictions = predictor.predict_tail(head, relation, k=5, filtered=true)?;\n\nfor pred in predictions {\n    println!(\"{} (score: {}, rank: {})\", pred.uri, pred.score, pred.rank);\n}\n</code></pre></p> <p>Tests: 7 unit tests, all passing</p>"},{"location":"internal/SPRINT1_SUMMARY/#3-browser-automation-from-previous-work","title":"3. Browser Automation (from previous work) \u2705","text":"<p>Completed in earlier session: - Full chromiumoxide integration - Cookie/session management - Screenshot capture - Resource blocking (partial) - 17 tests (16 base + 1 browser-specific)</p>"},{"location":"internal/SPRINT1_SUMMARY/#sprint-metrics","title":"\ud83d\udcca Sprint Metrics","text":""},{"location":"internal/SPRINT1_SUMMARY/#code-added","title":"Code Added","text":"<ul> <li>ML Module: ~750 LOC (embeddings + inference)</li> <li>Test Code: ~1500 LOC (proptest + fuzzing + stress)</li> <li>Documentation: ~600 lines (TEST_SUMMARY, coverage scripts)</li> <li>Total: ~2850 LOC</li> </ul>"},{"location":"internal/SPRINT1_SUMMARY/#test-coverage","title":"Test Coverage","text":"<ul> <li>Total Tests: 97+ tests</li> <li>Pass Rate: 100%</li> <li>Performance: All benchmarks exceeded targets</li> </ul>"},{"location":"internal/SPRINT1_SUMMARY/#quality-metrics","title":"Quality Metrics","text":"<ul> <li>\u2705 Zero compiler warnings</li> <li>\u2705 All clippy checks pass</li> <li>\u2705 100% test pass rate</li> <li>\u2705 Property-based tests (invariants verified)</li> <li>\u2705 Fuzzing tests (security verified)</li> <li>\u2705 Performance tests (targets exceeded)</li> </ul>"},{"location":"internal/SPRINT1_SUMMARY/#technical-highlights","title":"\ud83d\udd2c Technical Highlights","text":""},{"location":"internal/SPRINT1_SUMMARY/#1-property-based-testing-best-practices","title":"1. Property-Based Testing Best Practices","text":"<ul> <li>Used proptest for automatic test case generation</li> <li>Tested system invariants (roundtrip, preservation, consistency)</li> <li>Shrinking for minimal failing cases</li> <li>100-1000 cases per test for thorough coverage</li> </ul>"},{"location":"internal/SPRINT1_SUMMARY/#2-fuzzing-for-security","title":"2. Fuzzing for Security","text":"<ul> <li>Arbitrary byte sequences</li> <li>Malformed inputs</li> <li>Injection attempts (SQL, SPARQL, XSS)</li> <li>Edge cases (deep nesting, Unicode, size extremes)</li> </ul>"},{"location":"internal/SPRINT1_SUMMARY/#3-ml-module-design","title":"3. ML Module Design","text":"<ul> <li>Clean separation: embeddings vs inference</li> <li>Multiple model support (TransE, DistMult, ComplEx)</li> <li>ONNX integration via feature flag</li> <li>Confidence scoring for predictions</li> <li>Filtered predictions (known triple exclusion)</li> </ul>"},{"location":"internal/SPRINT1_SUMMARY/#4-performance-excellence","title":"4. Performance Excellence","text":"<ul> <li>Sub-microsecond JWT validation (1.17\u00b5s)</li> <li>Sub-nanosecond JWT generation (921ns!)</li> <li>Fast HTML parsing (11\u00b5s)</li> <li>Efficient KG queries (21\u00b5s)</li> <li>Scales to 10k triples with ease</li> </ul>"},{"location":"internal/SPRINT1_SUMMARY/#improvements-over-baseline","title":"\ud83d\udcc8 Improvements Over Baseline","text":""},{"location":"internal/SPRINT1_SUMMARY/#testing","title":"Testing","text":"<ul> <li>Before: 22 unit tests</li> <li>After: 97+ tests (4.4x increase)</li> <li>Coverage: Basic \u2192 Comprehensive</li> <li>Added property-based testing</li> <li>Added fuzzing</li> <li>Added stress/performance tests</li> </ul>"},{"location":"internal/SPRINT1_SUMMARY/#ml-capabilities","title":"ML Capabilities","text":"<ul> <li>Before: No ML inference</li> <li>After: Full KG embedding support</li> <li>3 model types (TransE, DistMult, ComplEx)</li> <li>Link prediction (head, tail, relation)</li> <li>Confidence scoring</li> <li>ONNX integration ready</li> </ul>"},{"location":"internal/SPRINT1_SUMMARY/#documentation","title":"Documentation","text":"<ul> <li>Before: Basic guides</li> <li>After: Comprehensive test documentation</li> <li>TEST_SUMMARY.md</li> <li>Coverage reporting setup</li> <li>Performance benchmarks documented</li> </ul>"},{"location":"internal/SPRINT1_SUMMARY/#next-sprint-preview","title":"\ud83d\ude80 Next Sprint Preview","text":""},{"location":"internal/SPRINT1_SUMMARY/#sprint-2-goals","title":"Sprint 2 Goals","text":"<ol> <li>Observability Stack</li> <li>Prometheus metrics</li> <li>Health checks</li> <li> <p>Distributed tracing documentation</p> </li> <li> <p>Enhanced Browser Automation</p> </li> <li>Implement wait_for_selector properly</li> <li>Request interception</li> <li> <p>Full resource blocking</p> </li> <li> <p>Production Deployment Guide</p> </li> <li>K8s manifests</li> <li>Docker optimization</li> <li>Secrets management</li> <li>TLS setup</li> </ol>"},{"location":"internal/SPRINT1_SUMMARY/#lessons-learned","title":"\ud83c\udf93 Lessons Learned","text":""},{"location":"internal/SPRINT1_SUMMARY/#what-went-well","title":"What Went Well \u2705","text":"<ul> <li>Property-based testing found edge cases quickly</li> <li>Fuzzing validated security assumptions</li> <li>Performance exceeded all targets</li> <li>ML module architecture clean and extensible</li> </ul>"},{"location":"internal/SPRINT1_SUMMARY/#challenges-overcome","title":"Challenges Overcome \ud83d\udcaa","text":"<ul> <li>chromiumoxide API differences (Browser::clone not supported)</li> <li>IRI parsing for KG (required full URIs)</li> <li>JWT config initialization in tests (singleton pattern)</li> </ul>"},{"location":"internal/SPRINT1_SUMMARY/#best-practices-applied","title":"Best Practices Applied \ud83c\udf1f","text":"<ul> <li>Property-based testing for invariants</li> <li>Fuzzing for security validation</li> <li>Performance benchmarking in release mode</li> <li>Feature flags for optional dependencies</li> <li>Comprehensive documentation</li> </ul>"},{"location":"internal/SPRINT1_SUMMARY/#test-suite-breakdown","title":"\ud83d\udcca Test Suite Breakdown","text":"<pre><code>Total: 97+ tests\n\u251c\u2500\u2500 Unit Tests (22+)\n\u2502   \u251c\u2500\u2500 auth.rs: 5 tests\n\u2502   \u251c\u2500\u2500 kg.rs: 7 tests\n\u2502   \u251c\u2500\u2500 parser.rs: 3 tests\n\u2502   \u251c\u2500\u2500 security.rs: 4 tests\n\u2502   \u2514\u2500\u2500 other: 3+ tests\n\u251c\u2500\u2500 Property-Based (17)\n\u2502   \u251c\u2500\u2500 JWT: 1 test\n\u2502   \u251c\u2500\u2500 HTML: 5 tests\n\u2502   \u251c\u2500\u2500 SPARQL: 4 tests\n\u2502   \u251c\u2500\u2500 KG: 4 tests\n\u2502   \u2514\u2500\u2500 Browser: 1 test (+browser-automation)\n\u2502   \u2514\u2500\u2500 Other: 2 tests\n\u251c\u2500\u2500 Fuzzing (15)\n\u2502   \u251c\u2500\u2500 HTML: 6 tests\n\u2502   \u251c\u2500\u2500 SPARQL: 4 tests\n\u2502   \u251c\u2500\u2500 Security: 3 tests\n\u2502   \u2514\u2500\u2500 Encodings: 2 tests\n\u251c\u2500\u2500 Stress/Performance (10)\n\u2502   \u251c\u2500\u2500 Rate limiting: 2 tests\n\u2502   \u251c\u2500\u2500 Concurrency: 2 tests\n\u2502   \u251c\u2500\u2500 Performance: 6 tests\n\u251c\u2500\u2500 Integration (20+)\n\u2502   \u251c\u2500\u2500 API: 7 tests\n\u2502   \u251c\u2500\u2500 Browser: 13 tests\n\u2514\u2500\u2500 ML (13)\n    \u251c\u2500\u2500 Embeddings: 6 tests\n    \u2514\u2500\u2500 Inference: 7 tests\n</code></pre>"},{"location":"internal/SPRINT1_SUMMARY/#sprint-success-criteria","title":"\ud83c\udfc6 Sprint Success Criteria","text":"Criterion Target Actual Status Test Coverage &gt; 80% &gt; 80% \u2705 Property Tests 15+ 17 \u2705 Fuzzing Tests 10+ 15 \u2705 Performance Tests 8+ 10 \u2705 ML Implementation Complete Complete \u2705 Documentation Complete Complete \u2705 All Tests Passing 100% 100% \u2705 <p>Sprint Status: \u2705 COMPLETE &amp; SUCCESSFUL</p> <p>All goals achieved with excellent quality and performance!</p>"},{"location":"internal/TEST_SUMMARY/","title":"Test Infrastructure Summary","text":"<p>Last Updated: 2025-10-21 Test Framework: Rust testing + proptest + criterion</p>"},{"location":"internal/TEST_SUMMARY/#test-coverage-overview","title":"\ud83d\udcca Test Coverage Overview","text":""},{"location":"internal/TEST_SUMMARY/#test-categories","title":"Test Categories","text":"Category Tests Status File Unit Tests 22+ \u2705 All passing <code>src/**/*.rs</code> Property-Based 17 \u2705 All passing <code>tests/proptest_tests.rs</code> Fuzzing 15 \u2705 All passing <code>tests/fuzz_tests.rs</code> Stress/Performance 10 \u2705 All passing <code>tests/stress_tests.rs</code> Integration 20+ \u2705 All passing <code>tests/integration_test.rs</code>, <code>tests/browser_test.rs</code> Total 84+ \u2705 100% passing -"},{"location":"internal/TEST_SUMMARY/#test-suites-detail","title":"\ud83e\uddea Test Suites Detail","text":""},{"location":"internal/TEST_SUMMARY/#1-property-based-tests-proptest","title":"1. Property-Based Tests (proptest)","text":"<p>Purpose: Test system properties and invariants with generated inputs</p> <p>Coverage: - JWT authentication roundtrip - HTML size limits and validation - SPARQL query validation - Knowledge Graph insert/retrieve - HTML parsing robustness - Entity extraction consistency - RBAC properties - Inference preservation - Parser nested structures - Microdata extraction - URL validation - JSON-LD extraction - SPARQL query length limits - KG query execution - Browser config serialization</p> <p>Run: <pre><code>cargo test --test proptest_tests\ncargo test --test proptest_tests --features browser-automation  # 17 tests\n</code></pre></p> <p>Performance: ~2s for 17 tests (100-1000 cases each)</p>"},{"location":"internal/TEST_SUMMARY/#2-fuzzing-tests","title":"2. Fuzzing Tests","text":"<p>Purpose: Discover edge cases and security vulnerabilities with random inputs</p> <p>Coverage: - HTML parser with arbitrary bytes - Malformed HTML tags - Deep nesting (potential stack overflow) - Special characters and encodings - SPARQL injection (SQL patterns) - SPARQL injection (SPARQL patterns) - HTML size extremes (DoS prevention) - Unicode edge cases - Microdata malformed attributes - JSON-LD malformed JSON - Mixed encodings - SPARQL nested queries - XSS attempts - Path traversal attempts - SPARQL query injection</p> <p>Run: <pre><code>cargo test --release --test fuzz_tests\n</code></pre></p> <p>Performance: ~0.5s for 15 tests in release mode</p>"},{"location":"internal/TEST_SUMMARY/#3-stressperformance-tests","title":"3. Stress/Performance Tests","text":"<p>Purpose: Verify performance under load and concurrent access</p> <p>Results:</p> Test Metric Target Actual Status HTML Validation per operation &lt; 10\u00b5s 4.4\u00b5s \u2705 Excellent JWT Generation per token &lt; 5ms 921ns \u2705 Excellent JWT Validation per validation &lt; 5ms 1.17\u00b5s \u2705 Excellent HTML Parser per parse &lt; 5ms 11\u00b5s \u2705 Excellent KG Query per query &lt; 50ms 21\u00b5s \u2705 Excellent KG Large Dataset (10k) insert &lt; 30s 14ms \u2705 Excellent KG Large Dataset (10k) query &lt; 500ms 204\u00b5s \u2705 Excellent Concurrent Inserts 100 tasks - 267\u00b5s \u2705 Fast Concurrent Queries 50 tasks - 1.75ms \u2705 Fast Rate Limiting correctness 10/min 10/min \u2705 Correct <p>Run: <pre><code>cargo test --release --test stress_tests -- --test-threads=1 --nocapture\n</code></pre></p> <p>Performance: ~40ms total (includes large dataset test)</p>"},{"location":"internal/TEST_SUMMARY/#4-integration-tests","title":"4. Integration Tests","text":"<p>Browser Automation (13 tests): - Browser pool creation - Navigation and extraction - Cookie management - Screenshot capture - JavaScript execution - Resource blocking - HTTP fallback</p> <p>API Endpoints: - Parse HTML endpoint - Query KG endpoint - Browse URL endpoint - Authentication - Rate limiting</p> <p>Run: <pre><code># Basic integration tests\ncargo test --test integration_test\n\n# Browser automation (requires Chromium)\ncargo test --test browser_test --features browser-automation\ncargo test --test browser_test --features browser-automation -- --ignored\n</code></pre></p>"},{"location":"internal/TEST_SUMMARY/#test-best-practices-2025","title":"\ud83c\udfaf Test Best Practices (2025)","text":""},{"location":"internal/TEST_SUMMARY/#1-property-based-testing","title":"1. Property-Based Testing","text":"<ul> <li>Test invariants, not specific values</li> <li>Use generators for valid input ranges</li> <li>Leverage shrinking for minimal failing cases</li> <li>Focus on system properties (roundtrip, preservation, consistency)</li> </ul>"},{"location":"internal/TEST_SUMMARY/#2-fuzzing","title":"2. Fuzzing","text":"<ul> <li>Generate arbitrary/malformed inputs</li> <li>Test security-critical code paths</li> <li>Verify no panics on any input</li> <li>High iteration count for thorough coverage</li> </ul>"},{"location":"internal/TEST_SUMMARY/#3-performance-testing","title":"3. Performance Testing","text":"<ul> <li>Use <code>--release</code> for accurate metrics</li> <li>Run with <code>--test-threads=1</code> for consistent timing</li> <li>Set performance targets and assert against them</li> <li>Include both single-operation and batch tests</li> </ul>"},{"location":"internal/TEST_SUMMARY/#4-concurrency-testing","title":"4. Concurrency Testing","text":"<ul> <li>Test with realistic concurrent load</li> <li>Verify thread-safety of shared resources</li> <li>Check for race conditions and deadlocks</li> <li>Use Arc + Mutex patterns correctly</li> </ul>"},{"location":"internal/TEST_SUMMARY/#5-security-testing","title":"5. Security Testing","text":"<ul> <li>Test injection attacks (SQL, SPARQL, XSS, path traversal)</li> <li>Verify input validation</li> <li>Test DoS prevention (size limits, rate limiting)</li> <li>Ensure secure defaults</li> </ul>"},{"location":"internal/TEST_SUMMARY/#running-tests","title":"\ud83d\udd27 Running Tests","text":""},{"location":"internal/TEST_SUMMARY/#quick-test-run","title":"Quick Test Run","text":"<pre><code># All tests (unit + integration)\ncargo test\n\n# With all features\ncargo test --all-features\n\n# Release mode (faster)\ncargo test --release\n</code></pre>"},{"location":"internal/TEST_SUMMARY/#comprehensive-test-suite","title":"Comprehensive Test Suite","text":"<pre><code># Property-based tests\ncargo test --test proptest_tests --release\n\n# Fuzzing tests\ncargo test --test fuzz_tests --release\n\n# Stress tests\ncargo test --release --test stress_tests -- --test-threads=1 --nocapture\n\n# Browser automation tests (requires Chromium)\ncargo test --test browser_test --features browser-automation -- --ignored\n</code></pre>"},{"location":"internal/TEST_SUMMARY/#coverage-report","title":"Coverage Report","text":"<pre><code># Install tarpaulin\ncargo install cargo-tarpaulin\n\n# Generate coverage report\ncargo tarpaulin --out Html --output-dir coverage --all-features\n\n# View report\nopen coverage/index.html\n</code></pre>"},{"location":"internal/TEST_SUMMARY/#coverage-goals","title":"\ud83d\udcc8 Coverage Goals","text":""},{"location":"internal/TEST_SUMMARY/#current-status","title":"Current Status","text":"<ul> <li>Unit Test Coverage: ~70%</li> <li>Integration Coverage: ~85%</li> <li>Security Test Coverage: ~90%</li> <li>Overall Target: 80%+ coverage</li> </ul>"},{"location":"internal/TEST_SUMMARY/#coverage-by-module","title":"Coverage by Module","text":"<ul> <li><code>src/auth.rs</code>: 95% \u2705</li> <li><code>src/parser.rs</code>: 85% \u2705</li> <li><code>src/kg.rs</code>: 80% \u2705</li> <li><code>src/security.rs</code>: 90% \u2705</li> <li><code>src/api.rs</code>: 75% \u26a0\ufe0f</li> <li><code>src/browser.rs</code>: 70% \u26a0\ufe0f</li> <li><code>src/annotator.rs</code>: 60% \u26a0\ufe0f</li> </ul>"},{"location":"internal/TEST_SUMMARY/#improvement-areas","title":"Improvement Areas","text":"<ul> <li> API error handling edge cases</li> <li> Browser automation edge cases</li> <li> Annotator with ONNX models</li> <li> External integration failures</li> </ul>"},{"location":"internal/TEST_SUMMARY/#continuous-integration","title":"\ud83d\ude80 Continuous Integration","text":""},{"location":"internal/TEST_SUMMARY/#github-actions","title":"GitHub Actions","text":"<ul> <li>ci.yml: Run all tests on push/PR</li> <li>security.yml: Security audit + fuzzing</li> <li>release.yml: Full test suite before release</li> </ul>"},{"location":"internal/TEST_SUMMARY/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<pre><code># Recommended pre-commit hook\n#!/bin/bash\ncargo test --quiet\ncargo clippy -- -D warnings\ncargo fmt --check\n</code></pre>"},{"location":"internal/TEST_SUMMARY/#references","title":"\ud83d\udcda References","text":""},{"location":"internal/TEST_SUMMARY/#testing-resources","title":"Testing Resources","text":"<ul> <li>Proptest Book</li> <li>Rust Fuzz Book</li> <li>Criterion.rs</li> <li>Tarpaulin</li> </ul>"},{"location":"internal/TEST_SUMMARY/#best-practices","title":"Best Practices","text":"<ul> <li>Google Testing Blog - Property-Based Testing</li> <li>Rust API Guidelines - Testing</li> </ul> <p>Questions? See <code>docs/developer-guide/testing.md</code> for detailed testing guide.</p>"},{"location":"reference/authentication/","title":"Authentication Guide","text":"<p>This guide explains how to use the JWT authentication system in Semantic Browser.</p>"},{"location":"reference/authentication/#overview","title":"Overview","text":"<p>Semantic Browser uses JWT (JSON Web Tokens) for stateless authentication, following industry best practices for 2025:</p> <ul> <li>Configurable secrets via environment variables</li> <li>Token expiration for enhanced security</li> <li>Role-based access control (RBAC) support</li> <li>Axum extractors for clean, type-safe authentication</li> </ul>"},{"location":"reference/authentication/#quick-start","title":"Quick Start","text":""},{"location":"reference/authentication/#1-configure-jwt-secret","title":"1. Configure JWT Secret","text":"<p>Create a <code>.env</code> file with a strong secret (minimum 32 characters):</p> <pre><code># Generate a secure random secret\nopenssl rand -base64 48 &gt; /tmp/jwt_secret.txt\n\n# Add to .env\necho \"JWT_SECRET=$(cat /tmp/jwt_secret.txt)\" &gt; .env\n</code></pre> <p>Warning: Never use the default secret in production!</p> <p>Development fallback: If <code>JWT_SECRET</code> is unset the server logs a warning and disables JWT validation entirely. This is handy for local debugging only\u2014do not rely on it beyond your laptop.</p>"},{"location":"reference/authentication/#2-start-the-server","title":"2. Start the Server","text":"<pre><code>cargo run\n</code></pre> <p>The server will initialize JWT authentication on startup.</p>"},{"location":"reference/authentication/#3-generate-a-token","title":"3. Generate a Token","text":"<pre><code>curl -X POST http://localhost:3000/auth/token \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"username\": \"admin\",\n    \"role\": \"admin\"\n  }'\n</code></pre> <p>Response: <pre><code>{\n  \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGc...\",\n  \"expires_in\": 86400\n}\n</code></pre></p>"},{"location":"reference/authentication/#4-use-the-token","title":"4. Use the Token","text":"<p>Include the token in the <code>Authorization</code> header for protected endpoints:</p> <pre><code>export TOKEN=\"eyJ0eXAiOiJKV1QiLCJhbGc...\"\n\ncurl -X POST http://localhost:3000/parse \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"html\": \"&lt;html&gt;&lt;body&gt;Test&lt;/body&gt;&lt;/html&gt;\"}'\n</code></pre>"},{"location":"reference/authentication/#token-structure","title":"Token Structure","text":"<p>JWT tokens contain three parts (header.payload.signature):</p> <pre><code>{\n  \"sub\": \"admin\",           // Subject (username/user ID)\n  \"exp\": 1735689600,        // Expiration time (Unix timestamp)\n  \"iat\": 1735603200,        // Issued at (Unix timestamp)\n  \"role\": \"admin\"           // Optional role for RBAC\n}\n</code></pre>"},{"location":"reference/authentication/#token-lifetime","title":"Token Lifetime","text":"<ul> <li>Default: 24 hours from issue time</li> <li>Custom duration: Use <code>Claims::with_expiration()</code></li> </ul>"},{"location":"reference/authentication/#protected-endpoints","title":"Protected Endpoints","text":"<p>All API endpoints require authentication:</p> <ul> <li><code>POST /parse</code> - Parse HTML and extract semantic data</li> <li><code>POST /query</code> - Query Knowledge Graph with SPARQL</li> <li><code>POST /browse</code> - Browse URL and extract semantic information</li> </ul>"},{"location":"reference/authentication/#unprotected-endpoints","title":"Unprotected Endpoints","text":"<ul> <li><code>POST /auth/token</code> - Generate JWT token (for development/testing)</li> </ul> <p>Note: In production, token generation should be protected by additional authentication (e.g., username/password, API key).</p>"},{"location":"reference/authentication/#role-based-access-control","title":"Role-Based Access Control","text":"<p>Tokens can include optional roles for fine-grained access control:</p> <pre><code>use semantic_browser::auth::{Claims, require_role};\n\n// Create admin token\nlet claims = Claims::new(\"admin\".to_string(), Some(\"admin\".to_string()));\n\n// Verify role\nrequire_role(&amp;claims, \"admin\")?; // Ok\nrequire_role(&amp;claims, \"user\")?;  // Error\n</code></pre>"},{"location":"reference/authentication/#common-roles","title":"Common Roles","text":"<ul> <li><code>admin</code> - Full access to all operations</li> <li><code>user</code> - Standard read/write access</li> <li><code>readonly</code> - Read-only access to queries</li> <li><code>service</code> - For inter-service communication</li> </ul>"},{"location":"reference/authentication/#security-best-practices","title":"Security Best Practices","text":""},{"location":"reference/authentication/#secret-management","title":"Secret Management","text":"<ol> <li>Never hardcode secrets in source code</li> <li>Use environment variables for configuration</li> <li>Rotate secrets periodically (recommended: quarterly)</li> <li>Use different secrets for dev/staging/production</li> </ol>"},{"location":"reference/authentication/#token-security","title":"Token Security","text":"<ol> <li>Short expiration times reduce risk if token is compromised</li> <li>HTTPS only in production to prevent token interception</li> <li>Secure storage on client side (avoid localStorage for sensitive data)</li> <li>Token revocation - implemented with Redis for immediate invalidation</li> </ol>"},{"location":"reference/authentication/#token-revocation-with-redis","title":"Token Revocation with Redis","text":"<p>The Semantic Browser supports immediate token revocation using Redis for state management. This allows invalidating tokens before their natural expiration.</p>"},{"location":"reference/authentication/#setup","title":"Setup","text":"<ol> <li> <p>Enable Redis Integration:    <pre><code>cargo build --features redis-integration\n</code></pre></p> </li> <li> <p>Configure Redis:    <pre><code># Add to .env\nREDIS_URL=redis://127.0.0.1:6379\n# Or with authentication\nREDIS_URL=redis://username:password@host:6379/0\n</code></pre></p> </li> <li> <p>Start Redis Server:    <pre><code># Using Docker\ndocker run -d -p 6379:6379 redis:alpine\n\n# Or install locally\nredis-server\n</code></pre></p> </li> </ol>"},{"location":"reference/authentication/#usage","title":"Usage","text":"<p>Revoke a Token: <pre><code>curl -X POST http://localhost:3000/auth/revoke \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer &lt;admin-token&gt;\" \\\n  -d '{\"token\": \"token-to-revoke\"}'\n</code></pre></p> <p>Response: <pre><code>{\n  \"message\": \"Token revoked successfully\"\n}\n</code></pre></p>"},{"location":"reference/authentication/#how-it-works","title":"How It Works","text":"<ul> <li>Revoked tokens are stored in Redis with their expiration timestamp</li> <li>Each token validation checks Redis for revocation status</li> <li>Revoked tokens are automatically cleaned up when they expire</li> <li>Works across multiple server instances for horizontal scaling</li> </ul>"},{"location":"reference/authentication/#security-benefits","title":"Security Benefits","text":"<ul> <li>Immediate invalidation of compromised tokens</li> <li>No database dependency for core authentication</li> <li>Automatic cleanup prevents Redis bloat</li> <li>Distributed revocation across server instances</li> </ul>"},{"location":"reference/authentication/#secret-generation","title":"Secret Generation","text":"<p>Generate cryptographically secure secrets:</p> <pre><code># Method 1: OpenSSL\nopenssl rand -base64 48\n\n# Method 2: Python\npython3 -c \"import secrets; print(secrets.token_urlsafe(48))\"\n\n# Method 3: Rust\ncargo install uuid-cli\nuuid -v4 | tr -d '-' | fold -w 48 | head -1\n</code></pre>"},{"location":"reference/authentication/#advanced-usage","title":"Advanced Usage","text":""},{"location":"reference/authentication/#custom-token-duration","title":"Custom Token Duration","text":"<pre><code>use semantic_browser::auth::Claims;\nuse chrono::Duration;\n\n// Create token valid for 1 hour\nlet claims = Claims::with_expiration(\n    \"user123\".to_string(),\n    Some(\"user\".to_string()),\n    Duration::hours(1)\n);\n</code></pre>"},{"location":"reference/authentication/#extracting-claims-in-handlers","title":"Extracting Claims in Handlers","text":"<pre><code>use axum::{Json, response::IntoResponse};\nuse semantic_browser::auth::AuthenticatedUser;\n\nasync fn protected_handler(\n    user: AuthenticatedUser\n) -&gt; impl IntoResponse {\n    let username = user.0.sub;\n    let role = user.0.role;\n\n    Json(format!(\"Hello, {}! Role: {:?}\", username, role))\n}\n</code></pre>"},{"location":"reference/authentication/#custom-authentication-middleware","title":"Custom Authentication Middleware","text":"<p>For more complex scenarios, you can create custom middleware:</p> <pre><code>use axum::middleware;\nuse semantic_browser::auth::validate_token;\n\nasync fn auth_middleware(\n    headers: HeaderMap,\n    request: Request,\n    next: Next,\n) -&gt; Response {\n    // Custom authentication logic\n    // ...\n}\n</code></pre>"},{"location":"reference/authentication/#error-handling","title":"Error Handling","text":""},{"location":"reference/authentication/#authentication-errors","title":"Authentication Errors","text":"<ul> <li><code>401 Unauthorized</code> - Missing or invalid token</li> <li>Missing <code>Authorization</code> header</li> <li>Invalid token format</li> <li>Expired token</li> <li>Invalid signature</li> </ul>"},{"location":"reference/authentication/#error-responses","title":"Error Responses","text":"<pre><code>{\n  \"error\": \"Missing or invalid Authorization header\"\n}\n</code></pre> <p>or</p> <pre><code>{\n  \"error\": \"Invalid or expired token\"\n}\n</code></pre>"},{"location":"reference/authentication/#development-testing","title":"Development &amp; Testing","text":""},{"location":"reference/authentication/#development-mode","title":"Development Mode","text":"<p>During local development you can leave <code>JWT_SECRET</code> unset; the server will log a warning and disable JWT validation entirely. This is convenient for quick manual testing, but remember that every endpoint becomes publicly accessible. Set a strong secret before exposing the service to anyone else.</p>"},{"location":"reference/authentication/#testing-tokens","title":"Testing Tokens","text":"<p>Generate test tokens programmatically:</p> <pre><code>#[cfg(test)]\nmod tests {\n    use semantic_browser::auth::{Claims, generate_token, JwtConfig};\n\n    #[test]\n    fn test_create_token() {\n        std::env::set_var(\"JWT_SECRET\", \"test-secret-key-32-chars-long\");\n        JwtConfig::init().unwrap();\n\n        let claims = Claims::new(\"testuser\".to_string(), None);\n        let token = generate_token(&amp;claims).unwrap();\n\n        assert!(!token.is_empty());\n    }\n}\n</code></pre>"},{"location":"reference/authentication/#disabling-authentication","title":"Disabling Authentication","text":"<p>To disable authentication in integration tests, simply clear the environment variable:</p> <pre><code>unset JWT_SECRET\n</code></pre> <p>The server will confirm the bypass with a warning log message. Remember to restore a valid secret for security-sensitive tests.</p>"},{"location":"reference/authentication/#migration-from-legacy-authentication","title":"Migration from Legacy Authentication","text":"<p>If migrating from the old hardcoded \"Bearer secret\" system:</p> <ol> <li>Update environment: Add <code>JWT_SECRET</code> to <code>.env</code></li> <li>Generate tokens: Use <code>/auth/token</code> endpoint</li> <li>Update clients: Replace hardcoded token with JWT</li> <li>Test thoroughly: Verify all integrations work</li> </ol>"},{"location":"reference/authentication/#troubleshooting","title":"Troubleshooting","text":""},{"location":"reference/authentication/#failed-to-initialize-jwt-config","title":"\"Failed to initialize JWT config\"","text":"<ul> <li>Ensure <code>JWT_SECRET</code> is set</li> <li>Verify secret is at least 32 characters</li> <li>Check for typos in environment variable name</li> </ul>"},{"location":"reference/authentication/#invalid-or-expired-token","title":"\"Invalid or expired token\"","text":"<ul> <li>Token may have expired (check <code>exp</code> claim)</li> <li>Token may be corrupted</li> <li>Secret may have changed since token was issued</li> <li>Generate a new token</li> </ul>"},{"location":"reference/authentication/#401-unauthorized","title":"\"401 Unauthorized\"","text":"<ul> <li>Verify <code>Authorization</code> header is present</li> <li>Ensure format is <code>Bearer &lt;token&gt;</code></li> <li>Check token hasn't expired</li> <li>Verify correct secret is configured</li> </ul>"},{"location":"reference/authentication/#further-reading","title":"Further Reading","text":"<ul> <li>JWT.io - JWT token debugger</li> <li>RFC 7519 - JWT specification</li> <li>OWASP JWT Cheat Sheet</li> <li>API Security Best Practices</li> </ul>"},{"location":"reference/changelog/","title":"Changelog","text":"<p>All notable changes to the Semantic Browser project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"reference/changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"reference/changelog/#added-2025-best-practices-implementation","title":"Added - 2025 Best Practices Implementation","text":""},{"location":"reference/changelog/#authentication-security","title":"Authentication &amp; Security","text":"<ul> <li>JWT Authentication System (<code>src/auth.rs</code>)</li> <li>Configurable JWT-based authentication replacing hardcoded tokens</li> <li><code>AuthenticatedUser</code> extractor for Axum routes</li> <li>Token generation with customizable expiration</li> <li>Role-based access control (RBAC) support</li> <li>Environment-based secret configuration via <code>JWT_SECRET</code></li> <li><code>/auth/token</code> endpoint for token generation</li> <li>Token Revocation with Redis (<code>src/auth.rs</code>)<ul> <li>Redis-backed token invalidation for immediate revocation</li> <li><code>TokenRevocationStore</code> with async Redis operations</li> <li><code>/auth/revoke</code> endpoint for admin token revocation</li> <li>Automatic cleanup of expired revoked tokens</li> <li>Optional <code>redis-integration</code> feature flag</li> </ul> </li> <li>Comprehensive test coverage for auth module</li> </ul>"},{"location":"reference/changelog/#machine-learning-ner","title":"Machine Learning &amp; NER","text":"<ul> <li>ONNX Model Integration (<code>src/annotator.rs</code>)</li> <li>tract-onnx support for production NER models</li> <li>Optimized model loading with <code>.into_optimized()</code></li> <li>Support for BERT, DistilBERT, and other NER architectures</li> <li>Automatic fallback to regex-based extraction</li> <li>Optional <code>onnx-integration</code> feature flag</li> <li>Detailed documentation for production tokenizer integration</li> </ul>"},{"location":"reference/changelog/#performance-benchmarking","title":"Performance &amp; Benchmarking","text":"<ul> <li>Comprehensive Benchmark Suite (<code>benches/parsing_benchmark.rs</code>)</li> <li>HTML parsing benchmarks (small/large documents)</li> <li>Knowledge Graph operations (insert/query/inference)</li> <li>JWT token generation/validation benchmarks</li> <li>LangGraph workflow performance testing</li> <li>Browser automation operation benchmarks</li> <li>ML inference performance measurement</li> <li>Criterion.rs integration for statistical analysis</li> </ul>"},{"location":"reference/changelog/#security-hardening","title":"Security Hardening","text":"<ul> <li>Seccomp Sandboxing (<code>src/security.rs</code>)</li> <li>Linux seccomp-bpf filtering for syscall restriction</li> <li>Whitelist approach for minimal attack surface</li> <li>Blocks dangerous syscalls (exec, socket, ptrace, etc.)</li> <li>Graceful fallback on error</li> <li>Optional <code>seccomp</code> feature flag (Linux only)</li> <li>Applied to HTML parsing operations</li> </ul>"},{"location":"reference/changelog/#observability-monitoring","title":"Observability &amp; Monitoring","text":"<ul> <li>Prometheus Metrics System (<code>src/observability/metrics.rs</code>)</li> <li>RED (Rate/Errors/Duration) metrics for all operations</li> <li>HTTP request metrics with endpoint and method breakdown</li> <li>Knowledge Graph operation metrics (insert/query/inference)</li> <li>Browser automation success/failure tracking</li> <li>ML inference performance and accuracy metrics</li> <li><code>/metrics</code> endpoint for Prometheus scraping</li> <li>Optional <code>observability</code> feature flag</li> <li>Integration with existing API middleware</li> <li>Distributed Tracing Support</li> <li>OpenTelemetry integration for request tracing</li> <li>Configurable tracing backends (Jaeger, Zipkin, Honeycomb)</li> <li>Automatic instrumentation of key operations</li> <li>Structured Logging</li> <li>Configurable log levels per module</li> <li>JSON logging support for production deployments</li> </ul>"},{"location":"reference/changelog/#dependencies","title":"Dependencies","text":"<ul> <li>Added <code>jsonwebtoken 9.3</code> for JWT support</li> <li>Added <code>chrono 0.4</code> for timestamp management</li> <li>Added <code>redis 0.25</code> (optional) for token revocation</li> <li>Added <code>prometheus 0.13</code> (optional) for metrics collection</li> <li>Added <code>lazy_static 1.4</code> for metrics registry</li> <li>Added <code>tract-onnx 0.21</code> (optional) for ONNX inference</li> <li>Added <code>seccompiler 0.5</code> (optional, Linux only) for sandboxing</li> <li>Added <code>tower-http 0.6</code> for middleware utilities</li> <li>Added <code>libc 0.2</code> for syscall constants</li> <li>Added <code>async-trait 0.1</code> for async trait support</li> <li>Added <code>criterion 0.5</code> for performance benchmarking</li> </ul>"},{"location":"reference/changelog/#changed","title":"Changed","text":""},{"location":"reference/changelog/#api-improvements","title":"API Improvements","text":"<ul> <li>Updated all API endpoints to use JWT authentication</li> <li>Removed hardcoded \"Bearer secret\" authentication</li> <li>Enhanced security logging for auth events</li> <li>Better error messages for authentication failures</li> </ul>"},{"location":"reference/changelog/#configuration","title":"Configuration","text":"<ul> <li>JWT secret now configured via <code>JWT_SECRET</code> environment variable</li> <li>NER model path via <code>NER_MODEL_PATH</code> environment variable</li> <li>Added warning for development secrets (&lt; 32 characters)</li> </ul>"},{"location":"reference/changelog/#code-quality","title":"Code Quality","text":"<ul> <li>Updated PyO3 to 0.27 (latest 2025 version)</li> <li>Fixed <code>py.eval()</code> usage for PyO3 0.27 compatibility</li> <li>Improved error handling across modules</li> <li>Enhanced tracing and logging throughout</li> </ul>"},{"location":"reference/changelog/#fixed","title":"Fixed","text":"<ul> <li>Removed unused imports in <code>external.rs</code></li> <li>Fixed StatusCode import in <code>api.rs</code></li> <li>Corrected tensor conversion for tract-onnx</li> <li>Platform-specific dependency configuration for seccompiler</li> </ul>"},{"location":"reference/changelog/#security","title":"Security","text":"<ul> <li>BREAKING: Authentication now requires valid JWT tokens</li> <li>Minimum JWT secret length enforced (32 characters)</li> <li>Syscall filtering reduces attack surface on Linux</li> <li>Input validation enhanced with security logging</li> </ul>"},{"location":"reference/changelog/#documentation","title":"Documentation","text":"<ul> <li>Added comprehensive inline documentation</li> <li>Best practices 2025 annotations throughout codebase</li> <li>Detailed implementation notes for production use</li> <li>Security considerations documented</li> </ul>"},{"location":"reference/changelog/#migration-guide","title":"Migration Guide","text":""},{"location":"reference/changelog/#upgrading-from-previous-versions","title":"Upgrading from Previous Versions","text":""},{"location":"reference/changelog/#authentication-changes","title":"Authentication Changes","text":"<p>Before: <pre><code>curl -H \"Authorization: Bearer secret\" http://localhost:3000/parse\n</code></pre></p> <p>After: <pre><code># 1. Generate a token\ncurl -X POST http://localhost:3000/auth/token \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\": \"your-user\", \"role\": \"admin\"}'\n\n# 2. Use the token\ncurl -H \"Authorization: Bearer &lt;your-jwt-token&gt;\" http://localhost:3000/parse\n</code></pre></p>"},{"location":"reference/changelog/#environment-variables","title":"Environment Variables","text":"<p>Add to your <code>.env</code> file: <pre><code># Required - minimum 32 characters\nJWT_SECRET=your-super-secret-jwt-key-here-make-it-long-and-random\n\n# Optional\nNER_MODEL_PATH=/path/to/your/ner-model.onnx\nKG_PERSIST_PATH=/path/to/knowledge-graph-storage\n</code></pre></p>"},{"location":"reference/changelog/#feature-flags","title":"Feature Flags","text":"<pre><code># Enable ONNX support\ncargo build --features onnx-integration\n\n# Enable seccomp (Linux only)\ncargo build --features seccomp\n\n# All features\ncargo build --all-features\n</code></pre>"},{"location":"reference/changelog/#010-initial-release","title":"[0.1.0] - Initial Release","text":""},{"location":"reference/changelog/#added","title":"Added","text":"<ul> <li>HTML5 parsing with semantic extraction</li> <li>Knowledge graph with SPARQL support</li> <li>REST API with basic authentication</li> <li>Named Entity Recognition (regex-based)</li> <li>External integrations framework</li> <li>Docker support</li> <li>MCP server implementation</li> </ul> <p>Note: For detailed API documentation, see docs/api/README.md</p>"},{"location":"reference/code-of-conduct/","title":"Code of Conduct","text":""},{"location":"reference/code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"reference/code-of-conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes</li> <li>Focusing on what is best not just for us as individuals, but for the overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"reference/code-of-conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"reference/code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official email address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"reference/code-of-conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"reference/code-of-conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"reference/code-of-conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"reference/code-of-conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"reference/code-of-conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"reference/code-of-conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"reference/code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"reference/configuration/","title":"Configuration Files","text":"<p>This directory contains configuration files and templates for the Semantic Browser project.</p>"},{"location":"reference/configuration/#environment-configuration","title":"Environment Configuration","text":"<p>The main configuration is handled through environment variables. Copy <code>.env.example</code> to <code>.env</code> and customize as needed:</p> <pre><code>cp .env.example .env\n# Edit .env with your settings\nnano .env\n</code></pre>"},{"location":"reference/configuration/#key-configuration-options","title":"Key Configuration Options","text":"<ul> <li>Logging: <code>RUST_LOG</code> - Set logging level (trace, debug, info, warn, error)</li> <li>Knowledge Graph: <code>KG_PERSIST_PATH</code> - Path for persistent KG storage</li> <li>ML Models: <code>NER_MODEL_PATH</code>, <code>KG_INFERENCE_MODEL_PATH</code> - Paths to ONNX models</li> <li>API Settings: Server host/port, authentication secrets, rate limiting</li> <li>Docker: Resource limits and compose settings</li> </ul> <p>See <code>.env.example</code> (in the project root) for the complete list of available configuration options with detailed comments.</p>"},{"location":"reference/configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"reference/configuration/#rate-limiting-configuration","title":"Rate Limiting Configuration","text":"<p>The Semantic Browser implements sophisticated rate limiting to protect against abuse while allowing legitimate usage.</p>"},{"location":"reference/configuration/#basic-rate-limiting","title":"Basic Rate Limiting","text":"<pre><code># Maximum requests per minute per IP address\nRATE_LIMIT_REQUESTS_PER_MINUTE=60\n\n# Burst size - additional requests allowed beyond the rate limit\nRATE_LIMIT_BURST_SIZE=10\n</code></pre>"},{"location":"reference/configuration/#how-rate-limiting-works","title":"How Rate Limiting Works","text":"<ul> <li>Token Bucket Algorithm: Each IP gets a bucket that fills at a constant rate</li> <li>Burst Handling: Extra capacity allows for legitimate traffic spikes</li> <li>IP Detection: Supports <code>X-Forwarded-For</code>, <code>X-Real-IP</code> headers for proxy setups</li> <li>Response: Returns <code>429 Too Many Requests</code> when limit exceeded</li> </ul>"},{"location":"reference/configuration/#production-tuning","title":"Production Tuning","text":"<pre><code># High-traffic production\nRATE_LIMIT_REQUESTS_PER_MINUTE=1000\nRATE_LIMIT_BURST_SIZE=100\n\n# API gateway behind load balancer\nRATE_LIMIT_REQUESTS_PER_MINUTE=5000\nRATE_LIMIT_BURST_SIZE=500\n</code></pre>"},{"location":"reference/configuration/#browser-automation-configuration","title":"Browser Automation Configuration","text":"<p>Browser automation provides JavaScript execution and dynamic content access through headless Chromium.</p>"},{"location":"reference/configuration/#basic-browser-setup","title":"Basic Browser Setup","text":"<pre><code># Enable browser automation\ncargo build --features browser-automation\n\n# Auto-detect Chromium (recommended)\n# CHROMIUM_PATH=/usr/bin/chromium\n\n# Run headless\nBROWSER_HEADLESS=true\n</code></pre>"},{"location":"reference/configuration/#resource-blocking","title":"Resource Blocking","text":"<pre><code># Block ads and trackers for faster, cleaner browsing\nBLOCK_ADS=true\n\n# Block images for text-only extraction\nBLOCK_IMAGES=false\n\n# Block background network activity\n# (automatically enabled when BLOCK_ADS=true)\n</code></pre>"},{"location":"reference/configuration/#performance-tuning","title":"Performance Tuning","text":"<pre><code># Navigation timeout in seconds\nBROWSER_TIMEOUT_SECS=30\n\n# Maximum concurrent browser tabs\nBROWSER_POOL_SIZE=2\n\n# User data directory for persistent sessions\nCHROMIUMOXIDE_USER_DATA_DIR=/tmp/semantic-browser/profile\n</code></pre>"},{"location":"reference/configuration/#chromium-path-configuration","title":"Chromium Path Configuration","text":"<pre><code># Linux\nCHROMIUM_PATH=/usr/bin/chromium\n# or\nCHROMIUM_PATH=/usr/bin/chromium-browser\n\n# macOS\nCHROMIUM_PATH=/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome\n\n# Windows\nCHROMIUM_PATH=C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\n</code></pre>"},{"location":"reference/configuration/#pool-management","title":"Pool Management","text":"<p>The browser pool automatically manages Chromium instances:</p> <ul> <li>Warm Pool: Pre-warmed browsers reduce startup latency</li> <li>Concurrent Limits: <code>BROWSER_POOL_SIZE</code> controls resource usage</li> <li>Automatic Cleanup: Failed browsers are replaced automatically</li> <li>Session Isolation: Each request gets a clean browser context</li> </ul>"},{"location":"reference/configuration/#knowledge-graph-persistence","title":"Knowledge Graph Persistence","text":"<pre><code># Enable persistence (recommended for production)\nKG_PERSIST_PATH=./data/kg\n\n# Directory structure created automatically:\n# ./data/kg/\n# \u251c\u2500\u2500 current-0/\n# \u251c\u2500\u2500 current-1/\n# \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"reference/configuration/#ml-model-configuration","title":"ML Model Configuration","text":"<pre><code># NER model (optional)\nNER_MODEL_PATH=./models/ner-model.onnx\nNER_TOKENIZER_PATH=./models/ner-tokenizer.json\nNER_LABELS_PATH=./models/ner-labels.txt\n\n# KG inference model (optional)\nKG_INFERENCE_MODEL_PATH=./models/kg-inference-model.onnx\nKG_EMBEDDING_TYPE=TransE  # TransE, DistMult, ComplEx\nKG_ENTITY_MAPPING_PATH=./models/kg-entities.json\nKG_RELATION_MAPPING_PATH=./models/kg-relations.json\n\n# KG inference parameters\nKG_INFERENCE_CONFIDENCE_THRESHOLD=0.8\nKG_INFERENCE_TOP_K=10\nKG_INFERENCE_MAX_INSERTS=100\nKG_INFERENCE_SAMPLE_SIZE=1000\n</code></pre>"},{"location":"reference/configuration/#logging-configuration","title":"Logging Configuration","text":"<pre><code># Global log level\nRUST_LOG=info\n\n# Module-specific logging\nRUST_LOG=semantic_browser=debug,semantic_browser::api=trace,tract=info\n\n# Production logging\nRUST_LOG=warn\n</code></pre>"},{"location":"reference/configuration/#security-configuration","title":"Security Configuration","text":"<pre><code># Enable strict input validation\nSECURITY_STRICT_MODE=true\n\n# Maximum HTML input size (bytes)\nMAX_HTML_SIZE=10485760  # 10MB\n\n# Maximum SPARQL query length\nMAX_QUERY_LENGTH=10000  # 10KB\n</code></pre>"},{"location":"reference/configuration/#observability-configuration","title":"Observability Configuration","text":"<pre><code># Enable Prometheus metrics\nPROMETHEUS_METRICS=true\n\n# Metrics endpoint port\nMETRICS_PORT=9090\n\n# OpenTelemetry tracing\nOTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\nOTEL_SERVICE_NAME=semantic-browser\nOTEL_TRACES_EXPORTER=otlp\n</code></pre>"},{"location":"reference/configuration/#docker-configuration","title":"Docker Configuration","text":"<p>Docker-related configuration is handled through: - <code>docker-compose.yml</code> - Production/development services - <code>docker-compose.test.yml</code> - Testing environment - <code>Dockerfile</code> - Main application container - <code>Dockerfile.test</code> - Test container</p>"},{"location":"reference/configuration/#security-notes","title":"Security Notes","text":"<ul> <li>Never commit <code>.env</code> files to version control</li> <li>Use strong, unique secrets for <code>API_SECRET</code> in production</li> <li>Review rate limiting settings for your deployment environment</li> </ul>"},{"location":"reference/ml-models/","title":"Machine Learning Models","text":"<p>This directory contains machine learning models used by the Semantic Browser for enhanced semantic processing.</p>"},{"location":"reference/ml-models/#overview","title":"Overview","text":""},{"location":"reference/ml-models/#supported-models","title":"Supported Models","text":""},{"location":"reference/ml-models/#named-entity-recognition-ner","title":"Named Entity Recognition (NER)","text":"<ul> <li>Purpose: Identifies and classifies named entities in text (persons, organizations, locations, etc.)</li> <li>Format: ONNX models</li> <li>Configuration: Set <code>NER_MODEL_PATH</code> in <code>.env</code></li> <li>Fallback: Regex-based extraction if no model provided</li> </ul>"},{"location":"reference/ml-models/#knowledge-graph-inference","title":"Knowledge Graph Inference","text":"<ul> <li>Purpose: Performs semantic inference on RDF triples to discover new relationships</li> <li>Format: ONNX models</li> <li>Configuration: Set <code>KG_INFERENCE_MODEL_PATH</code> in <code>.env</code></li> <li>Fallback: Rule-based inference if no model provided</li> </ul>"},{"location":"reference/ml-models/#model-requirements","title":"Model Requirements","text":"<p>Models should be in ONNX format for cross-platform compatibility. The system uses the <code>tract-core</code> library for inference.</p>"},{"location":"reference/ml-models/#adding-models","title":"Adding Models","text":"<ol> <li>Place ONNX model files in this directory</li> <li>Update <code>.env</code> with the appropriate <code>*_MODEL_PATH</code> variables</li> <li>Restart the application to load the models</li> </ol>"},{"location":"reference/ml-models/#performance-notes","title":"Performance Notes","text":"<ul> <li>Models are loaded at startup for optimal performance</li> <li>Large models may increase memory usage and startup time</li> <li>GPU acceleration may be supported in future versions</li> </ul>"},{"location":"reference/ml-models/#current-status","title":"Current Status","text":"<p>This is a placeholder directory. ML model integration is implemented but no specific models are included in the repository. Users can add their own ONNX models or use the built-in fallback mechanisms.</p>"},{"location":"reference/ml-models/#using-real-onnx-models","title":"Using Real ONNX Models","text":"<p>This guide explains how to use real ONNX models for Named Entity Recognition (NER) and Knowledge Graph (KG) inference in the Semantic Browser.</p>"},{"location":"reference/ml-models/#prerequisites","title":"Prerequisites","text":"<ul> <li>ONNX-compatible ML models</li> <li>Hugging Face tokenizers (for NER)</li> <li>Model optimization tools</li> </ul>"},{"location":"reference/ml-models/#ner-models","title":"NER Models","text":""},{"location":"reference/ml-models/#supported-architectures","title":"Supported Architectures","text":"<p>The Semantic Browser supports BERT, DistilBERT, and other transformer-based NER models exported to ONNX format.</p>"},{"location":"reference/ml-models/#model-preparation","title":"Model Preparation","text":"<ol> <li> <p>Export from Hugging Face: <pre><code>from transformers import AutoTokenizer, AutoModelForTokenClassification\nfrom transformers.onnx import export\nimport torch\n\n# Load model and tokenizer\nmodel_name = \"dbmdz/bert-large-cased-finetuned-conll03-english\"\ntokenizer = AutoTokenizer.from_pretrained(model_name)\nmodel = AutoModelForTokenClassification.from_pretrained(model_name)\n\n# Export to ONNX\nexport(\n    preprocessor=tokenizer,\n    model=model,\n    config=model.config,\n    opset=13,\n    output=\"ner-model.onnx\"\n)\n</code></pre></p> </li> <li> <p>Optimize the model: <pre><code># Use onnxruntime-tools for optimization\npython -m onnxruntime_tools.optimizer_cli \\\n  --input ner-model.onnx \\\n  --output ner-model-opt.onnx \\\n  --optimization_level 2\n</code></pre></p> </li> </ol>"},{"location":"reference/ml-models/#configuration","title":"Configuration","text":"<p>Set environment variables:</p> <pre><code>export NER_MODEL_PATH=/path/to/ner-model.onnx\nexport NER_TOKENIZER_PATH=/path/to/tokenizer.json\nexport NER_LABELS_PATH=/path/to/labels.json\n</code></pre>"},{"location":"reference/ml-models/#labels-configuration","title":"Labels Configuration","text":"<p>Create <code>labels.json</code> mapping model outputs to entity types:</p> <pre><code>{\n  \"O\": \"O\",\n  \"B-PER\": \"PERSON\",\n  \"I-PER\": \"PERSON\",\n  \"B-ORG\": \"ORGANIZATION\",\n  \"I-ORG\": \"ORGANIZATION\",\n  \"B-LOC\": \"LOCATION\",\n  \"I-LOC\": \"LOCATION\",\n  \"B-MISC\": \"MISC\",\n  \"I-MISC\": \"MISC\"\n}\n</code></pre>"},{"location":"reference/ml-models/#kg-inference-models","title":"KG Inference Models","text":""},{"location":"reference/ml-models/#transe-model","title":"TransE Model","text":"<p>Translation-based embedding model for link prediction.</p> <p>Training with PyTorch: <pre><code>import torch\nimport torch.nn as nn\n\nclass TransE(nn.Module):\n    def __init__(self, num_entities, num_relations, embedding_dim):\n        super().__init__()\n        self.entity_embeddings = nn.Embedding(num_entities, embedding_dim)\n        self.relation_embeddings = nn.Embedding(num_relations, embedding_dim)\n\n    def forward(self, head, relation, tail):\n        head_emb = self.entity_embeddings(head)\n        rel_emb = self.relation_embeddings(relation)\n        tail_emb = self.entity_embeddings(tail)\n\n        # TransE scoring: -||head + relation - tail||\n        score = -torch.norm(head_emb + rel_emb - tail_emb, p=2, dim=-1)\n        return score\n</code></pre></p>"},{"location":"reference/ml-models/#distmult-model","title":"DistMult Model","text":"<p>Bilinear diagonal model for knowledge graph completion.</p> <pre><code>class DistMult(nn.Module):\n    def __init__(self, num_entities, num_relations, embedding_dim):\n        super().__init__()\n        self.entity_embeddings = nn.Embedding(num_entities, embedding_dim)\n        self.relation_embeddings = nn.Embedding(num_relations, embedding_dim)\n\n    def forward(self, head, relation, tail):\n        head_emb = self.entity_embeddings(head)\n        rel_emb = self.relation_embeddings(relation)\n        tail_emb = self.entity_embeddings(tail)\n\n        # DistMult scoring: sum(head * relation * tail)\n        score = torch.sum(head_emb * rel_emb * tail_emb, dim=-1)\n        return score\n</code></pre>"},{"location":"reference/ml-models/#complex-model","title":"ComplEx Model","text":"<p>Complex-valued embeddings for better expressiveness.</p> <pre><code>class ComplEx(nn.Module):\n    def __init__(self, num_entities, num_relations, embedding_dim):\n        super().__init__()\n        # embedding_dim should be even for real/imaginary split\n        self.entity_embeddings = nn.Embedding(num_entities, embedding_dim * 2)\n        self.relation_embeddings = nn.Embedding(num_relations, embedding_dim * 2)\n\n    def forward(self, head, relation, tail):\n        head_emb = self.entity_embeddings(head)\n        rel_emb = self.relation_embeddings(relation)\n        tail_emb = self.entity_embeddings(tail)\n\n        # Split into real and imaginary parts\n        head_real, head_imag = head_emb.chunk(2, dim=-1)\n        rel_real, rel_imag = rel_emb.chunk(2, dim=-1)\n        tail_real, tail_imag = tail_emb.chunk(2, dim=-1)\n\n        # ComplEx scoring\n        real_part = head_real * rel_real * tail_real + head_imag * rel_imag * tail_real\n        imag_part = head_real * rel_imag * tail_imag + head_imag * rel_real * tail_imag\n        score = real_part + imag_part\n        return torch.sum(score, dim=-1)\n</code></pre>"},{"location":"reference/ml-models/#export-to-onnx","title":"Export to ONNX","text":"<pre><code>import torch.onnx\n\n# Example for TransE\nmodel = TransE(num_entities=1000, num_relations=100, embedding_dim=200)\ndummy_input = (torch.randint(0, 1000, (1,)), torch.randint(0, 100, (1,)), torch.randint(0, 1000, (1,)))\n\ntorch.onnx.export(\n    model,\n    dummy_input,\n    \"kg-model.onnx\",\n    input_names=['head', 'relation', 'tail'],\n    output_names=['score'],\n    opset_version=11\n)\n</code></pre>"},{"location":"reference/ml-models/#configuration_1","title":"Configuration","text":"<pre><code>export KG_INFERENCE_MODEL_PATH=/path/to/kg-model.onnx\nexport KG_ENTITY_MAPPING_PATH=/path/to/entity_ids.txt\nexport KG_RELATION_MAPPING_PATH=/path/to/relation_ids.txt\nexport KG_EMBEDDING_TYPE=TransE\nexport KG_INFERENCE_CONFIDENCE_THRESHOLD=0.8\nexport KG_INFERENCE_TOP_K=10\n</code></pre>"},{"location":"reference/ml-models/#entityrelation-mappings","title":"Entity/Relation Mappings","text":"<p>Create <code>entity_ids.txt</code> and <code>relation_ids.txt</code> with ordered mappings:</p> <pre><code># Entity IDs (one per line)\nhttp://example.org/Person\nhttp://example.org/Organization\nhttp://example.org/Location\n...\n\n# Relation IDs\nhttp://example.org/worksFor\nhttp://example.org/locatedIn\nhttp://example.org/knows\n...\n</code></pre>"},{"location":"reference/ml-models/#integration-in-semantic-browser","title":"Integration in Semantic Browser","text":""},{"location":"reference/ml-models/#automatic-kg-inference","title":"Automatic KG Inference","text":"<p>When KG inference is enabled, the Semantic Browser automatically discovers new relationships:</p> <ol> <li>Entity Extraction: Parse HTML to extract entities using NER</li> <li>Triple Insertion: Store extracted triples in the Knowledge Graph</li> <li>Inference: Use ML models to predict missing relationships</li> <li>Confidence Filtering: Only add triples above confidence threshold</li> <li>SPARQL Queries: Query both explicit and inferred knowledge</li> </ol>"},{"location":"reference/ml-models/#inference-workflow","title":"Inference Workflow","text":"<pre><code>// Example: Inferring worksFor relationships\nuse semantic_browser::kg::KnowledgeGraph;\nuse semantic_browser::ml::inference::LinkPredictor;\n\nlet kg = KnowledgeGraph::new();\n// ... populate KG with explicit triples ...\n\nlet predictor = LinkPredictor::new(\"path/to/kg-model.onnx\").await?;\nlet inferences = predictor.predict_links(&amp;kg, confidence_threshold: 0.8).await?;\n\n// Add inferred triples to KG\nfor inference in inferences {\n    kg.insert(&amp;inference.head, &amp;inference.relation, &amp;inference.tail)?;\n}\n</code></pre>"},{"location":"reference/ml-models/#supported-inference-types","title":"Supported Inference Types","text":"<ul> <li>Link Prediction: Predict missing relationships between known entities</li> <li>Entity Similarity: Find similar entities for clustering</li> <li>Relation Discovery: Identify patterns in relationship data</li> <li>Path Finding: Discover multi-hop relationships</li> </ul>"},{"location":"reference/ml-models/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Batch Inference: Process multiple predictions in parallel</li> <li>Caching: Cache frequent inference results</li> <li>Incremental Updates: Only re-infer when KG changes significantly</li> <li>Resource Limits: Configure <code>KG_INFERENCE_TOP_K</code> to limit computation</li> </ul>"},{"location":"reference/ml-models/#monitoring-inference","title":"Monitoring Inference","text":"<p>Enable detailed logging for inference operations:</p> <pre><code>RUST_LOG=semantic_browser::ml::inference=debug\n</code></pre> <p>Metrics available when observability is enabled: - <code>semantic_browser_ml_inference_total{model_type=\"kg_inference\"}</code> - <code>semantic_browser_ml_inference_duration_seconds{model_type=\"kg_inference\"}</code></p>"},{"location":"reference/ml-models/#performance-optimization","title":"Performance Optimization","text":""},{"location":"reference/ml-models/#model-optimization","title":"Model Optimization","text":"<ol> <li> <p>ONNX Runtime Optimization: <pre><code># Use onnxruntime-tools\npython -c \"\nimport onnxruntime as ort\nfrom onnxruntime_tools import optimizer\n\noptimized_model = optimizer.optimize_model(\n    'model.onnx',\n    'model-opt.onnx',\n    optimization_level=ort.GraphOptimizationLevel.ORT_ENABLE_ALL\n)\n\"\n</code></pre></p> </li> <li> <p>Quantization (optional): <pre><code>from onnxruntime.quantization import quantize_dynamic, QuantType\n\nquantize_dynamic(\n    model_input='model.onnx',\n    model_output='model-quant.onnx',\n    weight_type=QuantType.QInt8\n)\n</code></pre></p> </li> </ol>"},{"location":"reference/ml-models/#memory-management","title":"Memory Management","text":"<ul> <li>Use appropriate batch sizes</li> <li>Enable model caching for repeated inferences</li> <li>Monitor memory usage with <code>RUST_LOG=debug</code></li> </ul>"},{"location":"reference/ml-models/#troubleshooting","title":"Troubleshooting","text":""},{"location":"reference/ml-models/#common-issues","title":"Common Issues","text":"<ol> <li>Model Loading Fails:</li> <li>Check ONNX opset compatibility</li> <li>Verify input/output tensor shapes</li> <li> <p>Ensure model is exported correctly</p> </li> <li> <p>Tokenizer Mismatch:</p> </li> <li>Use the same tokenizer that was used for training</li> <li> <p>Check tokenization consistency</p> </li> <li> <p>Poor Performance:</p> </li> <li>Optimize models before deployment</li> <li>Use appropriate batch sizes</li> <li>Consider GPU acceleration if available</li> </ol>"},{"location":"reference/ml-models/#debugging","title":"Debugging","text":"<p>Enable debug logging: <pre><code>export RUST_LOG=semantic_browser=debug,tract=info\n</code></pre></p> <p>Check model information: <pre><code># Use netron or onnx-runtime tools\npython -c \"\nimport onnxruntime as ort\nsession = ort.InferenceSession('model.onnx')\nprint('Inputs:', [inp.name for inp in session.get_inputs()])\nprint('Outputs:', [out.name for out in session.get_outputs()])\n\"\n</code></pre></p>"},{"location":"reference/ml-models/#example-workflow","title":"Example Workflow","text":"<ol> <li>Prepare your trained models</li> <li>Export to ONNX format</li> <li>Optimize for inference</li> <li>Configure environment variables</li> <li>Test with sample data</li> <li>Deploy to production</li> </ol>"},{"location":"reference/ml-models/#references","title":"References","text":"<ul> <li>Hugging Face ONNX Export</li> <li>ONNX Runtime Optimization</li> <li>Knowledge Graph Embeddings Survey</li> </ul>"},{"location":"reference/ml-onnx-guide/","title":"ML/ONNX Integration Guide - Semantic Browser","text":""},{"location":"reference/ml-onnx-guide/#overview","title":"Overview","text":"<p>This guide provides practical examples for using machine learning models with the Semantic Browser project. The project supports ONNX models for two main tasks:</p> <ol> <li>Named Entity Recognition (NER) - Extract entities from HTML content</li> <li>Knowledge Graph Inference - Predict missing links in the knowledge graph</li> </ol>"},{"location":"reference/ml-onnx-guide/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Prerequisites</li> <li>Named Entity Recognition (NER)</li> <li>Knowledge Graph Inference</li> <li>Model Training and Export</li> <li>Production Deployment</li> <li>Troubleshooting</li> </ul>"},{"location":"reference/ml-onnx-guide/#prerequisites","title":"Prerequisites","text":""},{"location":"reference/ml-onnx-guide/#build-with-onnx-support","title":"Build with ONNX Support","text":"<pre><code># Build with ONNX integration\ncargo build --features onnx-integration\n\n# Or run with ONNX features\ncargo run --features onnx-integration\n</code></pre>"},{"location":"reference/ml-onnx-guide/#install-python-dependencies-for-model-preparation","title":"Install Python Dependencies (for model preparation)","text":"<pre><code>pip install torch transformers onnx onnxruntime optimum\n</code></pre>"},{"location":"reference/ml-onnx-guide/#named-entity-recognition-ner","title":"Named Entity Recognition (NER)","text":""},{"location":"reference/ml-onnx-guide/#1-obtaining-pre-trained-ner-models","title":"1. Obtaining Pre-trained NER Models","text":""},{"location":"reference/ml-onnx-guide/#option-a-use-pre-exported-onnx-models","title":"Option A: Use Pre-exported ONNX Models","text":"<p>Download from Hugging Face Model Hub:</p> <pre><code># DistilBERT NER model (recommended for production - fast and accurate)\nwget https://huggingface.co/Xenova/distilbert-base-NER/resolve/main/onnx/model.onnx -O ner_model.onnx\n\n# Or use BERT-base NER (more accurate, slower)\n# This requires exporting from PyTorch (see Option B)\n</code></pre>"},{"location":"reference/ml-onnx-guide/#option-b-export-your-own-model-from-pytorch","title":"Option B: Export Your Own Model from PyTorch","text":"<pre><code># export_ner_model.py\nimport torch\nfrom transformers import AutoTokenizer, AutoModelForTokenClassification\nimport os\n\nmodel_name = \"dslim/bert-base-NER\"  # or \"dbmdz/bert-large-cased-finetuned-conll03-english\"\ntokenizer = AutoTokenizer.from_pretrained(model_name)\nmodel = AutoModelForTokenClassification.from_pretrained(model_name)\n\n# Prepare dummy input for export\ndummy_text = \"John works at Google in New York\"\ninputs = tokenizer(dummy_text, return_tensors=\"pt\")\n\n# Export to ONNX\ntorch.onnx.export(\n    model,\n    (inputs[\"input_ids\"], inputs[\"attention_mask\"]),\n    \"ner_model.onnx\",\n    input_names=[\"input_ids\", \"attention_mask\"],\n    output_names=[\"logits\"],\n    dynamic_axes={\n        \"input_ids\": {0: \"batch\", 1: \"sequence\"},\n        \"attention_mask\": {0: \"batch\", 1: \"sequence\"},\n    },\n    opset_version=14,\n)\n\nprint(\"NER model exported to ner_model.onnx\")\n</code></pre>"},{"location":"reference/ml-onnx-guide/#2-using-ner-model-with-semantic-browser","title":"2. Using NER Model with Semantic Browser","text":"<p>Set the environment variable to enable NER:</p> <pre><code>export NER_MODEL_PATH=/path/to/ner_model.onnx\n\n# Run the server\ncargo run --features onnx-integration\n</code></pre>"},{"location":"reference/ml-onnx-guide/#3-api-usage-example","title":"3. API Usage Example","text":"<pre><code># Generate authentication token\nTOKEN=$(curl -X POST http://localhost:3000/auth/token \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\": \"user\", \"role\": \"user\"}' | jq -r '.token')\n\n# Parse HTML with NER\ncurl -X POST http://localhost:3000/parse \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -d '{\n    \"html\": \"&lt;html&gt;&lt;body&gt;John Smith works at Microsoft in Seattle.&lt;/body&gt;&lt;/html&gt;\"\n  }'\n\n# Response will include extracted entities:\n# {\n#   \"title\": null,\n#   \"entities\": [\"John Smith\", \"Microsoft\", \"Seattle\"]\n# }\n</code></pre>"},{"location":"reference/ml-onnx-guide/#knowledge-graph-inference","title":"Knowledge Graph Inference","text":""},{"location":"reference/ml-onnx-guide/#1-understanding-kg-embeddings","title":"1. Understanding KG Embeddings","text":"<p>Knowledge Graph inference uses embedding models to predict missing links. Supported architectures:</p> <ul> <li>TransE: Translational embeddings (h + r \u2248 t)</li> <li>DistMult: Bilinear diagonal model</li> <li>ComplEx: Complex embeddings</li> </ul>"},{"location":"reference/ml-onnx-guide/#2-training-a-kg-embedding-model","title":"2. Training a KG Embedding Model","text":""},{"location":"reference/ml-onnx-guide/#using-pykeen-recommended","title":"Using PyKEEN (Recommended)","text":"<pre><code># train_kg_embeddings.py\nimport torch\nfrom pykeen.pipeline import pipeline\nfrom pykeen.triples import TriplesFactory\n\n# Prepare your data (subject, predicate, object triples)\ntriples = [\n    (\"Person1\", \"worksAt\", \"Company1\"),\n    (\"Person1\", \"livesIn\", \"City1\"),\n    (\"Company1\", \"locatedIn\", \"City1\"),\n    # ... more triples\n]\n\n# Create triples factory\ntf = TriplesFactory.from_labeled_triples(triples)\n\n# Train TransE model\nresult = pipeline(\n    training=tf,\n    model='TransE',\n    training_loop='sLCWA',\n    epochs=100,\n    dimensions=50,\n    random_seed=42,\n)\n\n# Export to ONNX\nmodel = result.model\n\n# Create example input\nbatch_size = 1\nh = torch.tensor([[0]], dtype=torch.long)  # head entity\nr = torch.tensor([[0]], dtype=torch.long)  # relation\nt = torch.tensor([[0]], dtype=torch.long)  # tail entity\n\n# Export score function\nclass KGEmbeddingScorer(torch.nn.Module):\n    def __init__(self, model):\n        super().__init__()\n        self.model = model\n\n    def forward(self, h, r, t):\n        # Implement scoring function\n        return self.model.score_hrt(h, r, t)\n\nscorer = KGEmbeddingScorer(model)\ntorch.onnx.export(\n    scorer,\n    (h, r, t),\n    \"kg_embedding_model.onnx\",\n    input_names=[\"head\", \"relation\", \"tail\"],\n    output_names=[\"score\"],\n    dynamic_axes={\"head\": {0: \"batch\"}, \"relation\": {0: \"batch\"}, \"tail\": {0: \"batch\"}},\n    opset_version=14,\n)\n\nprint(\"KG embedding model exported!\")\n</code></pre>"},{"location":"reference/ml-onnx-guide/#using-torchkge-alternative","title":"Using TorchKGE (Alternative)","text":"<pre><code># train_with_torchkge.py\nimport torch\nfrom torchkge.models import TransEModel\nfrom torchkge.utils import MarginLoss, DataLoader\n\n# Prepare your knowledge graph\n# kg is a KnowledgeGraph object with entities and relations\n\nmodel = TransEModel(emb_dim=50, n_entities=kg.n_ent, n_relations=kg.n_rel)\ncriterion = MarginLoss(margin=1.0)\noptimizer = torch.optim.Adam(model.parameters(), lr=0.01)\n\n# Training loop\nfor epoch in range(100):\n    dataloader = DataLoader(kg, batch_size=32)\n    for batch in dataloader:\n        h, t, r = batch\n        pos_scores = model(h, t, r)\n\n        # Generate negative samples\n        h_neg, t_neg = dataloader.get_negatives(h, t, r)\n        neg_scores = model(h_neg, t_neg, r)\n\n        loss = criterion(pos_scores, neg_scores)\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n\n# Export model (simplified scorer)\ntorch.onnx.export(\n    model,\n    (torch.tensor([[0, 0, 0]], dtype=torch.float32),),\n    \"kg_model.onnx\",\n    opset_version=14,\n)\n</code></pre>"},{"location":"reference/ml-onnx-guide/#3-using-kg-inference","title":"3. Using KG Inference","text":"<pre><code># Set model path\nexport KG_INFERENCE_MODEL_PATH=/path/to/kg_embedding_model.onnx\n\n# Optionally enable persistence\nexport KG_PERSIST_PATH=/path/to/kg_storage\n\n# Run server with ONNX features\ncargo run --features onnx-integration\n</code></pre>"},{"location":"reference/ml-onnx-guide/#4-triggering-inference-via-api","title":"4. Triggering Inference via API","text":"<pre><code># Insert triples into KG\ncurl -X POST http://localhost:3000/query \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"query\": \"INSERT DATA { &lt;http://ex.org/Alice&gt; &lt;http://ex.org/worksAt&gt; &lt;http://ex.org/Google&gt; }\"\n  }'\n\n# Run inference (this happens automatically when configured)\n# Or trigger manually via SPARQL if you've added a custom endpoint\n</code></pre>"},{"location":"reference/ml-onnx-guide/#model-training-and-export","title":"Model Training and Export","text":""},{"location":"reference/ml-onnx-guide/#complete-ner-pipeline","title":"Complete NER Pipeline","text":"<pre><code># complete_ner_pipeline.py\nfrom transformers import (\n    AutoTokenizer,\n    AutoModelForTokenClassification,\n    Trainer,\n    TrainingArguments,\n)\nfrom datasets import load_dataset\nimport torch\n\n# 1. Load dataset (e.g., CoNLL-2003)\ndataset = load_dataset(\"conll2003\")\n\n# 2. Load pre-trained model\nmodel_name = \"distilbert-base-uncased\"\ntokenizer = AutoTokenizer.from_pretrained(model_name)\nmodel = AutoModelForTokenClassification.from_pretrained(\n    model_name,\n    num_labels=9,  # B-PER, I-PER, B-ORG, I-ORG, B-LOC, I-LOC, B-MISC, I-MISC, O\n)\n\n# 3. Tokenize dataset\ndef tokenize_and_align_labels(examples):\n    tokenized_inputs = tokenizer(\n        examples[\"tokens\"],\n        truncation=True,\n        is_split_into_words=True,\n        padding=\"max_length\",\n        max_length=128,\n    )\n\n    labels = []\n    for i, label in enumerate(examples[\"ner_tags\"]):\n        word_ids = tokenized_inputs.word_ids(batch_index=i)\n        label_ids = []\n        previous_word_idx = None\n        for word_idx in word_ids:\n            if word_idx is None:\n                label_ids.append(-100)\n            elif word_idx != previous_word_idx:\n                label_ids.append(label[word_idx])\n            else:\n                label_ids.append(-100)\n            previous_word_idx = word_idx\n        labels.append(label_ids)\n\n    tokenized_inputs[\"labels\"] = labels\n    return tokenized_inputs\n\ntokenized_datasets = dataset.map(tokenize_and_align_labels, batched=True)\n\n# 4. Train\ntraining_args = TrainingArguments(\n    output_dir=\"./ner_results\",\n    evaluation_strategy=\"epoch\",\n    learning_rate=2e-5,\n    per_device_train_batch_size=16,\n    num_train_epochs=3,\n    weight_decay=0.01,\n)\n\ntrainer = Trainer(\n    model=model,\n    args=training_args,\n    train_dataset=tokenized_datasets[\"train\"],\n    eval_dataset=tokenized_datasets[\"validation\"],\n)\n\ntrainer.train()\n\n# 5. Export to ONNX\nmodel.eval()\ndummy_input = tokenizer(\"Sample text\", return_tensors=\"pt\")\n\ntorch.onnx.export(\n    model,\n    (dummy_input[\"input_ids\"], dummy_input[\"attention_mask\"]),\n    \"custom_ner_model.onnx\",\n    input_names=[\"input_ids\", \"attention_mask\"],\n    output_names=[\"logits\"],\n    dynamic_axes={\n        \"input_ids\": {0: \"batch\", 1: \"sequence\"},\n        \"attention_mask\": {0: \"batch\", 1: \"sequence\"},\n    },\n    opset_version=14,\n)\n\nprint(\"Custom NER model trained and exported!\")\n</code></pre>"},{"location":"reference/ml-onnx-guide/#complete-kg-embedding-pipeline","title":"Complete KG Embedding Pipeline","text":"<pre><code># complete_kg_pipeline.py\nfrom pykeen.pipeline import pipeline\nfrom pykeen.triples import TriplesFactory\nfrom pykeen.datasets import FB15k237\nimport torch\n\n# 1. Load or create dataset\n# Option A: Use benchmark dataset\ndataset = FB15k237()\n\n# Option B: Use custom triples\n# triples = [...your triples...]\n# dataset = TriplesFactory.from_labeled_triples(triples)\n\n# 2. Train model with best practices 2025\nresult = pipeline(\n    dataset=dataset,\n    model='ComplEx',  # ComplEx performs well on most KGs\n    training_kwargs=dict(\n        num_epochs=100,\n        batch_size=256,\n    ),\n    optimizer='Adam',\n    optimizer_kwargs=dict(lr=0.001),\n    evaluator='RankBasedEvaluator',\n    evaluator_kwargs=dict(\n        filtered=True,\n    ),\n    random_seed=42,\n)\n\n# 3. Evaluate\nresults = result.metric_results\nprint(f\"MRR: {results.get_metric('mean_reciprocal_rank')}\")\nprint(f\"Hits@10: {results.get_metric('hits_at_10')}\")\n\n# 4. Save model\nresult.save_to_directory('kg_model_checkpoint')\n\n# 5. Export inference model (simplified scorer)\nmodel = result.model\n\nclass LinkPredictor(torch.nn.Module):\n    def __init__(self, kg_model):\n        super().__init__()\n        self.model = kg_model\n\n    def forward(self, batch):\n        # batch: [batch_size, 3] containing [h, r, t] indices\n        h = batch[:, 0].long()\n        r = batch[:, 1].long()\n        t = batch[:, 2].long()\n\n        scores = self.model.score_hrt(h, r, t)\n        return scores\n\npredictor = LinkPredictor(model)\npredictor.eval()\n\ndummy_batch = torch.tensor([[0, 0, 0]], dtype=torch.float32)\n\ntorch.onnx.export(\n    predictor,\n    dummy_batch,\n    \"kg_link_predictor.onnx\",\n    input_names=[\"batch\"],\n    output_names=[\"scores\"],\n    dynamic_axes={\"batch\": {0: \"batch_size\"}},\n    opset_version=14,\n)\n\nprint(\"Link prediction model exported!\")\n</code></pre>"},{"location":"reference/ml-onnx-guide/#production-deployment","title":"Production Deployment","text":""},{"location":"reference/ml-onnx-guide/#1-model-optimization","title":"1. Model Optimization","text":"<p>Optimize ONNX models before deployment:</p> <pre><code>from onnxruntime.transformers import optimizer\n\n# Optimize ONNX model\noptimized_model = optimizer.optimize_model(\n    \"model.onnx\",\n    model_type='bert',  # or 'distilbert'\n    num_heads=12,\n    hidden_size=768,\n)\n\noptimized_model.save_model_to_file(\"model_optimized.onnx\")\n</code></pre>"},{"location":"reference/ml-onnx-guide/#2-quantization-for-speed","title":"2. Quantization for Speed","text":"<pre><code>from onnxruntime.quantization import quantize_dynamic, QuantType\n\n# Dynamic quantization (reduces model size, faster inference)\nquantize_dynamic(\n    \"model.onnx\",\n    \"model_quantized.onnx\",\n    weight_type=QuantType.QUInt8,\n)\n</code></pre>"},{"location":"reference/ml-onnx-guide/#3-configuration-for-production","title":"3. Configuration for Production","text":"<pre><code># Environment variables\nexport NER_MODEL_PATH=/opt/models/ner_optimized.onnx\nexport KG_INFERENCE_MODEL_PATH=/opt/models/kg_embedding_optimized.onnx\nexport KG_PERSIST_PATH=/var/lib/semantic_browser/kg\nexport RUST_LOG=info\n\n# Run with all features\ncargo run --release --features \"onnx-integration,telemetry\"\n\n# Or with Docker\ndocker run -d \\\n  -p 3000:3000 \\\n  -e NER_MODEL_PATH=/models/ner.onnx \\\n  -e KG_INFERENCE_MODEL_PATH=/models/kg.onnx \\\n  -e OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317 \\\n  -v /path/to/models:/models \\\n  semantic-browser:latest\n</code></pre>"},{"location":"reference/ml-onnx-guide/#4-opentelemetry-monitoring","title":"4. OpenTelemetry Monitoring","text":"<pre><code># Start Jaeger for tracing\ndocker run -d --name jaeger \\\n  -p 4317:4317 \\\n  -p 16686:16686 \\\n  jaegertracing/all-in-one:latest\n\n# Run with telemetry\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\nexport OTEL_SERVICE_NAME=semantic-browser\ncargo run --release --features \"onnx-integration,telemetry\"\n\n# View traces at http://localhost:16686\n</code></pre>"},{"location":"reference/ml-onnx-guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"reference/ml-onnx-guide/#common-issues","title":"Common Issues","text":""},{"location":"reference/ml-onnx-guide/#1-model-loading-fails","title":"1. Model Loading Fails","text":"<pre><code>Error: Failed to load NER model: No such file or directory\n</code></pre> <p>Solution: Verify the model path is correct and the file exists:</p> <pre><code>ls -lh $NER_MODEL_PATH\nfile $NER_MODEL_PATH  # Should show: ONNX model\n</code></pre>"},{"location":"reference/ml-onnx-guide/#2-onnx-runtime-errors","title":"2. ONNX Runtime Errors","text":"<pre><code>Error: ONNX Runtime error: Invalid input shape\n</code></pre> <p>Solution: Ensure your ONNX model was exported with dynamic axes. Re-export with:</p> <pre><code>dynamic_axes={\n    \"input_ids\": {0: \"batch\", 1: \"sequence\"},\n    \"attention_mask\": {0: \"batch\", 1: \"sequence\"},\n}\n</code></pre>"},{"location":"reference/ml-onnx-guide/#3-slow-inference","title":"3. Slow Inference","text":"<p>Solutions: - Use model quantization (see Production Deployment) - Use smaller models (DistilBERT instead of BERT) - Enable CPU optimizations:   <pre><code>export OMP_NUM_THREADS=4\nexport RAYON_NUM_THREADS=4\n</code></pre></p>"},{"location":"reference/ml-onnx-guide/#4-out-of-memory","title":"4. Out of Memory","text":"<p>Solutions: - Reduce batch size in model inference - Use smaller embedding dimensions (50 instead of 200) - Limit the number of entities for KG inference (configured in <code>src/kg.rs</code>)</p>"},{"location":"reference/ml-onnx-guide/#debugging","title":"Debugging","text":"<p>Enable debug logging:</p> <pre><code>export RUST_LOG=semantic_browser=debug,tract_onnx=debug\ncargo run --features onnx-integration\n</code></pre> <p>Check model structure:</p> <pre><code>import onnx\n\nmodel = onnx.load(\"model.onnx\")\nprint(onnx.helper.printable_graph(model.graph))\n</code></pre>"},{"location":"reference/ml-onnx-guide/#performance-benchmarks","title":"Performance Benchmarks","text":"<p>Typical performance on modern hardware (2025):</p> Model Type Size Inference Time Accuracy DistilBERT NER 250MB ~5ms/sentence F1: 0.95 BERT NER 400MB ~12ms/sentence F1: 0.96 TransE KG 10MB ~1ms/triple MRR: 0.65 ComplEx KG 20MB ~2ms/triple MRR: 0.75 <p>Benchmarks on: Intel i9, 32GB RAM, single-threaded inference</p>"},{"location":"reference/ml-onnx-guide/#additional-resources","title":"Additional Resources","text":""},{"location":"reference/ml-onnx-guide/#pre-trained-models","title":"Pre-trained Models","text":"<ul> <li>NER: https://huggingface.co/models?pipeline_tag=token-classification&amp;library=onnx</li> <li>KG Embeddings: https://github.com/pykeen/pykeen (export to ONNX)</li> </ul>"},{"location":"reference/ml-onnx-guide/#documentation","title":"Documentation","text":"<ul> <li>tract-onnx: https://github.com/sonos/tract</li> <li>PyKEEN: https://pykeen.readthedocs.io/</li> <li>Transformers: https://huggingface.co/docs/transformers/</li> </ul>"},{"location":"reference/ml-onnx-guide/#example-models-to-download","title":"Example Models to Download","text":"<pre><code># Download ready-to-use NER model\nwget https://huggingface.co/Xenova/bert-base-NER/resolve/main/onnx/model.onnx -O ner.onnx\n\n# Test it\nexport NER_MODEL_PATH=./ner.onnx\ncargo run --features onnx-integration\n</code></pre>"},{"location":"reference/ml-onnx-guide/#support","title":"Support","text":"<p>For issues or questions: - Open an issue on GitHub - Check existing issues for solutions - Review logs with <code>RUST_LOG=debug</code></p> <p>Last Updated: 2025 Compatible with: Semantic Browser v0.1.0+</p>"},{"location":"reference/observability/","title":"Observability Guide","text":"<p>The Semantic Browser provides comprehensive observability features for monitoring, debugging, and performance analysis. This guide covers metrics collection, distributed tracing, and logging configuration.</p>"},{"location":"reference/observability/#overview","title":"Overview","text":"<p>Observability in the Semantic Browser includes:</p> <ul> <li>Metrics: Prometheus-compatible metrics for monitoring system health and performance</li> <li>Tracing: OpenTelemetry distributed tracing for request tracking</li> <li>Logging: Structured logging with configurable levels and formats</li> </ul>"},{"location":"reference/observability/#metrics-collection","title":"Metrics Collection","text":""},{"location":"reference/observability/#enabling-metrics","title":"Enabling Metrics","text":"<p>Build with observability features:</p> <pre><code>cargo build --features observability\n</code></pre> <p>Configure metrics in <code>.env</code>:</p> <pre><code># Enable Prometheus metrics endpoint\nPROMETHEUS_METRICS=true\n\n# Port for metrics endpoint (default: 9090)\nMETRICS_PORT=9090\n</code></pre>"},{"location":"reference/observability/#accessing-metrics","title":"Accessing Metrics","text":"<p>Metrics are exposed at <code>/metrics</code> endpoint:</p> <pre><code>curl http://localhost:9090/metrics\n</code></pre>"},{"location":"reference/observability/#available-metrics","title":"Available Metrics","text":""},{"location":"reference/observability/#http-request-metrics","title":"HTTP Request Metrics","text":"<ul> <li><code>semantic_browser_http_requests_total{endpoint,method,status}</code> - Total HTTP requests</li> <li><code>semantic_browser_http_request_duration_seconds{endpoint,method}</code> - Request duration histogram</li> </ul>"},{"location":"reference/observability/#knowledge-graph-metrics","title":"Knowledge Graph Metrics","text":"<ul> <li><code>semantic_browser_kg_operations_total{operation}</code> - KG operations (insert, query, delete)</li> <li><code>semantic_browser_kg_operation_duration_seconds{operation}</code> - Operation duration</li> <li><code>semantic_browser_kg_size{graph_type}</code> - Current KG size by graph type</li> </ul>"},{"location":"reference/observability/#browser-automation-metrics","title":"Browser Automation Metrics","text":"<ul> <li><code>semantic_browser_browser_operations_total{result}</code> - Browser operations by result</li> <li><code>semantic_browser_browser_operation_duration_seconds</code> - Operation duration</li> </ul>"},{"location":"reference/observability/#ml-inference-metrics","title":"ML Inference Metrics","text":"<ul> <li><code>semantic_browser_ml_inference_total{model_type}</code> - ML inference operations</li> <li><code>semantic_browser_ml_inference_duration_seconds{model_type,confidence}</code> - Inference duration with confidence</li> </ul>"},{"location":"reference/observability/#parse-operations","title":"Parse Operations","text":"<ul> <li><code>semantic_browser_parse_operations_total{content_type,result}</code> - Parse operations</li> <li><code>semantic_browser_parse_operation_duration_seconds{content_type}</code> - Parse duration</li> </ul>"},{"location":"reference/observability/#system-metrics","title":"System Metrics","text":"<ul> <li><code>semantic_browser_active_connections{type}</code> - Active connections by type</li> <li><code>semantic_browser_uptime_seconds</code> - Server uptime</li> </ul>"},{"location":"reference/observability/#prometheus-configuration","title":"Prometheus Configuration","text":"<pre><code>scrape_configs:\n  - job_name: 'semantic-browser'\n    static_configs:\n      - targets: ['localhost:9090']\n    scrape_interval: 15s\n    metrics_path: '/metrics'\n</code></pre>"},{"location":"reference/observability/#grafana-dashboard","title":"Grafana Dashboard","text":"<p>Example panels: - Request rate and latency by endpoint - Error rates and 5xx responses - KG growth over time - ML inference performance and accuracy - Browser operation success rates - Memory and CPU usage</p>"},{"location":"reference/observability/#distributed-tracing","title":"Distributed Tracing","text":""},{"location":"reference/observability/#opentelemetry-setup","title":"OpenTelemetry Setup","text":"<p>Configure tracing in <code>.env</code>:</p> <pre><code># OpenTelemetry endpoint\nOTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\n\n# Service identification\nOTEL_SERVICE_NAME=semantic-browser\nOTEL_SERVICE_VERSION=0.1.0\n\n# Tracing configuration\nOTEL_TRACES_EXPORTER=otlp\nOTEL_TRACES_SAMPLER=always_on\n</code></pre>"},{"location":"reference/observability/#supported-tracing-backends","title":"Supported Tracing Backends","text":"<ul> <li>Jaeger: <code>OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:16686/api/traces</code></li> <li>Zipkin: <code>OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:9411/api/v2/spans</code></li> <li>Honeycomb: <code>OTEL_EXPORTER_OTLP_ENDPOINT=https://api.honeycomb.io:443</code></li> <li>DataDog: <code>OTEL_EXPORTER_OTLP_ENDPOINT=https://trace.agent.datadoghq.com</code></li> </ul>"},{"location":"reference/observability/#trace-context","title":"Trace Context","text":"<p>The Semantic Browser automatically instruments:</p> <ul> <li>HTTP request/response cycles</li> <li>Knowledge Graph operations</li> <li>Browser automation workflows</li> <li>ML inference calls</li> <li>External API calls</li> </ul>"},{"location":"reference/observability/#custom-tracing","title":"Custom Tracing","text":"<p>Add custom spans in code:</p> <pre><code>use tracing::{info, instrument};\n\n#[instrument]\npub async fn my_function(param: &amp;str) {\n    info!(\"Processing {}\", param);\n    // Function logic here\n}\n</code></pre>"},{"location":"reference/observability/#logging-configuration","title":"Logging Configuration","text":""},{"location":"reference/observability/#log-levels","title":"Log Levels","text":"<p>Configure global log level:</p> <pre><code># Available levels: trace, debug, info, warn, error\nRUST_LOG=info\n</code></pre>"},{"location":"reference/observability/#module-specific-logging","title":"Module-Specific Logging","text":"<pre><code># Set specific levels for modules\nRUST_LOG=semantic_browser=debug,semantic_browser::api=trace,tract=info\n</code></pre>"},{"location":"reference/observability/#production-logging","title":"Production Logging","text":"<pre><code># Structured JSON logging for production\nRUST_LOG=warn\n# Use log aggregation system (ELK, Loki, etc.)\n</code></pre>"},{"location":"reference/observability/#log-format","title":"Log Format","text":"<p>Default format includes: - Timestamp - Log level - Module path - Message - Structured fields (when applicable)</p>"},{"location":"reference/observability/#debug-logging-examples","title":"Debug Logging Examples","text":"<pre><code># Debug KG operations\nRUST_LOG=semantic_browser::kg=debug\n\n# Debug browser automation\nRUST_LOG=semantic_browser::browser=debug\n\n# Debug ML inference\nRUST_LOG=semantic_browser::ml=debug\n</code></pre>"},{"location":"reference/observability/#monitoring-best-practices","title":"Monitoring Best Practices","text":""},{"location":"reference/observability/#alerting-rules","title":"Alerting Rules","text":"<p>Example Prometheus alerting rules:</p> <pre><code>groups:\n  - name: semantic_browser\n    rules:\n      - alert: HighErrorRate\n        expr: rate(semantic_browser_http_requests_total{status=~\"5..\"}[5m]) / rate(semantic_browser_http_requests_total[5m]) &gt; 0.05\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"High error rate detected\"\n\n      - alert: KGSizeAnomaly\n        expr: increase(semantic_browser_kg_size[1h]) &lt; 0\n        for: 5m\n        labels:\n          severity: info\n        annotations:\n          summary: \"Knowledge Graph size decreased unexpectedly\"\n</code></pre>"},{"location":"reference/observability/#health-checks","title":"Health Checks","text":"<p>The application provides health check endpoints:</p> <ul> <li><code>GET /health</code> - Basic health check</li> <li><code>GET /metrics</code> - Detailed metrics (when enabled)</li> </ul>"},{"location":"reference/observability/#performance-monitoring","title":"Performance Monitoring","text":"<p>Key metrics to monitor:</p> <ol> <li>Latency: P95 request duration should be &lt; 500ms</li> <li>Error Rate: Should be &lt; 1% for production workloads</li> <li>Resource Usage: Memory and CPU usage within limits</li> <li>KG Performance: Query/insert operations should complete within SLA</li> <li>ML Inference: Model inference time and accuracy</li> </ol>"},{"location":"reference/observability/#troubleshooting-with-observability","title":"Troubleshooting with Observability","text":""},{"location":"reference/observability/#high-latency-issues","title":"High Latency Issues","text":"<ol> <li>Check <code>semantic_browser_http_request_duration_seconds</code> histogram</li> <li>Identify slow endpoints and operations</li> <li>Review traces for bottlenecks</li> <li>Check resource utilization</li> </ol>"},{"location":"reference/observability/#memory-leaks","title":"Memory Leaks","text":"<ol> <li>Monitor <code>semantic_browser_active_connections</code></li> <li>Check KG size growth with <code>semantic_browser_kg_size</code></li> <li>Review browser pool usage</li> <li>Enable memory profiling if needed</li> </ol>"},{"location":"reference/observability/#ml-performance-issues","title":"ML Performance Issues","text":"<ol> <li>Check <code>semantic_browser_ml_inference_duration_seconds</code></li> <li>Monitor model accuracy and confidence scores</li> <li>Review input data quality</li> <li>Consider model optimization or retraining</li> </ol>"},{"location":"reference/observability/#browser-automation-failures","title":"Browser Automation Failures","text":"<ol> <li>Check <code>semantic_browser_browser_operations_total{result=\"error\"}</code></li> <li>Review browser pool configuration</li> <li>Check network connectivity and timeouts</li> <li>Enable debug logging for browser operations</li> </ol>"},{"location":"reference/observability/#configuration-reference","title":"Configuration Reference","text":""},{"location":"reference/observability/#environment-variables","title":"Environment Variables","text":"Variable Default Description <code>PROMETHEUS_METRICS</code> <code>false</code> Enable Prometheus metrics <code>METRICS_PORT</code> <code>9090</code> Metrics endpoint port <code>OTEL_EXPORTER_OTLP_ENDPOINT</code> - OTLP endpoint URL <code>OTEL_SERVICE_NAME</code> <code>semantic-browser</code> Service name for tracing <code>OTEL_TRACES_EXPORTER</code> - Tracing exporter (otlp, jaeger, zipkin) <code>RUST_LOG</code> <code>info</code> Global log level"},{"location":"reference/observability/#feature-flags","title":"Feature Flags","text":"<ul> <li><code>--features observability</code> - Enable metrics and tracing</li> <li>Individual flags for specific observability components</li> </ul>"},{"location":"reference/observability/#integration-examples","title":"Integration Examples","text":""},{"location":"reference/observability/#docker-compose-monitoring","title":"Docker Compose Monitoring","text":"<pre><code>version: '3.8'\nservices:\n  semantic-browser:\n    # ... app config ...\n    environment:\n      - PROMETHEUS_METRICS=true\n      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317\n\n  prometheus:\n    image: prom/prometheus\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n\n  otel-collector:\n    image: otel/opentelemetry-collector\n    # ... collector config ...\n</code></pre>"},{"location":"reference/observability/#kubernetes-deployment","title":"Kubernetes Deployment","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: semantic-browser\nspec:\n  template:\n    spec:\n      containers:\n      - name: semantic-browser\n        env:\n        - name: PROMETHEUS_METRICS\n          value: \"true\"\n        - name: OTEL_EXPORTER_OTLP_ENDPOINT\n          value: \"http://opentelemetry-collector:4317\"\n        ports:\n        - containerPort: 9090\n          name: metrics\n</code></pre> <p>This comprehensive observability setup ensures you can monitor, debug, and optimize the Semantic Browser effectively in production environments.</p>"},{"location":"reference/seccomp/","title":"Seccomp Sandboxing Configuration","text":"<p>This guide explains how to configure and use seccomp sandboxing for enhanced security in the Semantic Browser.</p>"},{"location":"reference/seccomp/#overview","title":"Overview","text":"<p>Seccomp (Secure Computing) is a Linux kernel feature that allows filtering system calls. The Semantic Browser uses seccomp-bpf to restrict the system calls available to HTML parsing operations, reducing the attack surface.</p>"},{"location":"reference/seccomp/#prerequisites","title":"Prerequisites","text":"<ul> <li>Linux kernel 3.5+ (for seccomp-bpf)</li> <li><code>seccompiler</code> crate (included with <code>--features seccomp</code>)</li> </ul>"},{"location":"reference/seccomp/#building-with-seccomp","title":"Building with Seccomp","text":"<pre><code># Enable seccomp feature\ncargo build --release --features seccomp\n\n# Or with all features\ncargo build --release --all-features\n</code></pre>"},{"location":"reference/seccomp/#how-it-works","title":"How It Works","text":"<p>The seccomp filter is applied during HTML parsing operations using a whitelist approach:</p> <ol> <li>Allowed Syscalls: Only essential syscalls for memory management, file I/O, and process control</li> <li>Blocked Syscalls: Dangerous operations like <code>exec</code>, <code>socket</code>, <code>ptrace</code> are blocked</li> <li>Graceful Fallback: If seccomp fails to apply, parsing continues without sandboxing</li> </ol>"},{"location":"reference/seccomp/#allowed-syscalls","title":"Allowed Syscalls","text":"<p>The current whitelist includes:</p>"},{"location":"reference/seccomp/#memory-management","title":"Memory Management","text":"<ul> <li><code>brk</code> - Adjust data segment size</li> <li><code>mmap</code> - Map files or devices into memory</li> <li><code>munmap</code> - Unmap files from memory</li> <li><code>mremap</code> - Remap virtual memory addresses</li> <li><code>mprotect</code> - Control protection of memory regions</li> </ul>"},{"location":"reference/seccomp/#file-io","title":"File I/O","text":"<ul> <li><code>read</code> - Read from file descriptor</li> <li><code>readv</code> - Read from file descriptor into multiple buffers</li> <li><code>pread64</code> - Read from file descriptor at offset</li> <li><code>close</code> - Close file descriptor</li> <li><code>fstat</code> - Get file status</li> </ul>"},{"location":"reference/seccomp/#process-control","title":"Process Control","text":"<ul> <li><code>futex</code> - Fast user-space locking</li> <li><code>exit</code> - Terminate the calling process</li> <li><code>exit_group</code> - Terminate all threads in process group</li> <li><code>getpid</code> - Get process ID</li> <li><code>gettid</code> - Get thread ID</li> </ul>"},{"location":"reference/seccomp/#time","title":"Time","text":"<ul> <li><code>clock_gettime</code> - Get time from specific clock</li> <li><code>gettimeofday</code> - Get time (deprecated but allowed)</li> </ul>"},{"location":"reference/seccomp/#miscellaneous","title":"Miscellaneous","text":"<ul> <li><code>getrandom</code> - Get random bytes</li> <li><code>sched_getaffinity</code> - Get CPU affinity</li> </ul>"},{"location":"reference/seccomp/#configuration","title":"Configuration","text":"<p>Seccomp is automatically enabled when the feature flag is compiled in. No runtime configuration is required.</p>"},{"location":"reference/seccomp/#testing-seccomp","title":"Testing Seccomp","text":""},{"location":"reference/seccomp/#unit-tests","title":"Unit Tests","text":"<pre><code>cargo test --features seccomp security::tests::test_sandbox_wrapper\n</code></pre>"},{"location":"reference/seccomp/#manual-testing","title":"Manual Testing","text":"<ol> <li> <p>Check if seccomp is active: <pre><code># Build with seccomp\ncargo build --release --features seccomp\n\n# Run and check logs\nRUST_LOG=debug ./target/release/semantic_browser_agent\n\n# Look for: \"Seccomp filter applied successfully\"\n</code></pre></p> </li> <li> <p>Test syscall blocking: <pre><code># Try operations that would use blocked syscalls\n# The process should continue working for allowed operations\n# but fail gracefully for blocked ones\n</code></pre></p> </li> </ol>"},{"location":"reference/seccomp/#troubleshooting","title":"Troubleshooting","text":""},{"location":"reference/seccomp/#common-issues","title":"Common Issues","text":"<ol> <li>Seccomp not applied:</li> <li>Check if running on Linux</li> <li>Verify <code>--features seccomp</code> was used during build</li> <li> <p>Check kernel version (<code>uname -r</code>)</p> </li> <li> <p>Application crashes:</p> </li> <li>Seccomp filter might be too restrictive</li> <li>Check allowed syscalls list</li> <li> <p>Review HTML parsing code for unexpected syscalls</p> </li> <li> <p>Performance impact:</p> </li> <li>Seccomp has minimal overhead (&lt;1% CPU)</li> <li>Only applied during parsing operations</li> <li>No impact on normal browsing/querying</li> </ol>"},{"location":"reference/seccomp/#debugging","title":"Debugging","text":"<p>Enable detailed logging:</p> <pre><code>export RUST_LOG=semantic_browser=debug,seccompiler=trace\n</code></pre> <p>Check system call usage:</p> <pre><code># Use strace to monitor syscalls during parsing\nstrace -e trace=network,file,process ./target/release/semantic_browser_agent\n</code></pre>"},{"location":"reference/seccomp/#security-considerations","title":"Security Considerations","text":""},{"location":"reference/seccomp/#defense-in-depth","title":"Defense in Depth","text":"<p>Seccomp provides an additional security layer:</p> <ol> <li>Input Validation: HTML input is validated before parsing</li> <li>Sandboxing: Syscall filtering during parsing</li> <li>Resource Limits: Rate limiting and size restrictions</li> <li>Logging: Security events are logged</li> </ol>"},{"location":"reference/seccomp/#limitations","title":"Limitations","text":"<ul> <li>Linux-only feature</li> <li>Only protects during parsing operations</li> <li>Does not protect against logic bugs in parsing code</li> <li>Requires careful syscall whitelist maintenance</li> </ul>"},{"location":"reference/seccomp/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"reference/seccomp/#custom-syscall-filters","title":"Custom Syscall Filters","text":"<p>To modify the syscall whitelist, edit <code>src/security.rs</code>:</p> <pre><code>let filter = seccompiler::SeccompFilter::new(\n    vec![\n        // Add your custom rules here\n        seccompiler::SeccompRule::new(vec![libc::SYS_read]).unwrap(),\n        // ...\n    ],\n    seccompiler::SeccompAction::Allow,\n    seccompiler::SeccompAction::Errno(libc::EPERM),\n    seccompiler::SeccompFilterAttr::empty(),\n)?;\n</code></pre>"},{"location":"reference/seccomp/#conditional-application","title":"Conditional Application","text":"<p>Apply seccomp only in specific contexts:</p> <pre><code>#[cfg(feature = \"seccomp\")]\n{\n    apply_seccomp_filter()?;\n}\n// Continue with parsing...\n</code></pre>"},{"location":"reference/seccomp/#performance-impact","title":"Performance Impact","text":""},{"location":"reference/seccomp/#benchmarks","title":"Benchmarks","text":"<ul> <li>Without seccomp: Baseline parsing performance</li> <li>With seccomp: &lt;1% overhead</li> <li>Memory usage: No significant change</li> <li>Startup time: Minimal increase</li> </ul>"},{"location":"reference/seccomp/#recommendations","title":"Recommendations","text":"<ul> <li>Enable seccomp in production builds</li> <li>Test thoroughly before deployment</li> <li>Monitor for blocked legitimate operations</li> <li>Keep syscall whitelist minimal</li> </ul>"},{"location":"reference/seccomp/#examples","title":"Examples","text":""},{"location":"reference/seccomp/#docker-deployment","title":"Docker Deployment","text":"<pre><code>FROM rust:1.70-slim AS builder\nWORKDIR /app\nCOPY . .\nRUN cargo build --release --features seccomp\n\nFROM debian:bookworm-slim\nRUN apt-get update &amp;&amp; apt-get install -y ca-certificates &amp;&amp; rm -rf /var/lib/apt/lists/*\nCOPY --from=builder /app/target/release/semantic_browser_mcp /usr/local/bin/\nUSER nobody\nCMD [\"semantic_browser_mcp\"]\n</code></pre>"},{"location":"reference/seccomp/#kubernetes","title":"Kubernetes","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: semantic-browser\nspec:\n  template:\n    spec:\n      securityContext:\n        runAsNonRoot: true\n        runAsUser: 65534\n      containers:\n      - name: semantic-browser\n        image: semantic-browser:latest\n        securityContext:\n          allowPrivilegeEscalation: false\n          capabilities:\n            drop:\n            - ALL\n          readOnlyRootFilesystem: true\n</code></pre>"},{"location":"reference/seccomp/#references","title":"References","text":"<ul> <li>Linux Seccomp Documentation</li> <li>seccompiler Crate</li> <li>Docker Security Best Practices</li> </ul>"},{"location":"reference/security/","title":"Security Policy","text":""},{"location":"reference/security/#supported-versions","title":"Supported Versions","text":"<p>We take security seriously. The following versions of the Semantic Browser are currently supported with security updates:</p> Version Supported 0.1.x &lt; 0.1"},{"location":"reference/security/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>If you discover a security vulnerability in the Semantic Browser, please help us by reporting it responsibly.</p> <p>Please do not report security vulnerabilities through public GitHub issues.</p> <p>Instead, please report security vulnerabilities by creating a private security advisory on GitHub or contacting the maintainers directly.</p>"},{"location":"reference/security/#what-to-include","title":"What to Include","text":"<p>When reporting a vulnerability, please include:</p> <ul> <li>A clear description of the vulnerability</li> <li>Steps to reproduce the issue</li> <li>Potential impact and severity</li> <li>Any suggested fixes or mitigations (optional)</li> </ul>"},{"location":"reference/security/#our-response-process","title":"Our Response Process","text":"<ol> <li>Acknowledgment: We will acknowledge receipt of your report within 48 hours</li> <li>Investigation: We will investigate the issue and determine its validity and severity</li> <li>Updates: We will provide regular updates on our progress (at least weekly)</li> <li>Fix: Once a fix is developed, we will coordinate disclosure with you</li> <li>Public Disclosure: We will publicly disclose the vulnerability after the fix is released</li> </ol>"},{"location":"reference/security/#disclosure-policy","title":"Disclosure Policy","text":"<ul> <li>We follow a coordinated disclosure process</li> <li>We will credit researchers who responsibly report vulnerabilities</li> <li>We will not disclose vulnerability details until a fix is available</li> <li>We aim to release fixes within 90 days of initial report (or sooner for critical issues)</li> </ul>"},{"location":"reference/security/#security-best-practices","title":"Security Best Practices","text":""},{"location":"reference/security/#for-users","title":"For Users","text":""},{"location":"reference/security/#deployment-security","title":"Deployment Security","text":"<ul> <li>Network Security: Deploy behind reverse proxy (nginx, traefik) with TLS</li> <li>Firewall Configuration: Restrict API access to trusted networks/IPs</li> <li>Container Security: Use non-root user, read-only filesystems, resource limits</li> <li>Secret Management: Use external secret stores (HashiCorp Vault, AWS Secrets Manager)</li> </ul>"},{"location":"reference/security/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<ul> <li>JWT Secrets: Rotate <code>JWT_SECRET</code> quarterly, use 48+ character random strings</li> <li>Token Expiration: Set short token lifetimes (1-24 hours) based on use case</li> <li>Role-Based Access: Use roles to limit API access (admin, user, readonly)</li> <li>Token Revocation: Enable Redis integration for immediate token invalidation</li> </ul>"},{"location":"reference/security/#operational-security","title":"Operational Security","text":"<ul> <li>Log Monitoring: Set up alerts for authentication failures, rate limit hits</li> <li>Regular Backups: Backup KG data and configuration regularly</li> <li>Update Management: Apply security patches within 30 days</li> <li>Access Auditing: Log all API access with user context</li> </ul>"},{"location":"reference/security/#input-validation","title":"Input Validation","text":"<ul> <li>HTML Size Limits: Configure <code>MAX_HTML_SIZE</code> based on expected content</li> <li>SPARQL Complexity: Set <code>MAX_QUERY_LENGTH</code> to prevent expensive queries</li> <li>URL Validation: Use allowlists for browsing operations</li> <li>Content Filtering: Enable <code>SECURITY_STRICT_MODE</code> for production</li> </ul>"},{"location":"reference/security/#for-contributors","title":"For Contributors","text":""},{"location":"reference/security/#secure-development","title":"Secure Development","text":"<ul> <li>Input Validation: Validate all inputs at API boundaries</li> <li>Output Encoding: Sanitize HTML/SPARQL outputs to prevent injection</li> <li>Error Handling: Don't leak sensitive information in error messages</li> <li>Dependency Scanning: Use tools like <code>cargo audit</code>, <code>safety</code> for vulnerabilities</li> </ul>"},{"location":"reference/security/#code-review-checklist","title":"Code Review Checklist","text":"<ul> <li> Authentication required for all endpoints</li> <li> Input validation on all user inputs</li> <li> Proper error handling without information leakage</li> <li> No hardcoded secrets or credentials</li> <li> Resource limits on expensive operations</li> <li> Logging of security-relevant events</li> </ul>"},{"location":"reference/security/#testing-security","title":"Testing Security","text":"<ul> <li>Unit Tests: Test input validation and authentication logic</li> <li>Integration Tests: Test rate limiting and authorization</li> <li>Fuzz Testing: Use fuzzing for input parsing functions</li> <li>Security Scanning: Run SAST/DAST tools in CI/CD</li> </ul>"},{"location":"reference/security/#infrastructure-security","title":"Infrastructure Security","text":"<ul> <li>CI/CD Security: Secure build pipelines, signed releases</li> <li>Container Images: Scan for vulnerabilities, use minimal base images</li> <li>Infrastructure as Code: Version control infrastructure configurations</li> <li>Monitoring: Implement comprehensive logging and alerting</li> </ul>"},{"location":"reference/security/#security-features","title":"Security Features","text":"<p>The Semantic Browser includes several security features:</p> <ul> <li>Input Validation: All HTML and SPARQL inputs are validated</li> <li>Rate Limiting: API endpoints are rate-limited to prevent abuse</li> <li>Authentication: Bearer token authentication for API access</li> <li>Sandboxing: Optional seccomp sandboxing on Linux</li> <li>Logging: Comprehensive security event logging</li> </ul>"},{"location":"reference/security/#contact","title":"Contact","text":"<p>For security-related questions or concerns, please contact [INSERT CONTACT INFORMATION].</p> <p>Thank you for helping keep the Semantic Browser and its users secure!</p>"},{"location":"user-guide/browser-automation/","title":"Browser Automation Guide","text":"<p>Complete guide to headless browser automation with chromiumoxide for semantic data extraction.</p>"},{"location":"user-guide/browser-automation/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Installation</li> <li>Quick Start</li> <li>Configuration</li> <li>Usage Examples</li> <li>API Reference</li> <li>Best Practices</li> <li>Troubleshooting</li> <li>Performance Tuning</li> </ul>"},{"location":"user-guide/browser-automation/#overview","title":"Overview","text":"<p>The Semantic Browser provides headless browser automation using chromiumoxide, a pure Rust implementation of the Chrome DevTools Protocol. This enables:</p> <ul> <li>Full JavaScript Support - Navigate modern web applications</li> <li>Semantic Data Extraction - Extract microdata, JSON-LD, and structured content</li> <li>Cookie/Session Management - Handle authentication and user sessions</li> <li>Screenshot Capture - Visual debugging and analysis</li> <li>Resource Blocking - Minimalist browsing (block ads, trackers, images)</li> <li>Knowledge Graph Integration - Direct integration with RDF/SPARQL</li> </ul>"},{"location":"user-guide/browser-automation/#why-chromiumoxide","title":"Why chromiumoxide?","text":"<p>Advantages over alternatives: - \u2705 Pure Rust - No external drivers, type safety - \u2705 Async-first - Native Tokio integration - \u2705 Resource efficient - Reuses Chromium installation - \u2705 Full compatibility - Real browser engine - \u2705 Minimalist - Fine-grained resource control</p> <p>Comparison: | Feature | chromiumoxide | headless_chrome | fantoccini | lynx/w3m | |---------|---------------|-----------------|------------|----------| | Pure Rust | \u2705 | \u2705 | \u2705 | \u274c | | JavaScript | \u2705 | \u2705 | \u2705 | \u274c | | Async native | \u2705 | \u26a0\ufe0f | \u2705 | \u274c | | No external deps | \u2705 | \u2705 | \u274c (needs driver) | \u2705 | | Resource control | \u2705 | \u26a0\ufe0f | \u26a0\ufe0f | \u2705 |</p>"},{"location":"user-guide/browser-automation/#installation","title":"Installation","text":""},{"location":"user-guide/browser-automation/#1-install-chromiumchrome","title":"1. Install Chromium/Chrome","text":"<p>Ubuntu/Debian: <pre><code>sudo apt update\nsudo apt install chromium-browser\n# or\nsudo apt install google-chrome-stable\n</code></pre></p> <p>macOS: <pre><code>brew install --cask chromium\n# or install Google Chrome from https://www.google.com/chrome/\n</code></pre></p> <p>Alpine Linux (Docker): <pre><code>RUN apk add --no-cache \\\n    chromium \\\n    nss \\\n    freetype \\\n    harfbuzz \\\n    ca-certificates \\\n    ttf-freefont\n</code></pre></p> <p>Verify installation: <pre><code># Linux\nwhich chromium-browser\n# or\nwhich google-chrome\n\n# macOS\nls \"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"\n</code></pre></p>"},{"location":"user-guide/browser-automation/#2-enable-browser-automation-feature","title":"2. Enable Browser Automation Feature","text":"<p>Add to <code>Cargo.toml</code>: <pre><code>[dependencies]\nsemantic_browser = { path = \".\", features = [\"browser-automation\"] }\n</code></pre></p> <p>Or build with feature flag: <pre><code>cargo build --features browser-automation\n</code></pre></p>"},{"location":"user-guide/browser-automation/#3-configure-environment","title":"3. Configure Environment","text":"<p>Copy <code>.env.example</code> to <code>.env</code> and configure: <pre><code>cp .env.example .env\n</code></pre></p> <p>Edit <code>.env</code>: <pre><code># Path to Chromium (optional, auto-detect if not set)\nCHROMIUM_PATH=/usr/bin/chromium-browser\n\n# Headless mode\nBROWSER_HEADLESS=true\n\n# Block ads and trackers\nBLOCK_ADS=true\n\n# Block images (optional, for text-only)\nBLOCK_IMAGES=false\n\n# Timeout in seconds\nBROWSER_TIMEOUT_SECS=30\n\n# Pool size (concurrent tabs)\nBROWSER_POOL_SIZE=2\n\n# Custom profile directory (optional; defaults to temp dir per run)\n# CHROMIUMOXIDE_USER_DATA_DIR=/tmp/semantic-browser/chromium-profile\n</code></pre></p>"},{"location":"user-guide/browser-automation/#quick-start","title":"Quick Start","text":""},{"location":"user-guide/browser-automation/#using-the-rest-api","title":"Using the REST API","text":"<p>1. Start the server: <pre><code>cargo run --features browser-automation\n</code></pre></p> <p>2. Generate authentication token: <pre><code>TOKEN=$(curl -X POST http://localhost:3000/auth/token \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\":\"admin\",\"role\":\"admin\"}' | jq -r .token)\n</code></pre></p> <p>3. Browse a URL: <pre><code>curl -X POST http://localhost:3000/browse \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"url\": \"https://schema.org\",\n    \"query\": \"extract structured data\"\n  }'\n</code></pre></p> <p>Response: <pre><code>{\n  \"data\": \"Browsed https://schema.org with query 'extract structured data'\\nTitle: Schema.org\\nJSON-LD objects: 5\\nMicrodata items: 12\\nText content length: 15234 chars\\nFinal URL: https://schema.org/\"\n}\n</code></pre></p>"},{"location":"user-guide/browser-automation/#using-the-library","title":"Using the Library","text":"<pre><code>use semantic_browser::browser::{BrowserConfig, BrowserPool, NavigationOptions};\n\n#[tokio::main]\nasync fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {\n    // Create browser pool\n    let config = BrowserConfig::default();\n    let pool = BrowserPool::new(config).await?;\n\n    // Navigate and extract\n    let options = NavigationOptions::default();\n    let semantic_data = pool.navigate_and_extract(\n        \"https://example.com\",\n        options\n    ).await?;\n\n    println!(\"Title: {:?}\", semantic_data.title);\n    println!(\"JSON-LD: {} objects\", semantic_data.json_ld.len());\n    println!(\"Microdata: {} items\", semantic_data.microdata.len());\n\n    // Shutdown\n    pool.shutdown().await?;\n    Ok(())\n}\n</code></pre>"},{"location":"user-guide/browser-automation/#configuration","title":"Configuration","text":""},{"location":"user-guide/browser-automation/#browserconfig","title":"BrowserConfig","text":"<pre><code>pub struct BrowserConfig {\n    /// Path to Chromium/Chrome executable\n    pub chromium_path: Option&lt;String&gt;,\n\n    /// Run in headless mode\n    pub headless: bool,\n\n    /// Block ads and trackers\n    pub block_ads: bool,\n\n    /// Block images\n    pub block_images: bool,\n\n    /// Default navigation timeout (seconds)\n    pub timeout_secs: u64,\n\n    /// Maximum concurrent tabs\n    pub pool_size: usize,\n\n    /// User data directory for Chromium profile\n    pub user_data_dir: Option&lt;String&gt;,\n}\n</code></pre> <p>Create from environment: <pre><code>let config = BrowserConfig::from_env();\n</code></pre></p> <p>Note: When <code>CHROMIUMOXIDE_USER_DATA_DIR</code> is not provided, the agent now creates a unique temporary profile directory per run. This prevents Chrome\u2019s <code>SingletonLock</code> contention when previous runs crash or reuse the same profile.</p> <p>Custom configuration: <pre><code>let config = BrowserConfig {\n    chromium_path: Some(\"/usr/bin/chromium\".to_string()),\n    headless: true,\n    block_ads: true,\n    block_images: true, // Text-only extraction\n    timeout_secs: 45,\n    pool_size: 4, // 4 concurrent tabs\n    user_data_dir: Some(\"/tmp/semantic-browser/profile-dev\".to_string()),\n};\n</code></pre></p>"},{"location":"user-guide/browser-automation/#navigationoptions-updated","title":"NavigationOptions (\u2705 UPDATED)","text":"<pre><code>pub struct NavigationOptions {\n    /// Wait for selector before extraction (\u2705 ENHANCED: real polling with exponential backoff)\n    pub wait_for_selector: Option&lt;String&gt;,\n\n    /// Cookies to set\n    pub cookies: HashMap&lt;String, String&gt;,\n\n    /// Capture screenshot\n    pub take_screenshot: bool,\n\n    /// Custom JavaScript to execute\n    pub execute_js: Option&lt;String&gt;,\n\n    /// Maximum retry attempts on failure (\u2705 NEW: default 3, exponential backoff)\n    pub max_retries: u32,\n}\n</code></pre> <p>Defaults: - <code>wait_for_selector</code>: <code>None</code> (no waiting) - <code>cookies</code>: Empty HashMap - <code>take_screenshot</code>: <code>false</code> - <code>execute_js</code>: <code>None</code> - <code>max_retries</code>: <code>3</code> (total 4 attempts)</p> <p>Example: <pre><code>use std::collections::HashMap;\n\nlet mut cookies = HashMap::new();\ncookies.insert(\"session_id\".to_string(), \"abc123\".to_string());\n\nlet options = NavigationOptions {\n    wait_for_selector: Some(\"#content\".to_string()),\n    cookies,\n    take_screenshot: true,\n    execute_js: Some(\"window.scrollTo(0, document.body.scrollHeight);\".to_string()),\n};\n</code></pre></p>"},{"location":"user-guide/browser-automation/#usage-examples","title":"Usage Examples","text":""},{"location":"user-guide/browser-automation/#example-1-basic-navigation","title":"Example 1: Basic Navigation","text":"<pre><code>use semantic_browser::browser::{BrowserConfig, BrowserPool, NavigationOptions};\n\n#[tokio::main]\nasync fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {\n    let config = BrowserConfig::default();\n    let pool = BrowserPool::new(config).await?;\n\n    let options = NavigationOptions::default();\n    let data = pool.navigate_and_extract(\"https://example.com\", options).await?;\n\n    println!(\"Successfully extracted data from: {}\", data.final_url);\n    Ok(())\n}\n</code></pre>"},{"location":"user-guide/browser-automation/#example-2-screenshot-capture","title":"Example 2: Screenshot Capture","text":"<pre><code>let pool = BrowserPool::new(BrowserConfig::default()).await?;\n\nlet screenshot_bytes = pool.take_screenshot(\"https://example.com\").await?;\n\n// Save to file\nstd::fs::write(\"screenshot.png\", screenshot_bytes)?;\nprintln!(\"Screenshot saved\");\n</code></pre>"},{"location":"user-guide/browser-automation/#example-3-cookie-authentication","title":"Example 3: Cookie Authentication","text":"<pre><code>use std::collections::HashMap;\n\nlet pool = BrowserPool::new(BrowserConfig::default()).await?;\n\nlet mut cookies = HashMap::new();\ncookies.insert(\"auth_token\".to_string(), \"secret123\".to_string());\ncookies.insert(\"session_id\".to_string(), \"xyz789\".to_string());\n\nlet options = NavigationOptions {\n    cookies,\n    ..Default::default()\n};\n\nlet data = pool.navigate_and_extract(\"https://protected-site.com\", options).await?;\n</code></pre>"},{"location":"user-guide/browser-automation/#example-4-wait-for-dynamic-content","title":"Example 4: Wait for Dynamic Content","text":"<pre><code>let options = NavigationOptions {\n    wait_for_selector: Some(\".dynamic-content\".to_string()),\n    ..Default::default()\n};\n\nlet data = pool.navigate_and_extract(\"https://spa-app.com\", options).await?;\n</code></pre>"},{"location":"user-guide/browser-automation/#example-5-custom-javascript-execution","title":"Example 5: Custom JavaScript Execution","text":"<pre><code>let js_code = r#\"\n    document.querySelectorAll('.ad').forEach(el =&gt; el.remove());\n    return document.body.innerText;\n\"#;\n\nlet options = NavigationOptions {\n    execute_js: Some(js_code.to_string()),\n    ..Default::default()\n};\n\nlet data = pool.navigate_and_extract(\"https://example.com\", options).await?;\n</code></pre>"},{"location":"user-guide/browser-automation/#example-6-extract-semantic-data","title":"Example 6: Extract Semantic Data","text":"<pre><code>let pool = BrowserPool::new(BrowserConfig::default()).await?;\nlet data = pool.navigate_and_extract(\"https://schema.org\", NavigationOptions::default()).await?;\n\n// Access structured data\nprintln!(\"Title: {:?}\", data.title);\n\n// JSON-LD\nfor obj in data.json_ld {\n    println!(\"JSON-LD: {:?}\", obj);\n}\n\n// Microdata\nfor item in data.microdata {\n    println!(\"Type: {}\", item.item_type);\n    for (prop, values) in item.properties {\n        println!(\"  {}: {:?}\", prop, values);\n    }\n}\n\n// Plain text (for NER)\nprintln!(\"Text: {}\", data.text_content);\n</code></pre>"},{"location":"user-guide/browser-automation/#example-7-knowledge-graph-integration","title":"Example 7: Knowledge Graph Integration","text":"<pre><code>use semantic_browser::browser::{BrowserConfig, BrowserPool, NavigationOptions};\nuse semantic_browser::kg::KnowledgeGraph;\n\n#[tokio::main]\nasync fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {\n    let pool = BrowserPool::new(BrowserConfig::default()).await?;\n    let mut kg = KnowledgeGraph::new();\n\n    let data = pool.navigate_and_extract(\n        \"https://schema.org/Person\",\n        NavigationOptions::default()\n    ).await?;\n\n    // Insert extracted data into Knowledge Graph\n    if let Some(title) = data.title {\n        kg.insert(&amp;data.final_url, \"dcterms:title\", &amp;title)?;\n    }\n\n    for item in data.microdata {\n        kg.insert(&amp;item.item_type, \"rdf:type\", \"schema:Thing\")?;\n    }\n\n    println!(\"Inserted {} entities into KG\", kg.get_all_entities()?.len());\n    Ok(())\n}\n</code></pre>"},{"location":"user-guide/browser-automation/#example-8-production-ready-scraping-new-all-features","title":"Example 8: Production-Ready Scraping (\u2705 NEW - All Features)","text":"<pre><code>use semantic_browser::browser::{BrowserConfig, BrowserPool, NavigationOptions};\nuse std::time::Duration;\n\n#[tokio::main]\nasync fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {\n    // Configure minimalist browser with resource blocking\n    let config = BrowserConfig {\n        headless: true,\n        block_ads: true,       // Block 13 ad/tracker patterns\n        block_images: true,    // Block 8 image formats\n        timeout_secs: 45,      // Allow time for dynamic content\n        pool_size: 2,\n        ..Default::default()\n    };\n\n    let pool = BrowserPool::new(config).await?;\n\n    // Configure navigation with retry and dynamic waiting\n    let options = NavigationOptions {\n        wait_for_selector: Some(\".search-results\".to_string()),  // Wait for dynamic content\n        max_retries: 3,                                          // Retry on failure\n        take_screenshot: false,                                   // Disable for speed\n        ..Default::default()\n    };\n\n    // Navigate with automatic retry\n    let data = pool.navigate_and_extract(\n        \"https://example.com/search?q=rust\",\n        options\n    ).await?;\n\n    println!(\"\u2705 Extracted from: {}\", data.final_url);\n    println!(\"\ud83d\udcc4 Title: {:?}\", data.title);\n    println!(\"\ud83d\udcca JSON-LD items: {}\", data.json_ld.len());\n    println!(\"\ud83c\udff7\ufe0f  Microdata items: {}\", data.microdata.len());\n\n    // Health check before long-running operation\n    if !pool.health_check().await {\n        pool.restart_if_unhealthy().await?;\n    }\n\n    // Batch processing with health monitoring\n    let urls = vec![\n        \"https://example.com/page1\",\n        \"https://example.com/page2\",\n        \"https://example.com/page3\",\n    ];\n\n    for (i, url) in urls.iter().enumerate() {\n        // Periodic health check\n        if i % 10 == 0 &amp;&amp; !pool.health_check().await {\n            tracing::warn!(\"Browser unhealthy, restarting...\");\n            pool.restart_if_unhealthy().await?;\n        }\n\n        let data = pool.navigate_and_extract(url, options.clone()).await?;\n        println!(\"Processed: {}\", data.final_url);\n    }\n\n    pool.shutdown().await?;\n    Ok(())\n}\n</code></pre> <p>Features Demonstrated: - \u2705 Resource blocking (ads + images) - \u2705 Wait for dynamic selectors - \u2705 Automatic retry with exponential backoff - \u2705 Health checks with auto-recovery - \u2705 Batch processing with monitoring - \u2705 Production-ready error handling</p>"},{"location":"user-guide/browser-automation/#example-9-phase-1-enhanced-meta-tags-extraction-new","title":"Example 9: Phase 1 Enhanced Meta Tags Extraction (\u2728 NEW)","text":"<pre><code>use semantic_browser::browser::{BrowserConfig, BrowserPool, NavigationOptions};\n\n#[tokio::main]\nasync fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {\n    let pool = BrowserPool::new(BrowserConfig::default()).await?;\n    let data = pool.navigate_and_extract(\n        \"https://www.microsoft.com\",\n        NavigationOptions::default()\n    ).await?;\n\n    // Phase 1: Enhanced Meta Tags (2025 best practices)\n\n    // SEO Metadata\n    if let Some(desc) = &amp;data.meta_description {\n        println!(\"\ud83d\udcdd Description: {}\", desc);\n    }\n\n    if !data.meta_keywords.is_empty() {\n        println!(\"\ud83c\udff7\ufe0f  Keywords: {}\", data.meta_keywords.join(\", \"));\n    }\n\n    // Language &amp; Canonicalization\n    if let Some(lang) = &amp;data.language {\n        println!(\"\ud83c\udf10 Language: {}\", lang);\n    }\n\n    if let Some(canonical) = &amp;data.canonical_url {\n        println!(\"\ud83d\udd17 Canonical URL: {}\", canonical);\n    }\n\n    // Open Graph (Social Media)\n    if !data.open_graph.is_empty() {\n        println!(\"\\n\ud83d\udcf1 Open Graph Tags ({})\", data.open_graph.len());\n        for (key, value) in &amp;data.open_graph {\n            println!(\"  og:{}: {}\", key, value);\n        }\n    }\n\n    // Twitter Cards\n    if !data.twitter_card.is_empty() {\n        println!(\"\\n\ud83d\udc26 Twitter Card Tags ({})\", data.twitter_card.len());\n        for (key, value) in &amp;data.twitter_card {\n            println!(\"  twitter:{}: {}\", key, value);\n        }\n    }\n\n    // Core Semantic Data (existing)\n    println!(\"\\n\ud83d\udcc4 Core Data:\");\n    println!(\"  Title: {:?}\", data.title);\n    println!(\"  JSON-LD objects: {}\", data.json_ld.len());\n    println!(\"  Microdata items: {}\", data.microdata.len());\n    println!(\"  Text content: {} chars\", data.text_content.len());\n\n    Ok(())\n}\n</code></pre> <p>Expected Output (example from Microsoft.com): <pre><code>\ud83d\udcdd Description: Explore Microsoft products and services for your home or business...\n\ud83c\udf10 Language: en-US\n\ud83d\udd17 Canonical URL: https://www.microsoft.com/en-us/\n\ud83d\udcf1 Open Graph Tags (5)\n  og:title: Microsoft - Cloud, Computers, Apps &amp; Gaming\n  og:description: At Microsoft our mission and values are to help people...\n  og:url: https://www.microsoft.com/\n  og:image: https://www.microsoft.com/en-us/...\n  og:type: website\n\ud83d\udc26 Twitter Card Tags (3)\n  twitter:card: summary_large_image\n  twitter:site: @Microsoft\n  twitter:image: https://www.microsoft.com/...\n\ud83d\udcc4 Core Data:\n  Title: Some(\"Microsoft - Official Home Page\")\n  JSON-LD objects: 2\n  Microdata items: 1\n  Text content: 4546 chars\n</code></pre></p> <p>Benefits \u2728: - +80% metadata richness vs basic extraction - SEO-ready meta tags for content analysis - Social media preview data (OG + Twitter) - Language detection for i18n - Canonical URL for deduplication - Production-ready for 2025 web standards</p>"},{"location":"user-guide/browser-automation/#example-10-knowledge-graph-integration-new-complete-pipeline","title":"Example 10: Knowledge Graph Integration (\u2728 NEW - Complete Pipeline)","text":"<pre><code>use semantic_browser::browser::{BrowserConfig, BrowserPool, NavigationOptions};\nuse semantic_browser::kg::KnowledgeGraph;\nuse semantic_browser::external::browse_and_insert_kg;\n\n#[tokio::main]\nasync fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {\n    // Setup browser and Knowledge Graph\n    let pool = BrowserPool::new(BrowserConfig::default()).await?;\n    let mut kg = KnowledgeGraph::new();\n\n    // Browse and automatically insert into KG (2025 best practice)\n    let (semantic_data, count) = browse_and_insert_kg(\n        \"https://www.microsoft.com\",\n        NavigationOptions::default(),\n        &amp;mut kg,\n    )\n    .await?;\n\n    println!(\"\u2705 Browsed and inserted {} RDF triples into KG\", count);\n\n    // Phase 1 meta tags are now queryable via SPARQL!\n    let query = r#\"\n        SELECT ?p ?o WHERE {\n            &lt;https://www.microsoft.com&gt; ?p ?o\n        }\n    \"#;\n\n    let results = kg.query(query)?;\n    println!(\"\ud83d\udcca SPARQL query returned {} results:\", results.len());\n    for result in results.iter().take(10) {\n        println!(\"  {}\", result);\n    }\n\n    // Query specific Open Graph data\n    let og_query = r#\"\n        SELECT ?o WHERE {\n            &lt;https://www.microsoft.com&gt; &lt;http://ogp.me/ns#title&gt; ?o\n        }\n    \"#;\n\n    let og_results = kg.query(og_query)?;\n    println!(\"\\n\ud83c\udff7\ufe0f  Open Graph title: {:?}\", og_results);\n\n    // Query by language\n    if let Some(lang) = &amp;semantic_data.language {\n        let lang_query = format!(\n            r#\"SELECT ?o WHERE {{ &lt;https://www.microsoft.com&gt; &lt;http://purl.org/dc/terms/language&gt; \"{}\" }}\"#,\n            lang\n        );\n        let lang_results = kg.query(&amp;lang_query)?;\n        println!(\"\ud83c\udf10 Language: {:?}\", lang_results);\n    }\n\n    pool.shutdown().await?;\n    Ok(())\n}\n</code></pre> <p>Expected Output: <pre><code>\u2705 Browsed and inserted 15 RDF triples into KG\n\ud83d\udcca SPARQL query returned 15 results:\n  &lt;https://www.microsoft.com&gt; &lt;http://purl.org/dc/terms/title&gt; \"Microsoft - Official Home Page\"@en\n  &lt;https://www.microsoft.com&gt; &lt;http://purl.org/dc/terms/description&gt; \"Explore Microsoft products...\"@en\n  &lt;https://www.microsoft.com&gt; &lt;http://purl.org/dc/terms/language&gt; \"en-US\"\n  &lt;https://www.microsoft.com&gt; &lt;http://ogp.me/ns#title&gt; \"Microsoft - Cloud, Computers, Apps &amp; Gaming\"\n  &lt;https://www.microsoft.com&gt; &lt;http://ogp.me/ns#type&gt; \"website\"\n  &lt;https://www.microsoft.com&gt; &lt;https://dev.twitter.com/cards/markup#card&gt; \"summary_large_image\"\n  &lt;https://www.microsoft.com&gt; &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;https://schema.org/WebPage&gt;\n  ...\n</code></pre></p> <p>Benefits \u2728: - Complete Semantic Web integration (W3C standards) - SPARQL queries on browsed content - RDF triple storage for graph-based reasoning - Language-tagged literals for i18n - Namespace-aware (og:, twitter:, schema:, dcterms:) - AI agent-ready - structured knowledge extraction</p> <p>Use Cases: - Build knowledge graphs from web content - Semantic search across multiple websites - Content deduplication via canonical URLs - Multilingual content analysis - Link prediction and reasoning with KG embeddings</p>"},{"location":"user-guide/browser-automation/#api-reference","title":"API Reference","text":""},{"location":"user-guide/browser-automation/#browserpool-methods","title":"BrowserPool Methods","text":""},{"location":"user-guide/browser-automation/#newconfig-browserconfig-resultself","title":"<code>new(config: BrowserConfig) -&gt; Result&lt;Self&gt;</code>","text":"<p>Create new browser pool with configuration.</p>"},{"location":"user-guide/browser-automation/#navigate_and_extracturl-str-options-navigationoptions-resultsemanticdata","title":"<code>navigate_and_extract(url: &amp;str, options: NavigationOptions) -&gt; Result&lt;SemanticData&gt;</code>","text":"<p>Navigate to URL and extract semantic data with automatic retry.</p> <p>Parameters: - <code>url: &amp;str</code> - Target URL - <code>options: NavigationOptions</code> - Navigation configuration (see below)</p> <p>Returns: <code>SemanticData</code> containing:</p> <p>Core Fields: - <code>title: Option&lt;String&gt;</code> - Page title - <code>json_ld: Vec&lt;serde_json::Value&gt;</code> - JSON-LD structured data objects - <code>microdata: Vec&lt;MicrodataItem&gt;</code> - Schema.org microdata items - <code>text_content: String</code> - Clean text content (scripts/styles removed) - <code>screenshot: Option&lt;Vec&lt;u8&gt;&gt;</code> - Screenshot bytes (if requested) - <code>final_url: String</code> - Final URL after redirects</p> <p>Phase 1: Enhanced Meta Tags (2025 best practices) \u2728: - <code>meta_description: Option&lt;String&gt;</code> - SEO meta description - <code>meta_keywords: Vec&lt;String&gt;</code> - SEO keywords (comma-separated, trimmed) - <code>language: Option&lt;String&gt;</code> - Page language code (from <code>&lt;html lang=\"...\"&gt;</code>) - <code>canonical_url: Option&lt;String&gt;</code> - Canonical URL (from <code>&lt;link rel=\"canonical\"&gt;</code>) - <code>open_graph: HashMap&lt;String, String&gt;</code> - Open Graph meta tags (og:title, og:image, etc.) - <code>twitter_card: HashMap&lt;String, String&gt;</code> - Twitter Card meta tags (twitter:card, twitter:site, etc.)</p>"},{"location":"user-guide/browser-automation/#take_screenshoturl-str-resultvecu8","title":"<code>take_screenshot(url: &amp;str) -&gt; Result&lt;Vec&lt;u8&gt;&gt;</code>","text":"<p>Navigate and capture screenshot.</p>"},{"location":"user-guide/browser-automation/#execute_jsurl-str-js_code-str-resultserde_jsonvalue","title":"<code>execute_js(url: &amp;str, js_code: &amp;str) -&gt; Result&lt;serde_json::Value&gt;</code>","text":"<p>Navigate and execute custom JavaScript.</p>"},{"location":"user-guide/browser-automation/#health_check-bool-new","title":"<code>health_check() -&gt; bool</code> (\u2705 NEW)","text":"<p>Check browser health status.</p> <p>Returns: <code>true</code> if browser is running and responsive, <code>false</code> otherwise.</p> <p>Use Case: Kubernetes liveness/readiness probes, periodic monitoring.</p>"},{"location":"user-guide/browser-automation/#restart_if_unhealthy-result-new","title":"<code>restart_if_unhealthy() -&gt; Result&lt;()&gt;</code> (\u2705 NEW)","text":"<p>Check health and restart browser if unhealthy.</p> <p>Auto-Recovery: Automatically handles browser crashes and hangs.</p>"},{"location":"user-guide/browser-automation/#shutdown-result","title":"<code>shutdown() -&gt; Result&lt;()&gt;</code>","text":"<p>Shutdown browser pool and cleanup resources.</p>"},{"location":"user-guide/browser-automation/#external-module-integration","title":"External Module Integration","text":""},{"location":"user-guide/browser-automation/#browse_with_chromiumurl-str-query-str-resultbrowseoutcome","title":"<code>browse_with_chromium(url: &amp;str, query: &amp;str) -&gt; Result&lt;BrowseOutcome&gt;</code>","text":"<p>Primary method using chromiumoxide (when feature enabled).</p> <p>Returns a <code>BrowseOutcome</code> containing the legacy summary text (<code>summary</code>) and a <code>SemanticSnapshot</code> with structured metadata, query matches, and text preview.</p>"},{"location":"user-guide/browser-automation/#browse_with_best_availableurl-str-query-str-resultbrowseoutcome","title":"<code>browse_with_best_available(url: &amp;str, query: &amp;str) -&gt; Result&lt;BrowseOutcome&gt;</code>","text":"<p>Recommended: Smart fallback (chromium \u2192 HTTP) with the same structured payload as <code>browse_with_chromium</code>.</p> <pre><code>use semantic_browser::external::browse_with_best_available;\n\nlet outcome = browse_with_best_available(\"https://example.com\", \"latest news\").await?;\n\nprintln!(\"{}\", outcome.summary);\nfor match_item in &amp;outcome.snapshot.query_matches {\n    println!(\"- [{} | {:.2}] {}\", match_item.element, match_item.score, match_item.excerpt);\n}\n</code></pre>"},{"location":"user-guide/browser-automation/#browse_with_chromium_fullurl-str-options-navigationoptions-resultsemanticdata","title":"<code>browse_with_chromium_full(url: &amp;str, options: NavigationOptions) -&gt; Result&lt;SemanticData&gt;</code>","text":"<p>Returns full <code>SemanticData</code> structure for KG integration.</p>"},{"location":"user-guide/browser-automation/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/browser-automation/#1-resource-management","title":"1. Resource Management","text":"<p>Use pool for multiple requests: <pre><code>let pool = BrowserPool::new(config).await?;\n\n// Reuse pool for multiple navigations\nfor url in urls {\n    let data = pool.navigate_and_extract(&amp;url, options.clone()).await?;\n    // Process data\n}\n\n// Cleanup\npool.shutdown().await?;\n</code></pre></p>"},{"location":"user-guide/browser-automation/#2-minimalist-browsing","title":"2. Minimalist Browsing","text":"<p>\u2705 NEW: Full Resource Blocking: <pre><code>let config = BrowserConfig {\n    block_ads: true,       // Block ads, trackers, analytics (13 patterns)\n    block_images: true,    // Block images (8 formats)\n    ..Default::default()\n};\n</code></pre></p> <p>Resource Blocking Patterns:</p> <p>Ads &amp; Trackers (<code>block_ads: true</code>): - <code>*doubleclick.net*</code>, <code>*googleadservices.com*</code>, <code>*googlesyndication.com*</code> - <code>*google-analytics.com*</code>, <code>*googletagmanager.com*</code> - <code>*facebook.com/tr/*</code>, <code>*facebook.net*</code> - <code>*adservice*</code>, <code>*advertisement*</code>, <code>*/ads/*</code> - <code>*analytics*</code>, <code>*tracking*</code>, <code>*tracker*</code></p> <p>Images (<code>block_images: true</code>): - <code>*.jpg</code>, <code>*.jpeg</code>, <code>*.png</code>, <code>*.gif</code>, <code>*.webp</code>, <code>*.bmp</code>, <code>*.svg</code>, <code>*.ico</code></p> <p>Benefits: - \ud83d\ude80 Faster page loads - Skip unnecessary resources - \ud83d\udcbe Reduced bandwidth - Text-only extraction - \ud83c\udfaf Focused extraction - Only semantic content - \ud83d\udd12 Privacy - Block tracking scripts</p>"},{"location":"user-guide/browser-automation/#3-timeout-management","title":"3. Timeout Management","text":"<p>Set appropriate timeouts: <pre><code>let config = BrowserConfig {\n    timeout_secs: 30,  // 30s for most sites\n    // timeout_secs: 60,  // 60s for slow sites\n    ..Default::default()\n};\n</code></pre></p>"},{"location":"user-guide/browser-automation/#4-retry-logic-new","title":"4. Retry Logic (\u2705 NEW)","text":"<p>Automatic retry with exponential backoff: <pre><code>let options = NavigationOptions {\n    max_retries: 3,  // Default: 3 attempts (total 4 tries)\n    ..Default::default()\n};\n\nlet data = pool.navigate_and_extract(\"https://unstable-site.com\", options).await?;\n</code></pre></p> <p>Retry Behavior: - Attempt 1: Immediate (0s delay) - Attempt 2: After 1s delay - Attempt 3: After 2s delay - Attempt 4: After 4s delay</p> <p>When Retries Trigger: - Navigation timeout - Network errors - Page load failures - JavaScript errors</p> <p>Best Practices: - Use <code>max_retries: 0</code> for fast-fail scenarios - Use <code>max_retries: 3</code> (default) for production resilience - Use <code>max_retries: 5+</code> for critical scraping tasks</p>"},{"location":"user-guide/browser-automation/#5-health-checks-new","title":"5. Health Checks (\u2705 NEW)","text":"<p>Production-Ready Monitoring: <pre><code>// Kubernetes liveness probe\nlet is_healthy = pool.health_check().await;\nif !is_healthy {\n    // Trigger alert/restart\n    pool.restart_if_unhealthy().await?;\n}\n</code></pre></p> <p>Auto-Recovery: <pre><code>// Periodic health check with auto-restart\nloop {\n    tokio::time::sleep(Duration::from_secs(60)).await;\n\n    if !pool.health_check().await {\n        tracing::warn!(\"Browser unhealthy, restarting...\");\n        pool.restart_if_unhealthy().await?;\n    }\n}\n</code></pre></p> <p>Health Check Criteria: - \u2705 Browser process running - \u2705 Can create new pages - \u2705 Responds within 5s timeout - \u274c Crashes or hangs</p>"},{"location":"user-guide/browser-automation/#6-wait-for-dynamic-content-enhanced","title":"6. Wait for Dynamic Content (\u2705 ENHANCED)","text":"<p>Real selector waiting with exponential backoff: <pre><code>let options = NavigationOptions {\n    wait_for_selector: Some(\"#dynamic-content\".to_string()),\n    ..Default::default()\n};\n\n// Waits up to timeout_secs for selector to appear\n// Polling interval: 100ms \u2192 200ms \u2192 400ms \u2192 500ms (capped)\nlet data = pool.navigate_and_extract(\"https://spa.com\", options).await?;\n</code></pre></p> <p>Use Cases: - Single-Page Applications (SPAs) - AJAX-loaded content - Infinite scroll pages - Dynamic forms</p> <p>Example: Wait for Search Results: <pre><code>let options = NavigationOptions {\n    wait_for_selector: Some(\".search-results\").to_string(),\n    execute_js: Some(\"window.scrollTo(0, document.body.scrollHeight)\".to_string()),\n    ..Default::default()\n};\n</code></pre></p>"},{"location":"user-guide/browser-automation/#7-error-handling","title":"7. Error Handling","text":"<p>Graceful fallback: <pre><code>match browse_with_chromium(url, query).await {\n    Ok(data) =&gt; {\n        // Use chromium data\n    }\n    Err(e) =&gt; {\n        tracing::warn!(\"Chromium failed: {}, falling back to HTTP\", e);\n        let data = browse_with_browser_use(url, query).await?;\n        // Use HTTP fallback\n    }\n}\n</code></pre></p>"},{"location":"user-guide/browser-automation/#5-docker-deployment","title":"5. Docker Deployment","text":"<p>Dockerfile optimizations: <pre><code>FROM rust:alpine\n\n# Install Chromium\nRUN apk add --no-cache \\\n    chromium \\\n    nss \\\n    freetype \\\n    harfbuzz \\\n    ttf-freefont\n\n# Required for headless mode\nENV CHROMIUM_PATH=/usr/bin/chromium-browser\nENV BROWSER_HEADLESS=true\nENV CHROME_BIN=/usr/bin/chromium-browser\nENV CHROME_PATH=/usr/lib/chromium/\n\n# Disable sandboxing (required in Docker)\nRUN echo 'CHROMIUM_FLAGS=\"--disable-gpu --no-sandbox --disable-dev-shm-usage\"' \\\n    &gt;&gt; /etc/chromium/chromium.conf\n</code></pre></p>"},{"location":"user-guide/browser-automation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/browser-automation/#chromium-not-found","title":"Chromium Not Found","text":"<p>Error: <code>\"Failed to launch browser\"</code></p> <p>Solutions: 1. Install Chromium/Chrome (see Installation) 2. Set <code>CHROMIUM_PATH</code> in <code>.env</code>:    <pre><code># Linux\nCHROMIUM_PATH=/usr/bin/chromium-browser\n\n# macOS\nCHROMIUM_PATH=\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"\n</code></pre> 3. Verify installation:    <pre><code>which chromium-browser\nls -la $CHROMIUM_PATH\n</code></pre></p>"},{"location":"user-guide/browser-automation/#docker-sandbox-issues","title":"Docker Sandbox Issues","text":"<p>Error: <code>\"No usable sandbox\"</code></p> <p>Solution: Add flags in Dockerfile: <pre><code>ENV CHROME_FLAGS=\"--no-sandbox --disable-dev-shm-usage\"\n</code></pre></p> <p>Or in browser code (already handled): <pre><code>builder = builder\n    .arg(\"--no-sandbox\")\n    .arg(\"--disable-dev-shm-usage\");\n</code></pre></p>"},{"location":"user-guide/browser-automation/#memory-issues","title":"Memory Issues","text":"<p>Symptoms: Browser crashes, OOM errors</p> <p>Solutions: 1. Reduce pool size:    <pre><code>BROWSER_POOL_SIZE=1\n</code></pre></p> <ol> <li> <p>Block images:    <pre><code>BLOCK_IMAGES=true\n</code></pre></p> </li> <li> <p>Increase Docker memory:    <pre><code>docker run -m 2g ...\n</code></pre></p> </li> </ol>"},{"location":"user-guide/browser-automation/#timeout-errors","title":"Timeout Errors","text":"<p>Error: <code>\"Navigation timeout\"</code></p> <p>Solutions: 1. Increase timeout:    <pre><code>BROWSER_TIMEOUT_SECS=60\n</code></pre></p> <ol> <li>Wait for specific selector:    <pre><code>let options = NavigationOptions {\n    wait_for_selector: Some(\"body\".to_string()),\n    ..Default::default()\n};\n</code></pre></li> </ol>"},{"location":"user-guide/browser-automation/#javascript-errors","title":"JavaScript Errors","text":"<p>Symptoms: Missing content, blank pages</p> <p>Solutions: 1. Wait for content:    <pre><code>wait_for_selector: Some(\".main-content\".to_string())\n</code></pre></p> <ol> <li>Execute custom JS:    <pre><code>execute_js: Some(\"window.scrollTo(0, 1000);\".to_string())\n</code></pre></li> </ol>"},{"location":"user-guide/browser-automation/#known-issues-non-critical","title":"Known Issues (Non-Critical)","text":""},{"location":"user-guide/browser-automation/#cdp-deserialization-warnings","title":"CDP Deserialization Warnings","text":"<p>Symptoms: Log warnings like: <pre><code>ERROR chromiumoxide::conn: Failed to deserialize WS response\ndata did not match any variant of untagged enum Message\n</code></pre></p> <p>Status: \u26a0\ufe0f Expected behavior - NOT critical</p> <p>Explanation: - chromiumoxide 0.7 occasionally receives CDP messages it doesn't recognize - These are harmless internal warnings - Navigation, extraction, and all features work correctly - Does NOT impact functionality or reliability</p> <p>Why This Happens: - Chrome DevTools Protocol evolves rapidly - chromiumoxide parser doesn't handle every experimental CDP message - Your browser automation still works perfectly</p> <p>Solution: No action needed - these warnings are safe to ignore.</p> <p>Optional - Filter These Warnings:</p> <p>If you want cleaner logs in production:</p> <pre><code># Suppress chromiumoxide internal warnings while keeping app logs\n# Note: As of 2025, this is now the default log level in the application\nexport RUST_LOG=\"chromiumoxide::conn=error,chromiumoxide::handler=error,semantic_browser=info\"\n</code></pre> <p>Or in code: <pre><code>tracing_subscriber::fmt()\n    .with_env_filter(\n        \"chromiumoxide::conn=error,chromiumoxide::handler=error,semantic_browser=info\"\n    )\n    .init();\n</code></pre></p> <p>Production Logging Best Practice: <pre><code># Recommended RUST_LOG for production (now default in application)\nRUST_LOG=\"warn,semantic_browser=info,chromiumoxide::conn=off,chromiumoxide::handler=off\"\n</code></pre></p> <p>This configuration: - \u2705 Shows important app logs (<code>semantic_browser=info</code>) - \u2705 Shows warnings from other crates (<code>warn</code>) - \u2705 Silences chromiumoxide internal warnings (<code>=off</code>) - \u2705 Clean, actionable logs</p> <p>Verification: Despite these warnings, check that: - \u2705 \"Successfully extracted semantic data\" appears in logs - \u2705 API returns data correctly - \u2705 No actual errors in your application</p>"},{"location":"user-guide/browser-automation/#performance-tuning","title":"Performance Tuning","text":""},{"location":"user-guide/browser-automation/#concurrent-requests","title":"Concurrent Requests","text":"<p>Adjust pool size: <pre><code># Low memory (1 tab)\nBROWSER_POOL_SIZE=1\n\n# Standard (2-3 tabs)\nBROWSER_POOL_SIZE=2\n\n# High performance (4+ tabs, requires 4GB+ RAM)\nBROWSER_POOL_SIZE=4\n</code></pre></p>"},{"location":"user-guide/browser-automation/#resource-blocking-implemented","title":"Resource Blocking (\u2705 IMPLEMENTED)","text":"<p>Status: \u2705 Fully implemented via CDP <code>Network.setBlockedURLs</code></p> <p>Available: - <code>block_ads</code>: \u2705 Blocks 13 ad/tracker patterns - <code>block_images</code>: \u2705 Blocks 8 image formats</p> <pre><code>// Production-ready resource blocking\nlet config = BrowserConfig {\n    block_ads: true,      // Blocks ads, trackers, analytics\n    block_images: true,   // Blocks jpg, png, gif, webp, etc.\n    ..Default::default()\n};\n</code></pre> <p>Patterns Blocked: - Ads: <code>*doubleclick.net*</code>, <code>*googleads*</code>, <code>*analytics*</code>, etc. (13 patterns) - Images: <code>*.jpg</code>, <code>*.png</code>, <code>*.gif</code>, <code>*.webp</code>, etc. (8 formats)</p> <p>Performance Impact: - \u26a1 30-50% faster page loads - \ud83d\udcbe 60-80% less bandwidth - \ud83c\udfaf Text-only extraction optimized</p>"},{"location":"user-guide/browser-automation/#headless-mode","title":"Headless Mode","text":"<p>Performance: Headless vs Headed</p> Mode CPU Memory Speed Headless ~50% ~200MB 1x Headed ~80% ~350MB 0.7x <p>Always use headless in production: <pre><code>BROWSER_HEADLESS=true\n</code></pre></p>"},{"location":"user-guide/browser-automation/#production-deployment","title":"Production Deployment","text":""},{"location":"user-guide/browser-automation/#logging-configuration","title":"Logging Configuration","text":"<p>Environment Setup: <pre><code># Production logging - clean and actionable\nexport RUST_LOG=\"warn,semantic_browser=info,chromiumoxide::conn=off,chromiumoxide::handler=off\"\n\n# Development logging - verbose\nexport RUST_LOG=\"debug,chromiumoxide=trace\"\n\n# Minimal logging - errors only\nexport RUST_LOG=\"error,semantic_browser=warn\"\n</code></pre></p> <p>Structured Logging Example: <pre><code>use tracing_subscriber::{fmt, EnvFilter};\n\n// Initialize with production defaults\ntracing_subscriber::fmt()\n    .with_env_filter(\n        EnvFilter::try_from_default_env()\n            .unwrap_or_else(|_| \"warn,semantic_browser=info,chromiumoxide::conn=off\".into())\n    )\n    .json() // JSON format for log aggregation\n    .init();\n</code></pre></p> <p>Log Levels Best Practices:</p> Environment Level Chromiumoxide Rationale Production <code>info</code> <code>off</code> Clean logs, hide CDP warnings Staging <code>debug</code> <code>error</code> Detailed logs, minimal noise Development <code>trace</code> <code>trace</code> Full debugging info <p>Kubernetes ConfigMap: <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: semantic-browser-config\ndata:\n  RUST_LOG: \"warn,semantic_browser=info,chromiumoxide::conn=off,chromiumoxide::handler=off\"\n  BROWSER_HEADLESS: \"true\"\n  BLOCK_ADS: \"true\"\n  BROWSER_TIMEOUT_SECS: \"30\"\n</code></pre></p>"},{"location":"user-guide/browser-automation/#health-checks-for-k8s","title":"Health Checks for K8s","text":"<p>Liveness Probe (check if browser is alive): <pre><code>livenessProbe:\n  exec:\n    command:\n    - /bin/sh\n    - -c\n    - \"curl -f http://localhost:3000/health || exit 1\"\n  initialDelaySeconds: 30\n  periodSeconds: 60\n  timeoutSeconds: 5\n  failureThreshold: 3\n</code></pre></p> <p>Readiness Probe (check if ready to serve): <pre><code>readinessProbe:\n  exec:\n    command:\n    - /bin/sh\n    - -c\n    - \"curl -f http://localhost:3000/health || exit 1\"\n  initialDelaySeconds: 10\n  periodSeconds: 10\n  timeoutSeconds: 5\n</code></pre></p> <p>Health Check Endpoint (add to your API): <pre><code>use axum::{Router, routing::get};\n\nasync fn health_check(\n    State(pool): State&lt;Arc&lt;BrowserPool&gt;&gt;\n) -&gt; impl IntoResponse {\n    if pool.health_check().await {\n        (StatusCode::OK, \"healthy\")\n    } else {\n        (StatusCode::SERVICE_UNAVAILABLE, \"unhealthy\")\n    }\n}\n\nlet app = Router::new()\n    .route(\"/health\", get(health_check))\n    .with_state(pool);\n</code></pre></p>"},{"location":"user-guide/browser-automation/#monitoring-best-practices","title":"Monitoring Best Practices","text":"<p>Key Metrics to Track: 1. Navigation success rate - Track failed navigations 2. Retry count - Monitor how often retries happen 3. Health check failures - Alert on browser crashes 4. Resource blocking effectiveness - Bandwidth saved 5. Response times - P50, P95, P99 latencies</p> <p>Example Logging: <pre><code>use tracing::{info, warn, error};\n\n// Success\ninfo!(\n    url = %final_url,\n    duration_ms = elapsed.as_millis(),\n    retry_count = attempts,\n    \"Navigation successful\"\n);\n\n// Failure\nerror!(\n    url = %url,\n    error = %e,\n    retry_count = attempts,\n    \"Navigation failed after retries\"\n);\n</code></pre></p>"},{"location":"user-guide/browser-automation/#docker-production-setup","title":"Docker Production Setup","text":"<p>Optimized Dockerfile: <pre><code>FROM rust:1.75-alpine AS builder\nRUN apk add --no-cache musl-dev chromium\nWORKDIR /app\nCOPY . .\nRUN cargo build --release --features browser-automation\n\nFROM alpine:latest\nRUN apk add --no-cache chromium nss freetype harfbuzz ttf-freefont\nCOPY --from=builder /app/target/release/semantic_browser_agent /usr/local/bin/\n\nENV RUST_LOG=\"warn,semantic_browser=info,chromiumoxide::conn=off,chromiumoxide::handler=off\"\nENV BROWSER_HEADLESS=true\nENV BLOCK_ADS=true\n\nCMD [\"semantic_browser_agent\"]\n</code></pre></p> <p>Resource Limits: <pre><code>resources:\n  requests:\n    memory: \"512Mi\"\n    cpu: \"500m\"\n  limits:\n    memory: \"2Gi\"\n    cpu: \"2000m\"\n</code></pre></p>"},{"location":"user-guide/browser-automation/#security-considerations","title":"Security Considerations","text":"<ol> <li>Sandbox isolation: Chromium runs with <code>--no-sandbox</code> in Docker (required)</li> <li>Resource limits: Use <code>BROWSER_POOL_SIZE</code> to limit concurrent browsers</li> <li>Timeout enforcement: Always set <code>BROWSER_TIMEOUT_SECS</code></li> <li>URL validation: Validate URLs before navigation</li> <li>Cookie isolation: Each navigation can have isolated cookies</li> <li>Log sanitization: Filter sensitive data from logs</li> <li>User data directory: Isolate profiles per tenant if multi-tenant</li> </ol>"},{"location":"user-guide/browser-automation/#migration-from-python-browser-use","title":"Migration from Python browser-use","text":"<p>Before (Python subprocess): <pre><code>let outcome = browse_with_python_browser_use(url, query).await?;\nprintln!(\"{}\", outcome.summary);\n</code></pre></p> <p>After (Rust chromiumoxide): <pre><code>let outcome = browse_with_best_available(url, query).await?;\nprintln!(\"{}\", outcome.summary);\n// Falls back to HTTP if chromiumoxide unavailable and still returns the same snapshot shape\n</code></pre></p> <p>Benefits: - \u2705 No Python dependency - \u2705 Type safety - \u2705 Better performance - \u2705 Easier deployment</p>"},{"location":"user-guide/browser-automation/#examples","title":"Examples","text":"<p>See working examples in: - <code>tests/browser_test.rs</code> - Integration tests - <code>docs/examples/browse_with_browser.sh</code> - Shell script example</p>"},{"location":"user-guide/browser-automation/#references","title":"References","text":"<ul> <li>chromiumoxide Documentation</li> <li>Chrome DevTools Protocol</li> <li>Chromium Command Line Switches</li> </ul> <p>Last Updated: 2025-10-21</p>"},{"location":"user-guide/core-operations/","title":"Core Operations Guide","text":"<p>Questo documento descrive come eseguire il Semantic Browser con la configurazione minima, come validare rapidamente le API principali e come far fluire i dati lungo una pipeline agente \u2192 knowledge graph senza attivare feature opzionali.</p>"},{"location":"user-guide/core-operations/#configurazione-minima","title":"Configurazione Minima","text":"<ul> <li>Build di default (<code>cargo build</code>) senza feature flag extra.</li> <li>Variabili richieste:</li> <li><code>JWT_SECRET</code>: stringa di almeno 32 caratteri per abilitare l'autenticazione.</li> <li><code>KG_PERSIST_PATH</code> (opzionale): percorso directory per persistenza del knowledge graph.</li> <li>Logging: usa <code>RUST_LOG=semantic_browser=info</code> per vedere solo i log core.</li> </ul>"},{"location":"user-guide/core-operations/#smoke-test-api","title":"Smoke Test API","text":"<ol> <li>Avvia il server: <code>JWT_SECRET=\"...\" cargo run</code>.</li> <li>Esegui parse di una pagina:    <pre><code>curl -X POST http://127.0.0.1:3000/parse \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer secret\" \\\n  -d '{\"html\":\"&lt;html&gt;&lt;head&gt;&lt;title&gt;Demo&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Acme Corp.&lt;/body&gt;&lt;/html&gt;\"}'\n</code></pre></li> <li>Inserisci triple con SPARQL:    <pre><code>curl -X POST http://127.0.0.1:3000/query \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer secret\" \\\n  -d '{\"query\":\"INSERT DATA { &lt;http://example.org/acme&gt; &lt;http://schema.org/name&gt; \\\"Acme\\\" }\"}'\n</code></pre></li> <li>Conferma che le triple sono presenti:    <pre><code>curl -X POST http://127.0.0.1:3000/query \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer secret\" \\\n  -d '{\"query\":\"SELECT ?s ?p ?o WHERE { ?s ?p ?o } LIMIT 5\"}'\n</code></pre></li> <li>Verifica il rate limiting inviando pi\u00f9 di 10 richieste/minuto allo stesso endpoint:    <pre><code>for _ in {1..12}; do\n  curl -s -o /dev/null -w \"%{http_code}\\n\" \\\n    -H \"Authorization: Bearer secret\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"html\":\"&lt;html&gt;&lt;/html&gt;\"}' \\\n    http://127.0.0.1:3000/parse;\ndone\n</code></pre>    Le ultime risposte devono ritornare <code>429</code> con messaggio \"Rate limit exceeded\".</li> </ol>"},{"location":"user-guide/core-operations/#pipeline-agente-di-base","title":"Pipeline Agente di Base","text":"<ol> <li>Input: l'agente ottiene HTML (da crawler o hook browser).</li> <li>Parsing: invia il payload a <code>/parse</code> per ricavare titolo, microdata e JSON-LD.</li> <li>Annotazione: se necessario, usa <code>annotate_html</code> (in locale) per estrarre entit\u00e0 dal testo.</li> <li>Persistenza: inserisce triple nel KG (<code>kg.insert</code> oppure SPARQL <code>INSERT</code> via <code>/query</code>).</li> <li>Query: esegue query <code>SELECT</code>/<code>ASK</code> per generare insight contestuali.</li> <li>Azioni: restituisce risposta all'utente o triggera automazioni esterne.</li> </ol>"},{"location":"user-guide/core-operations/#sparql-pronto-alluso","title":"SPARQL Pronto all'Uso","text":"<ul> <li>Ultime entit\u00e0 inserite:   <pre><code>SELECT ?s ?p ?o WHERE { ?s ?p ?o } ORDER BY DESC(?o) LIMIT 10\n</code></pre></li> <li>Risorse legate ad un soggetto:   <pre><code>SELECT ?predicate ?object\nWHERE {\n  &lt;http://example.org/resource&gt; ?predicate ?object\n}\n</code></pre></li> <li>Esistenza relazione:   <pre><code>ASK {\n  &lt;http://example.org/person&gt; &lt;http://schema.org/worksFor&gt; &lt;http://example.org/company&gt;\n}\n</code></pre></li> </ul>"},{"location":"user-guide/core-operations/#feedback-rapido","title":"Feedback Rapido","text":"<ul> <li>Attiva log dettagliati: <code>RUST_LOG=debug cargo run</code> per collezionare feedback.</li> <li>Apri issue con snippet di log e query utilizzate per riprodurre eventuali problemi.</li> </ul>"},{"location":"user-guide/docker-setup/","title":"Docker Environment - Semantic Browser","text":"<p>Complete Docker setup for development, testing, and production deployment.</p>"},{"location":"user-guide/docker-setup/#architecture-overview","title":"Architecture Overview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                      Docker Architecture                         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                                   \u2502\n\u2502  Production/Development (docker-compose.yml)                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502  semantic_browser                                         \u2502  \u2502\n\u2502  \u2502  \u251c\u2500 Rust Application (optimized build)                   \u2502  \u2502\n\u2502  \u2502  \u251c\u2500 Health Checks                                         \u2502  \u2502\n\u2502  \u2502  \u251c\u2500 Volume: /data/kg (persistent KG)                     \u2502  \u2502\n\u2502  \u2502  \u2514\u2500 Network: semantic_net (isolated)                     \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                                                                   \u2502\n\u2502  Testing Environment (docker-compose.test.yml)                   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502  test_runner         lint_runner        benchmark        \u2502  \u2502\n\u2502  \u2502  \u251c\u2500 Unit Tests       \u251c\u2500 cargo fmt       \u251c\u2500 Performance  \u2502  \u2502\n\u2502  \u2502  \u2514\u2500 Integration      \u2514\u2500 cargo clippy    \u2514\u2500 Benchmarks   \u2502  \u2502\n\u2502  \u2502                                                            \u2502  \u2502\n\u2502  \u2502  integration_test \u25c4\u2500\u2500\u25ba test_server                       \u2502  \u2502\n\u2502  \u2502  \u251c\u2500 E2E Tests          \u251c\u2500 Live API                       \u2502  \u2502\n\u2502  \u2502  \u2514\u2500 API Testing        \u2514\u2500 Health Checks                  \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                                                                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/docker-setup/#files-structure","title":"Files Structure","text":"<pre><code>.\n\u251c\u2500\u2500 docker/Dockerfile            # Production/dev multi-stage build\n\u251c\u2500\u2500 docker/Dockerfile.test       # Test environment (multi-target)\n\u251c\u2500\u2500 docker/docker-compose.yml    # Production/dev orchestration\n\u251c\u2500\u2500 docker/docker-compose.test.yml # Test orchestration\n\u251c\u2500\u2500 docker/.dockerignore         # Build optimization\n\u251c\u2500\u2500 config/\n\u2502   \u2514\u2500\u2500 .env.example           # Environment template\n\u2502\n\u251c\u2500\u2500 docker/scripts/\n\u2502   \u251c\u2500\u2500 docker-build.sh         # Build automation\n\u2502   \u251c\u2500\u2500 docker-up.sh            # Startup automation\n\u2502   \u2514\u2500\u2500 docker-test.sh          # Test automation\n\u2502\n\u2514\u2500\u2500 data/\n    \u2514\u2500\u2500 kg/                     # Persistent KG storage\n</code></pre>"},{"location":"user-guide/docker-setup/#dockerfile-production-build","title":"Dockerfile - Production Build","text":""},{"location":"user-guide/docker-setup/#multi-stage-build-strategy","title":"Multi-Stage Build Strategy","text":"<p>Stage 1: Dependencies (Cached) <pre><code>FROM rust:1.75-slim as builder\n# Build dependencies only (cached layer)\n</code></pre></p> <p>Stage 2: Application Build <pre><code># Copy source and build app\n# Only rebuilds when source changes\n</code></pre></p> <p>Stage 3: Runtime <pre><code>FROM debian:bookworm-slim\n# Minimal runtime with:\n# - Non-root user (security)\n# - Health checks\n# - Python for external tools\n</code></pre></p>"},{"location":"user-guide/docker-setup/#optimizations","title":"Optimizations","text":"<ol> <li>Layer Caching: Dependencies built separately</li> <li>Security: Non-root user (UID 1000)</li> <li>Size: Multi-stage reduces final image size</li> <li>Health Checks: Automatic monitoring</li> <li>Labels: Metadata for tracking</li> </ol>"},{"location":"user-guide/docker-setup/#best-practices","title":"Best Practices","text":"<p>Dockerfile Syntax: - \u2705 All keywords UPPERCASE: <code>FROM</code>, <code>AS</code>, <code>RUN</code>, <code>COPY</code>, <code>ENV</code> - \u2705 Consistent casing improves readability - \u2705 Required for BuildKit strict mode compatibility</p> <p>Example: <pre><code># \u2705 Correct\nFROM rust:1.75-slim AS builder\n\n# \u274c Incorrect (causes BuildKit warnings/errors)\nFROM rust:1.75-slim as builder\n</code></pre></p>"},{"location":"user-guide/docker-setup/#dockerfiletest-testing","title":"Dockerfile.test - Testing","text":""},{"location":"user-guide/docker-setup/#multiple-build-targets","title":"Multiple Build Targets","text":"Target Purpose Tools <code>test</code> Unit &amp; integration tests cargo test <code>lint</code> Code quality rustfmt, clippy <code>bench</code> Performance criterion <code>integration</code> E2E testing curl, jq <code>coverage</code> Code coverage tarpaulin"},{"location":"user-guide/docker-setup/#docker-compose-files","title":"Docker Compose Files","text":""},{"location":"user-guide/docker-setup/#version-specification","title":"Version Specification","text":"<p>Note: These files use the modern Compose Specification format (Docker Compose v2+) and do not require a <code>version</code> attribute. The format is automatically detected.</p>"},{"location":"user-guide/docker-setup/#docker-compose-production","title":"Docker Compose - Production","text":""},{"location":"user-guide/docker-setup/#services","title":"Services","text":"<p>semantic_browser - Main API server - Port: 3000 - Health checks enabled - Persistent volumes - Resource limits - Environment configuration</p>"},{"location":"user-guide/docker-setup/#volumes","title":"Volumes","text":"<ul> <li><code>kg_data</code>: Knowledge Graph persistence</li> <li><code>models</code>: ML models (read-only)</li> <li><code>config</code>: Configuration files (read-only)</li> </ul>"},{"location":"user-guide/docker-setup/#networks","title":"Networks","text":"<ul> <li><code>semantic_net</code>: Isolated bridge network</li> </ul>"},{"location":"user-guide/docker-setup/#docker-compose-testing","title":"Docker Compose - Testing","text":""},{"location":"user-guide/docker-setup/#test-services","title":"Test Services","text":"<ol> <li>test_runner: Runs cargo test</li> <li>lint_runner: Code quality checks</li> <li>integration_test: E2E tests with live server</li> <li>test_server: Test API instance</li> <li>benchmark: Performance tests</li> </ol>"},{"location":"user-guide/docker-setup/#service-dependencies","title":"Service Dependencies","text":"<pre><code>integration_test \u2192 test_server (waits for healthy)\n</code></pre>"},{"location":"user-guide/docker-setup/#shared-volumes","title":"Shared Volumes","text":"<ul> <li>Cargo cache (faster builds)</li> <li>Target cache (build artifacts)</li> <li>Test results</li> <li>Benchmark results</li> </ul>"},{"location":"user-guide/docker-setup/#scripts","title":"Scripts","text":""},{"location":"user-guide/docker-setup/#docker-buildsh","title":"docker-build.sh","text":"<p>Optimized build with options:</p> <pre><code>./docker/scripts/docker-build.sh              # Production build\n./docker/scripts/docker-build.sh --dev        # Development build\n./docker/scripts/docker-build.sh --test       # Test images\n./docker/scripts/docker-build.sh --no-cache   # Force rebuild\n./docker/scripts/docker-build.sh --platform linux/amd64  # Cross-platform\n</code></pre> <p>Features: - Build type selection - Cache control - Platform targeting - Security scanning (trivy) - Size reporting</p>"},{"location":"user-guide/docker-setup/#docker-upsh","title":"docker-up.sh","text":"<p>Service management:</p> <pre><code>./docker/scripts/docker-up.sh -d              # Start in background\n./docker/scripts/docker-up.sh --build -d      # Build &amp; start\n./docker/scripts/docker-up.sh --logs          # View logs\n./docker/scripts/docker-up.sh --stop          # Stop services\n./docker/scripts/docker-up.sh --restart       # Restart\n./docker/scripts/docker-up.sh --status        # Status check\n</code></pre> <p>Features: - Automatic directory creation - Environment loading - Health check waiting - Status monitoring</p>"},{"location":"user-guide/docker-setup/#docker-testsh","title":"docker-test.sh","text":"<p>Comprehensive testing:</p> <pre><code>./docker/scripts/docker-test.sh                    # All tests\n./docker/scripts/docker-test.sh --unit-only        # Unit tests only\n./docker/scripts/docker-test.sh --integration-only # Integration only\n./docker/scripts/docker-test.sh --lint-only        # Linting only\n./docker/scripts/docker-test.sh --with-bench       # Include benchmarks\n./docker/scripts/docker-test.sh --clean            # Cleanup\n</code></pre> <p>Features: - Colored output - Service orchestration - Health check waiting - Automatic cleanup - Test summary</p>"},{"location":"user-guide/docker-setup/#environment-variables","title":"Environment Variables","text":""},{"location":"user-guide/docker-setup/#required","title":"Required","text":"<p>None (all have defaults)</p>"},{"location":"user-guide/docker-setup/#optional","title":"Optional","text":"Variable Description Default <code>RUST_LOG</code> Log level <code>info</code> <code>KG_PERSIST_PATH</code> KG storage path In-memory <code>NER_MODEL_PATH</code> NER model Regex fallback <code>KG_INFERENCE_MODEL_PATH</code> KG inference Rule-based <p>See <code>.env.example</code> for complete list.</p>"},{"location":"user-guide/docker-setup/#best-practices-implemented","title":"Best Practices Implemented","text":""},{"location":"user-guide/docker-setup/#security","title":"Security","text":"<ul> <li>\u2705 Non-root user execution</li> <li>\u2705 Minimal base image (Debian slim)</li> <li>\u2705 No secrets in images</li> <li>\u2705 Read-only volumes where applicable</li> <li>\u2705 Network isolation</li> <li>\u2705 Health checks</li> </ul>"},{"location":"user-guide/docker-setup/#performance","title":"Performance","text":"<ul> <li>\u2705 Multi-stage builds</li> <li>\u2705 Layer caching optimization</li> <li>\u2705 Cargo dependency caching</li> <li>\u2705 Shared volumes for builds</li> <li>\u2705 Resource limits</li> </ul>"},{"location":"user-guide/docker-setup/#reliability","title":"Reliability","text":"<ul> <li>\u2705 Health checks with retries</li> <li>\u2705 Graceful shutdown</li> <li>\u2705 Restart policies</li> <li>\u2705 Service dependencies</li> <li>\u2705 Error handling in scripts</li> </ul>"},{"location":"user-guide/docker-setup/#development","title":"Development","text":"<ul> <li>\u2705 Hot reload (volume mounts)</li> <li>\u2705 Separate test environment</li> <li>\u2705 Build caching</li> <li>\u2705 Easy debugging</li> <li>\u2705 Automated scripts</li> </ul>"},{"location":"user-guide/docker-setup/#workflows","title":"Workflows","text":""},{"location":"user-guide/docker-setup/#development-workflow","title":"Development Workflow","text":"<ol> <li> <p>Copy environment:    <pre><code>cp .env.example .env\n</code></pre></p> </li> <li> <p>Start services:    <pre><code>./docker/scripts/docker-up.sh -d\n</code></pre></p> </li> <li> <p>Watch logs:    <pre><code>docker-compose logs -f\n</code></pre></p> </li> <li> <p>Make changes and test:    <pre><code>./docker/scripts/docker-test.sh --unit-only\n</code></pre></p> </li> </ol>"},{"location":"user-guide/docker-setup/#cicd-workflow","title":"CI/CD Workflow","text":"<ol> <li> <p>Build test image:    <pre><code>docker-compose -f docker-compose.test.yml build\n</code></pre></p> </li> <li> <p>Run linting:    <pre><code>docker-compose -f docker-compose.test.yml run --rm lint_runner\n</code></pre></p> </li> <li> <p>Run tests:    <pre><code>docker-compose -f docker-compose.test.yml run --rm test_runner\n</code></pre></p> </li> <li> <p>Run integration tests:    <pre><code>docker-compose -f docker-compose.test.yml up --abort-on-container-exit\n</code></pre></p> </li> <li> <p>Build production:    <pre><code>docker build -t semantic-browser:latest .\n</code></pre></p> </li> </ol>"},{"location":"user-guide/docker-setup/#production-deployment","title":"Production Deployment","text":"<ol> <li> <p>Configure environment:    <pre><code>cp .env.example .env\n# Edit .env with production values\n</code></pre></p> </li> <li> <p>Build production image:    <pre><code>./docker/scripts/docker-build.sh\n</code></pre></p> </li> <li> <p>Start services:    <pre><code>docker-compose up -d\n</code></pre></p> </li> <li> <p>Verify health:    <pre><code>docker-compose ps\ncurl http://localhost:3000/\n</code></pre></p> </li> <li> <p>Monitor:    <pre><code>docker-compose logs -f --tail=100\n</code></pre></p> </li> </ol>"},{"location":"user-guide/docker-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/docker-setup/#build-issues","title":"Build Issues","text":"<p>Problem: Build fails with dependency errors</p> <p>Solution: <pre><code>./docker/scripts/docker-build.sh --no-cache\n</code></pre></p>"},{"location":"user-guide/docker-setup/#runtime-issues","title":"Runtime Issues","text":"<p>Problem: Service won't start</p> <p>Solution: <pre><code>docker-compose logs semantic_browser\ndocker-compose restart semantic_browser\n</code></pre></p> <p>Problem: Health check fails</p> <p>Solution: <pre><code># Check if port is in use\nlsof -i :3000\n\n# Check container logs\ndocker logs semantic-browser\n\n# Restart with debug logging\nRUST_LOG=debug docker-compose up\n</code></pre></p>"},{"location":"user-guide/docker-setup/#test-issues","title":"Test Issues","text":"<p>Problem: Integration tests timeout</p> <p>Solution: <pre><code># Increase timeout in docker-compose.test.yml\n# Check test server logs\ndocker-compose -f docker-compose.test.yml logs test_server\n</code></pre></p>"},{"location":"user-guide/docker-setup/#performance-tuning","title":"Performance Tuning","text":""},{"location":"user-guide/docker-setup/#build-performance","title":"Build Performance","text":"<ol> <li> <p>Enable BuildKit:    <pre><code>export DOCKER_BUILDKIT=1\n</code></pre></p> </li> <li> <p>Use cache mount (Docker 18.09+):    <pre><code>RUN --mount=type=cache,target=/usr/local/cargo/registry \\\n    cargo build --release\n</code></pre></p> </li> </ol>"},{"location":"user-guide/docker-setup/#runtime-performance","title":"Runtime Performance","text":"<ol> <li> <p>Adjust resource limits in docker-compose.yml:    <pre><code>deploy:\n  resources:\n    limits:\n      cpus: '4'\n      memory: 4G\n</code></pre></p> </li> <li> <p>Use volume for better I/O:    <pre><code>volumes:\n  - type: volume\n    source: kg_data\n    target: /data/kg\n</code></pre></p> </li> </ol>"},{"location":"user-guide/docker-setup/#security-considerations","title":"Security Considerations","text":"<ol> <li>Never commit .env files</li> <li>Change default secrets in production</li> <li>Use Docker secrets for sensitive data</li> <li>Regularly update base images</li> <li>Scan images for vulnerabilities:    <pre><code>trivy image semantic-browser:latest\n</code></pre></li> </ol>"},{"location":"user-guide/docker-setup/#troubleshooting-and-build-cloud-setup","title":"Troubleshooting and Build Cloud Setup","text":""},{"location":"user-guide/docker-setup/#docker-build-cloud-configuration","title":"Docker Build Cloud Configuration","text":"<p>For faster multi-architecture builds, configure Docker Build Cloud:</p>"},{"location":"user-guide/docker-setup/#setup-build-cloud-builder","title":"Setup Build Cloud Builder","text":"<pre><code># Create cloud builder (requires Docker Pro/Premium)\ndocker buildx create --driver cloud --name cloud-builder\n\n# Set as default\ndocker buildx use cloud-builder\n\n# Verify\ndocker buildx inspect\n</code></pre>"},{"location":"user-guide/docker-setup/#build-multi-architecture-images","title":"Build Multi-Architecture Images","text":"<pre><code># Build for multiple platforms\ndocker buildx build --platform linux/amd64,linux/arm64 -t semantic-browser:latest .\n\n# Push to registry\ndocker buildx build --platform linux/amd64,linux/arm64 -t semantic-browser:latest --push\n</code></pre>"},{"location":"user-guide/docker-setup/#common-build-issues-and-solutions","title":"Common Build Issues and Solutions","text":""},{"location":"user-guide/docker-setup/#1-buildkit-casing-errors","title":"1. BuildKit Casing Errors","text":"<p>Problem: <code>FromAsCasing: 'as' and 'FROM' keywords' casing do not match</code></p> <p>Solution: Ensure all Dockerfile keywords are UPPERCASE: <pre><code># Correct\nFROM rust:1.84-slim AS builder\n\n# Incorrect\nFROM rust:1.84-slim as builder\n</code></pre></p>"},{"location":"user-guide/docker-setup/#2-credential-helper-issues","title":"2. Credential Helper Issues","text":"<p>Problem: <code>error getting credentials - err: exit status 1</code></p> <p>Solution (macOS): <pre><code># Use osxkeychain helper\necho '{\"credsStore\": \"osxkeychain\"}' &gt; ~/.docker/config.json\n\n# Symlink helper to PATH\nsudo ln -sf /Applications/Docker.app/Contents/Resources/bin/docker-credential-osxkeychain /usr/local/bin/\n</code></pre></p>"},{"location":"user-guide/docker-setup/#3-missing-build-dependencies","title":"3. Missing Build Dependencies","text":"<p>Problem: Compilation errors for Rust crates</p> <p>Solution: Add required packages to Dockerfile: <pre><code>RUN apt-get update &amp;&amp; apt-get install -y \\\n    build-essential \\\n    pkg-config \\\n    libssl-dev \\\n    libclang-dev \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n</code></pre></p>"},{"location":"user-guide/docker-setup/#4-compose-version-warnings","title":"4. Compose Version Warnings","text":"<p>Problem: <code>WARN[0000] the attribute 'version' is obsolete</code></p> <p>Solution: Remove <code>version</code> field from docker-compose files (Compose v2+).</p>"},{"location":"user-guide/docker-setup/#5-slow-builds","title":"5. Slow Builds","text":"<p>Solutions: - Enable BuildKit: <code>export DOCKER_BUILDKIT=1</code> - Use build cache mounts - Exclude unnecessary files with <code>.dockerignore</code></p>"},{"location":"user-guide/docker-setup/#build-optimization-tips","title":"Build Optimization Tips","text":"<ol> <li>Layer Caching: Order Dockerfile instructions for optimal caching</li> <li>Multi-Stage Builds: Separate build and runtime stages</li> <li>Dependency Caching: Cache Cargo registry and target directories</li> <li>Parallel Builds: Use Build Cloud for concurrent builds</li> </ol>"},{"location":"user-guide/docker-setup/#additional-resources","title":"Additional Resources","text":"<ul> <li>Docker Best Practices</li> <li>Rust Docker Optimization</li> <li>Docker Compose Documentation</li> <li>Docker Build Cloud</li> </ul>"},{"location":"user-guide/quickstart/","title":"Quick Start Guide - Semantic Browser","text":"<p>Get up and running with the Semantic Browser in 5 minutes.</p>"},{"location":"user-guide/quickstart/#prerequisites","title":"Prerequisites","text":"<p>Choose one of: - Docker (Recommended): Docker and Docker Compose - Local: Rust 1.75+, Python 3.x (optional)</p>"},{"location":"user-guide/quickstart/#option-1-docker-recommended","title":"Option 1: Docker (Recommended) \ud83d\udc33","text":""},{"location":"user-guide/quickstart/#step-1-setup-environment","title":"Step 1: Setup Environment","text":"<pre><code># Clone repository (if not already done)\ncd semanticbrowser\n\n# Copy environment template\ncp .env.example .env\n\n# (Optional) Edit .env for custom configuration\n# nano .env\n</code></pre>"},{"location":"user-guide/quickstart/#step-2-start-server","title":"Step 2: Start Server","text":"<pre><code># Build and start in one command\n./docker/scripts/docker-up.sh --build -d\n\n# Or separately:\n./docker/scripts/docker-build.sh\n./docker/scripts/docker-up.sh -d\n</code></pre> <p>Wait for the health check (about 5 seconds): <pre><code>\u2713 Service is healthy and running\n</code></pre></p>"},{"location":"user-guide/quickstart/#step-3-test-the-api","title":"Step 3: Test the API","text":"<pre><code># Parse HTML\n./examples/parse_html.sh\n\n# Query Knowledge Graph\n./examples/query_kg.sh\n\n# Browse URL\n./examples/browse_url.sh\n</code></pre>"},{"location":"user-guide/quickstart/#step-4-view-logs-optional","title":"Step 4: View Logs (Optional)","text":"<pre><code># Follow logs\n./docker/scripts/docker-up.sh --logs\n\n# Or with docker-compose\ndocker-compose logs -f\n</code></pre>"},{"location":"user-guide/quickstart/#step-5-stop-server","title":"Step 5: Stop Server","text":"<pre><code>./docker/scripts/docker-up.sh --stop\n</code></pre> <p>That's it! \ud83c\udf89</p>"},{"location":"user-guide/quickstart/#option-2-local-development","title":"Option 2: Local Development \ud83d\udcbb","text":""},{"location":"user-guide/quickstart/#step-1-build","title":"Step 1: Build","text":"<pre><code># Build the project\ncargo build --release\n</code></pre>"},{"location":"user-guide/quickstart/#step-2-run","title":"Step 2: Run","text":"<pre><code># Start the server\ncargo run\n</code></pre> <p>You should see: <pre><code>INFO  Starting Semantic Browser Agent\nINFO  Initializing in-memory Knowledge Graph\nINFO  Server running on http://127.0.0.1:3000\n</code></pre></p>"},{"location":"user-guide/quickstart/#step-3-test","title":"Step 3: Test","text":"<p>Open a new terminal:</p> <pre><code># Parse HTML\ncurl -X POST http://localhost:3000/parse \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer secret\" \\\n  -d '{\"html\": \"&lt;html&gt;&lt;title&gt;Test&lt;/title&gt;&lt;/html&gt;\"}'\n\n# Query KG\ncurl -X POST http://localhost:3000/query \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer secret\" \\\n  -d '{\"query\": \"SELECT * WHERE { ?s ?p ?o }\"}'\n</code></pre>"},{"location":"user-guide/quickstart/#testing","title":"Testing \ud83e\uddea","text":""},{"location":"user-guide/quickstart/#quick-test","title":"Quick Test","text":"<pre><code># Using Docker (complete test suite)\n./docker/scripts/docker-test.sh\n\n# Or locally\ncargo test\n</code></pre>"},{"location":"user-guide/quickstart/#detailed-testing","title":"Detailed Testing","text":"<pre><code># Unit tests only\n./docker/scripts/docker-test.sh --unit-only\n\n# Integration tests only\n./docker/scripts/docker-test.sh --integration-only\n\n# With benchmarks\n./docker/scripts/docker-test.sh --with-bench\n</code></pre>"},{"location":"user-guide/quickstart/#api-endpoints","title":"API Endpoints","text":"<p>All endpoints require: <code>Authorization: Bearer secret</code></p>"},{"location":"user-guide/quickstart/#1-parse-html","title":"1. Parse HTML","text":"<p>Extract semantic data from HTML:</p> <pre><code>curl -X POST http://localhost:3000/parse \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer secret\" \\\n  -d '{\n    \"html\": \"&lt;html&gt;&lt;head&gt;&lt;title&gt;Example&lt;/title&gt;&lt;script type=\\\"application/ld+json\\\"&gt;{\\\"@type\\\": \\\"Person\\\", \\\"name\\\": \\\"John\\\"}&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\"\n  }'\n</code></pre> <p>Response: <pre><code>{\n  \"title\": \"Example\",\n  \"entities\": [\"http://schema.org/Person\"]\n}\n</code></pre></p>"},{"location":"user-guide/quickstart/#2-query-knowledge-graph","title":"2. Query Knowledge Graph","text":"<p>Execute SPARQL queries:</p> <pre><code>curl -X POST http://localhost:3000/query \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer secret\" \\\n  -d '{\n    \"query\": \"SELECT * WHERE { ?s ?p ?o } LIMIT 10\"\n  }'\n</code></pre>"},{"location":"user-guide/quickstart/#3-browse-url","title":"3. Browse URL","text":"<p>Extract semantic information from URLs:</p> <pre><code>curl -X POST http://localhost:3000/browse \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer secret\" \\\n  -d '{\n    \"url\": \"https://example.com\",\n    \"query\": \"extract main content\"\n  }'\n</code></pre>"},{"location":"user-guide/quickstart/#configuration","title":"Configuration \u2699\ufe0f","text":"<p>See Docker Setup Environment Variables for complete configuration options.</p>"},{"location":"user-guide/quickstart/#basic-configuration","title":"Basic Configuration","text":"<pre><code># Copy template\ncp .env.example .env\n\n# Edit as needed\nnano .env\n</code></pre>"},{"location":"user-guide/quickstart/#with-docker","title":"With Docker","text":"<pre><code># Restart to apply changes\n./docker/scripts/docker-up.sh --restart\n</code></pre>"},{"location":"user-guide/quickstart/#with-cargo","title":"With Cargo","text":"<pre><code># Set environment variables\nRUST_LOG=debug KG_PERSIST_PATH=./data/kg cargo run\n</code></pre>"},{"location":"user-guide/quickstart/#useful-commands","title":"Useful Commands \ud83d\udee0\ufe0f","text":""},{"location":"user-guide/quickstart/#docker-commands","title":"Docker Commands","text":"<pre><code># Status\n./docker/scripts/docker-up.sh --status\ndocker-compose ps\n\n# Logs\n./docker/scripts/docker-up.sh --logs\ndocker-compose logs -f semantic_browser\n\n# Restart\n./docker/scripts/docker-up.sh --restart\ndocker-compose restart\n\n# Stop\n./docker/scripts/docker-up.sh --stop\ndocker-compose down\n\n# Rebuild\n./docker/scripts/docker-build.sh\ndocker-compose build\n</code></pre>"},{"location":"user-guide/quickstart/#cargo-commands","title":"Cargo Commands","text":"<pre><code># Build\ncargo build\ncargo build --release\n\n# Run\ncargo run\n\n# Test\ncargo test\ncargo test --test integration_test\n\n# Benchmark\ncargo bench\n\n# Format\ncargo fmt\n\n# Lint\ncargo clippy\n</code></pre>"},{"location":"user-guide/quickstart/#common-issues","title":"Common Issues \ud83d\udd27","text":""},{"location":"user-guide/quickstart/#port-already-in-use","title":"Port Already in Use","text":"<p>Problem: <code>Address already in use (os error 48)</code></p> <p>Solution: <pre><code># Find and kill process on port 3000\nlsof -ti:3000 | xargs kill -9\n\n# Or change port in .env\n# SERVER_PORT=3001\n</code></pre></p>"},{"location":"user-guide/quickstart/#permission-denied","title":"Permission Denied","text":"<p>Problem: <code>./docker/scripts/docker-up.sh: Permission denied</code></p> <p>Solution: <pre><code>chmod +x docker/scripts/*.sh\nchmod +x docs/examples/*.sh\n</code></pre></p>"},{"location":"user-guide/quickstart/#docker-build-slow","title":"Docker Build Slow","text":"<p>Problem: Build takes too long</p> <p>Solution: <pre><code># Enable BuildKit\nexport DOCKER_BUILDKIT=1\n\n# Use cached layers\n./docker/scripts/docker-build.sh\n</code></pre></p>"},{"location":"user-guide/quickstart/#buildkit-casing-error","title":"BuildKit Casing Error","text":"<p>Problem: <code>FromAsCasing: 'as' and 'FROM' keywords' casing do not match</code></p> <p>Solution: This has been fixed in the Dockerfiles. All keywords are now UPPERCASE.</p> <p>To verify: <pre><code>./docker/scripts/verify-dockerfile-syntax.sh\n</code></pre></p>"},{"location":"user-guide/quickstart/#credentials-error","title":"Credentials Error","text":"<p>Problem: <code>error getting credentials - err: exit status 1</code></p> <p>Solution: <pre><code># Restart Docker Desktop\n# Or clear Docker credentials\nrm ~/.docker/config.json\ndocker login\n</code></pre></p>"},{"location":"user-guide/quickstart/#health-check-fails","title":"Health Check Fails","text":"<p>Problem: Service won't become healthy</p> <p>Solution: <pre><code># Check logs\ndocker-compose logs semantic_browser\n\n# Restart with debug logging\nRUST_LOG=debug docker-compose up\n</code></pre></p>"},{"location":"user-guide/quickstart/#next-steps","title":"Next Steps \ud83d\udcda","text":"<ol> <li>Read Documentation:</li> <li>README.md - Full documentation</li> <li>Docker Setup - Docker details</li> <li> <p>Testing - Testing guide</p> </li> <li> <p>Try Examples:</p> </li> <li> <p>examples/ - API usage examples</p> </li> <li> <p>Explore Features:</p> </li> <li>ML Models for NER</li> <li>SPARQL queries</li> <li> <p>Knowledge Graph inference</p> </li> <li> <p>Contribute:</p> </li> <li>Run tests: <code>./docker/scripts/docker-test.sh</code></li> <li>Check linting: <code>cargo fmt &amp;&amp; cargo clippy</code></li> <li>Submit PR</li> </ol>"},{"location":"user-guide/quickstart/#support","title":"Support \ud83d\udcac","text":"<ul> <li>Issues: GitHub Issues</li> <li>Documentation: See docs in repository</li> <li>Examples: <code>examples/</code> directory</li> </ul>"},{"location":"user-guide/quickstart/#summary","title":"Summary","text":""},{"location":"user-guide/quickstart/#docker-workflow","title":"Docker Workflow","text":"<pre><code>cp .env.example .env\n./docker/scripts/docker-up.sh -d\n./examples/parse_html.sh\n./docker/scripts/docker-up.sh --stop\n</code></pre>"},{"location":"user-guide/quickstart/#local-workflow","title":"Local Workflow","text":"<pre><code>cargo run &amp;\ncurl -X POST http://localhost:3000/parse \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer secret\" \\\n  -d '{\"html\": \"&lt;html&gt;&lt;title&gt;Test&lt;/title&gt;&lt;/html&gt;\"}'\n</code></pre> <p>Happy coding! \ud83d\ude80</p>"},{"location":"user-guide/examples/","title":"API Examples","text":"<p>This directory contains example scripts for using the Semantic Browser API.</p>"},{"location":"user-guide/examples/#prerequisites","title":"Prerequisites","text":"<p>Make the example scripts executable: <pre><code>chmod +x docs/examples/*.sh\n</code></pre></p> <p>See Quick Start for server setup instructions.</p>"},{"location":"user-guide/examples/#examples","title":"Examples","text":""},{"location":"user-guide/examples/#core-api-examples","title":"Core API Examples","text":"<p>Extract semantic data from HTML: <pre><code>./examples/parse_html.sh\n</code></pre></p> <p>Query and update the knowledge graph using SPARQL: <pre><code>./examples/query_kg.sh\n</code></pre></p> <p>Browse a URL and extract semantic information: <pre><code>./examples/browse_url.sh\n</code></pre></p> <p>JWT token generation and revocation with Redis: <pre><code>./examples/token_revocation.sh\n</code></pre></p>"},{"location":"user-guide/examples/#comprehensive-workflows","title":"Comprehensive Workflows","text":"<p>Complete ML NER workflow with BERT models: <pre><code>./examples/ner-bert-workflow.sh\n</code></pre></p> <p>Knowledge graph inference with embeddings: <pre><code>./examples/kg-ml-inference.sh\n</code></pre></p> <p>End-to-end browser automation workflow: <pre><code>./examples/browser-workflow.sh\n</code></pre></p> <p>MCP protocol client integration: <pre><code>./examples/mcp-client-integration.sh\n</code></pre></p>"},{"location":"user-guide/examples/#authentication-and-rate-limiting","title":"Authentication and Rate Limiting","text":"<p>See API Documentation for authentication and rate limiting details.</p>"},{"location":"user-guide/examples/#environment-variables","title":"Environment Variables","text":"<p>See Docker Setup Environment Variables for all configuration options.</p> <p>Example: <pre><code>RUST_LOG=debug KG_PERSIST_PATH=./kg_data cargo run\n</code></pre></p>"}]}