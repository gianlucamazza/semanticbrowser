name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Run tests
      run: cargo test --release

    - name: Build release binary
      run: cargo build --release

    - name: Build Docker image
      run: |
        docker build -t semantic-browser:${{ github.ref_name }} .
        docker tag semantic-browser:${{ github.ref_name }} semantic-browser:latest

    - name: Create release archive
      run: |
        tar -czf semantic-browser-${{ github.ref_name }}-linux-x64.tar.gz -C target/release semantic_browser_agent
        tar -tzf semantic-browser-${{ github.ref_name }}-linux-x64.tar.gz

    - name: Generate changelog
      id: changelog
      run: |
        # Extract tag without 'v' prefix
        VERSION=${{ github.ref_name }}
        VERSION=${VERSION#v}

        # Generate changelog from git history
        echo "## Changes in ${VERSION}" > changelog.md
        echo "" >> changelog.md

        # Get commits since last tag
        git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD~1)..HEAD >> changelog.md

        # Read the changelog
        {
          echo 'changelog<<EOF'
          cat changelog.md
          echo EOF
        } >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## ${{ github.ref_name }}

          ${{ steps.changelog.outputs.changelog }}

          ### Downloads
          - **Binary**: `semantic-browser-${{ github.ref_name }}-linux-x64.tar.gz`
          - **Docker**: `docker pull semantic-browser:${{ github.ref_name }}`

          ### Installation
          ```bash
          # From binary
          tar -xzf semantic-browser-${{ github.ref_name }}-linux-x64.tar.gz
          ./semantic_browser_agent

          # From Docker
          docker run -p 3000:3000 semantic-browser:${{ github.ref_name }}
          ```
        draft: false
        prerelease: false

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./semantic-browser-${{ github.ref_name }}-linux-x64.tar.gz
        asset_name: semantic-browser-${{ github.ref_name }}-linux-x64.tar.gz
        asset_content_type: application/gzip

  publish-docker:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: semantic-browser
        tags: |
          type=ref,event=tag
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release, publish-docker]
    if: success()

    steps:
    - name: Notify success
      run: |
        echo "Release ${{ github.ref_name }} completed successfully!"
        echo "GitHub Release: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
        echo "Docker Image: semantic-browser:${{ github.ref_name }}"