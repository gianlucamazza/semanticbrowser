name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  PYO3_USE_ABI3_FORWARD_COMPATIBILITY: 1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        features:
          - "--no-default-features"
          - "--features browser-automation"
          - "--features llm-openai"
          - "--features llm-anthropic"
          - "--features onnx-integration"
          - "--all-features"

    steps:
    - uses: actions/checkout@v5

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Run unit tests
      run: cargo test --lib ${{ matrix.features }}

    - name: Run integration tests
      run: cargo test --test integration_tests ${{ matrix.features }}

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build release
      run: cargo build --release --verbose

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: semantic_browser_agent
        path: target/release/semantic_browser_agent

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Run benchmarks
      run: cargo bench --verbose

  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [test, lint, build, benchmark]
    if: always()

    steps:
    - name: Check CI status
      run: |
        echo "## CI/CD Check Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Linting | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Benchmarks | ${{ needs.benchmark.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [[ "${{ needs.test.result }}" != "success" || "${{ needs.lint.result }}" != "success" || "${{ needs.build.result }}" != "success" ]]; then
          echo "❌ CI checks failed! Please review the results above." >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ All CI checks passed!" >> $GITHUB_STEP_SUMMARY
        fi