name: Security

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/Cargo.toml'
      - '**/Cargo.lock'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/Cargo.toml'
      - '**/Cargo.lock'
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'

env:
  CARGO_TERM_COLOR: always

jobs:
  audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

    - name: Run audit with advisory database check
      run: cargo audit --db ~/.cargo/advisory-db

  osv-scanner:
    name: OSV Vulnerability Scanner
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run OSV-Scanner
      uses: google/osv-scanner-action@v1
      with:
        scan-args: |
          --recursive
          --skip-git
          .

  cargo-deny:
    name: Cargo Deny
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install cargo-deny
      run: cargo install cargo-deny

    - name: Run cargo-deny
      run: cargo deny check

  trivy-docker:
    name: Trivy Docker Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: docker build -t semantic-browser:scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'image'
        scan-ref: 'semantic-browser:scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  cargo-tarpaulin:
    name: Code Coverage
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Run tests with coverage
      run: cargo tarpaulin --out Xml

    - name: Upload coverage to codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./cobertura.xml
        fail_ci_if_error: false

  fossa:
    name: FOSSA License Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run FOSSA scan
      uses: fossas/fossa-action@v1
      with:
        api-key: ${{ secrets.FOSSA_API_KEY }}

  summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [audit, osv-scanner, cargo-deny, trivy-docker, cargo-tarpaulin]
    if: always()

    steps:
    - name: Security scan summary
      run: |
        echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Security Audit | ${{ needs.audit.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| OSV Scanner | ${{ needs.osv-scanner.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Cargo Deny | ${{ needs.cargo-deny.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Scan | ${{ needs.trivy-docker.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Coverage | ${{ needs.cargo-tarpaulin.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [[ "${{ needs.audit.result }}" == "failure" || "${{ needs.osv-scanner.result }}" == "failure" || "${{ needs.cargo-deny.result }}" == "failure" ]]; then
          echo "❌ Security issues found! Please review the failed checks." >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ All security checks passed!" >> $GITHUB_STEP_SUMMARY
        fi